#!/bin/env bash

# Copyright (C) 2023, Kolade Ayomide Olanrewaju (tether)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#--------------------------------------------------------------
################### BEGIN IMPORTANT NOTICE ####################
#--------------------------------------------------------------
# Functions and variables in this section are only used within this script and
# cannot be accessed externally, as such they follow a specific
# naming convention to highlight the difference *_* e.g print_success
# DO NOT USE THIS NAMING SCHEME FOR ANY EXTERNAL FUNCTIONS

#--------------------------------------------------------------
# Check if bash version is >= 5
#--------------------------------------------------------------
[[ ${BASH_VERSINFO[0]} -lt 5 ]] && {
	echo -e "\033[1;97m[\033[1;31m-\033[1;97m] Bash version 5.0 or later is required \033[00m"
	exit 1
}

#--------------------------------------------------------------
# Set the name of this script
#--------------------------------------------------------------
script_name="${0##*/}"

#--------------------------------------------------------------
# Set the version of this script
#--------------------------------------------------------------
script_version="23.12.20.1049"

#--------------------------------------------------------------
# Set variables if running on Android
#--------------------------------------------------------------
[[ -d /system/app/ && -f /system/build.prop ]] && {
	# Don't use any fallback if not in a magisk module
	unset module_directory
	# Don't use any fallback if no external storage
	unset external_storage
	# Set module directory if installed in a magisk module
	for module_precursor in /data/adb/modules/*; do
		[[ -f $module_precursor/system/bin/tether ]] && {
			module_directory="$module_precursor"
			break
		}
	done
	# Set external storage to USB-OTG or SD card if available
	for available_storage in /storage/*-*; do
		[[ -d $available_storage ]] && {
			export external_storage="$available_storage"
			break
		}
	done
	# Set Termux directory
	termux_directory="/data/data/com.termux/files"
	# Set internal storage
	phone_storage="/mnt/sdcard"
	# Set Android version for non-root user
	[[ $USER != "root" || $EUID -ne 0 ]] && [[ -n $EUID ]] && {
		[[ -f /product/etc/build.prop ]] && {
			android_version="$(< /product/etc/build.prop)"
		}
		[[ -f /product/build.prop ]] && {
			android_version="$(< /product/build.prop)"
		}
		android_version="${android_version/*ro.product.build.version.release=}"
		android_version="${android_version/ro.product.build.version.release_or_codename=*}"
		android_version="${android_version/[[:space:]]}"
	}
	# Set Android version for root user
	[[ $USER == "root" || $EUID -eq 0 ]] && {
		android_version="$(< /system/build.prop)"
		android_version="${android_version/*ro.system.build.version.release=}"
		android_version="${android_version/ro.system.build.version.release_or_codename=*}"
		android_version="${android_version/[[:space:]]}"
	}
}

#--------------------------------------------------------------
# Get the available number of cpu threads
#--------------------------------------------------------------
cpu_core_count="$(< /sys/devices/system/cpu/online)"
cpu_core_count="${cpu_core_count//*\-}"
cpu_core_count="${cpu_core_count//[[:space:]]}"
cpu_core_count="$((cpu_core_count + 1))"

#--------------------------------------------------------------
# Print out error message
#--------------------------------------------------------------
print_error() {
	echo -e "\033[1;97m[\033[1;31m-\033[1;97m] $@ \033[00m"
}

#--------------------------------------------------------------
# Print out success message
#--------------------------------------------------------------
print_success() {
	echo -e "\033[1;97m[\033[1;32m+\033[1;97m] $@ \033[00m"
}

#--------------------------------------------------------------
# Print out warning/notice
#--------------------------------------------------------------
print_warning() {
	echo -e "\033[1;97m[\033[1;35m*\033[1;97m] $@ \033[00m"
}

#--------------------------------------------------------------
# Print out non bold text aligned with print_error
#--------------------------------------------------------------
print_aligned() {
	echo -e "    $@"
}

#--------------------------------------------------------------
# Print out status message on exit
#--------------------------------------------------------------
run_on_exit() {
	echo -e "\n" && print_error "Aborted" &&
	exit 1
}

#--------------------------------------------------------------
# Remove files and print out status message on exit
#--------------------------------------------------------------
remove_file_on_exit() {
	echo -e "\n" && print_error "Aborted" &&
	rm -r "$@" 2>/dev/null
	exit 1
}

#--------------------------------------------------------------
# Print out notice/guide after error
#--------------------------------------------------------------
print_notification() {
	print_aligned "Try '$script_name --help' for more information." &&
	exit 1
}

#--------------------------------------------------------------
# Print out help message if there no input argument
#--------------------------------------------------------------
print_no_argument() {
	[[ $# -eq 0 ]] && {
		print_help "$@"
	}
}

#--------------------------------------------------------------
# Print unsupported OS error
#--------------------------------------------------------------
print_os_error() {
	print_error "Unsupported OS detected" &&
	exit 1
}

#--------------------------------------------------------------
# Print missing dependencies error
#--------------------------------------------------------------
print_missing_dependencies() {
	print_error "'$@' is not installed" &&
	exit 1
}

#--------------------------------------------------------------
# Print insufficient write/read permissions error
#--------------------------------------------------------------
print_write_error() {
	print_error "Cannot create directory '$1': Permission denied" &&
	exit 1
}

print_file_write_error() {
	print_error "Cannot create file '$1': Permission denied" &&
	exit 1
}

print_file_read_error() {
	print_error "Cannot read '$1' file: Permission denied" &&
	exit 1
}

#--------------------------------------------------------------
# Print syntax error
#--------------------------------------------------------------
print_syntax_error() {
	print_error "Syntax error"
	print_notification
}

#--------------------------------------------------------------
# Print user permissions error
#--------------------------------------------------------------
print_not_root_user() {
	[[ $EUID -gt 0 ]] && {
		print_error "Running as non-root user is not supported" &&
		exit 1
	}
}

print_not_normal_user() {
	[[ $EUID -eq 0 ]] && {
		print_error "Running as root user is not supported" &&
		exit 1
	}
}

#--------------------------------------------------------------
# Print version info
#--------------------------------------------------------------
print_version() {
	echo -e "${script_name} ${script_version}-${HOSTTYPE}"
	exit 0
}

#--------------------------------------------------------------
# Handle password creation
#--------------------------------------------------------------
create_password() {
	read -rsp "Input Password: " file_password
	echo ""
	read -rsp "Verify Password: " file_password2
	echo -e "\n"
	[[ $file_password != "$file_password2" ]] && {
		print_error "Passwords do not match"
		unset file_password
		unset file_password2
		exit 1
	}
	[[ -z $file_password ]] && {
		print_error "Password string cannot be empty"
		unset file_password
		unset file_password2
		exit 1
	}
}

#--------------------------------------------------------------
# Handle input options/arguments
#--------------------------------------------------------------
input_option_type_one() {
	for primary_options in "${@:1}"; do
		case "$primary_options" in
			-h | --help)
				print_help
			;;
			-V | --version)
				print_version
			;;
			-*)
				for secondary_options in "${@:2}"; do
					case "$secondary_options" in
						-h | --help)
							print_help
						;;
					esac
				done
				[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
					print_error "Invalid option '${primary_options}'"
					print_notification
				}
				print_error "Invalid option -- '${primary_options#*\-}'"
				print_notification
			;;
		esac
	done
}

input_option_type_two() {
	for primary_options in "${@:1}"; do
		case "$primary_options" in
			-h | --help)
				print_help
			;;
			-V | --version)
				print_version
			;;
			-*)
				[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
					print_error "Invalid option '${primary_options}'"
					print_notification
				}
				print_error "Invalid option -- '${primary_options#*\-}'"
				print_notification
			;;
			*)
				print_error "Invalid option '${primary_options}'"
				print_notification
			;;
		esac
	done
}

#--------------------------------------------------------------
# Print program banner
#--------------------------------------------------------------
print_banner() {
	echo " 
████████╗███████╗████████╗██╗   ██╗███████╗██████═╗
╚══██╔══╝██╔════╝╚══██╔══╝██║   ██║██╔════╝██╔═══██ 
   ██║   ███████╗   ██║   ████████║███████╗███████═╗
   ██║   ██╔════╝   ██║   ██╔═══██║██╔════╝██╔═══██║
   ██║   ███████╗   ██║   ██║   ██║███████╗██║   ██║
   ╚═╝   ╚══════╝   ╚═╝   ╚═╝   ╚═╝╚══════╝╚═╝   ╚═╝
"
}

#--------------------------------------------------------------
# Print colored usage/progress bar
#--------------------------------------------------------------
print_usage_bar() {
	color_red="\033[1;31m"
	color_green="\033[1;32m"
	color_yellow="\033[1;33m"
	color_white="\033[1;97m"
	# Reduce $usage_visualizer value to reduce runtime
	usage_counter="$(( usage_visualizer / 5 ))"
	# Handles all $usage_visualizer values > 0
	out_block="${color_green}"
	for ((blk_counter=0; blk_counter < $usage_counter; blk_counter++)); do
		out_block+="■"
		# Show ${color_yellow} blocks after 7 ${color_green} blocks
		[[ $blk_counter -eq 6 ]] && {
			out_block+="${color_yellow}"
		}
		# Show ${color_red} blocks after 7 ${color_yellow} blocks
		[[ $blk_counter -eq 13 ]] && {
			out_block+="${color_red}"
		}
	done
	# Handles $usage_visualizer values <= 0 || $usage_visualizer values < 100
	out_empty="${color_white}"
	for ((; blk_counter < 20; blk_counter++)); do
		out_empty+="-"
	done
	# Output colored progress bar
	echo "${color_white}[ ${out_block}${out_empty} ]"
}

#--------------------------------------------------------------
# Create custom .bash.rc
#--------------------------------------------------------------
print_bashrc() {
	bash_file="/home/"${SUDO_USER:=$USER}"/.bashrc"
	[[ -d /system/app/ && -f /system/build.prop ]] && {
		mkdir -p "$module_directory/system/etc/bash" 2>/dev/null
		bash_file="$module_directory/system/etc/bash/.bashrc"
	}
	cat 2>/dev/null << "EOF" > "$bash_file"
# Exit if shell is not running interactively
[[ $- != *i* ]] && return

# Correct minor errors in directory spelling using 'cd'
shopt -s cdspell

# Check and update LINES and COLUMNS after each (external) commands
shopt -s checkwinsize

# Use GNU error format for shell error messages
shopt -s gnu_errfmt

# Correct error in directory names when using tab-completions
shopt -s dirspell

# Append history list to HISTFILE instead of overwriting it
shopt -s histappend

# Allow re-editing a failed command during history substitution
shopt -s histreedit

# Check for stopped jobs before exiting an interactive shell
shopt -s checkjobs

export HISTSIZE="25000"
export HISTFILESIZE="25000"
export HISTFILE="/home/${SUDO_USER:=$USER}/.bash_history"
export HISTCONTROL="erasedups:ignoredups:ignorespace"
export TMPDIR="/tmp"
export PATH=/home/"${SUDO_USER:=$USER}"/.local/bin:/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/bin

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias vi='vim'
alias void='ping -c4 voidlinux.org'
alias google='ping -c4 google.com'

# Use vi/vim keybindings
set -o vi

# Use 'cd' tab-completions for 'pp'
complete -o nospace -F _cd pp

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: cd
#--------------------------------------------------------------
pp() {
	script_name="${FUNCNAME[0]}"
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION] [NUMBER] [FOLDER/FILE...]\n"
		echo -e "Examples: $script_name /sdcard/folder"
		echo -e "          $script_name 1"
		echo -e "          $script_name 1 folder"
		echo -e "          $script_name -L folder"
		echo -e "          $script_name -L 1 folder"
		echo -e "          $script_name -L 1 folder/folder\n"
		echo -e "Options: -h, --help  Print out this message\n"
		echo -e "All 'cd' options are also available here\n"
		echo -e "Expand 'cd' functionality"
		return 0
	}
	check_input_argument() {
		# Handles cd
		# Handles cd 0
		[[ $# -eq 0 || $1 == "0" ]] && {
			cd && return || return
		}
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				*)
					unset dir_glob
					for glob_count in {1..9}; do
						dir_glob+=../
						[[ $# -eq 1 ]] && {
							case "$1" in
								# Handles pp [NUMBER] ---> pp 1
								$glob_count)
									cd "${dir_glob}" && return || return
								;;
								# Handles pp [OPTION] ---> pp -L
								-*)
									cd "$1" && return || return
								;;
							esac
						}
						[[ $# -eq 2 ]] && {
							[[ $1 == "$glob_count" ]] && {
								case "$2" in
									# Handles pp [NUMBER] [OPTION] ---> pp 2 -L
									-*)
										cd "$2" "$dir_glob" && return || return
									;;
									# Handles pp [NUMBER] [FILE/FOLDER] ---> pp 2 sys/class
									*)
										cd ${dir_glob}$2 2>/dev/null ||
										cd ${dir_glob}"$2"
										return
									;;
								esac
								return
							}
							[[ $2 == "$glob_count" ]] && {
								case "$1" in
									# Handles pp [OPTION] [NUMBER] ---> pp -L 2
									-*)
										cd "$1" "$dir_glob" && return || return
									;;
									# Handles pp [FILE/FOLDER] [NUMBER] ---> pp sys/class 2
									*)
										cd ${dir_glob}$1 2>/dev/null ||
										cd ${dir_glob}"$1"
										return
									;;
								esac
								return
							}
						}
					done
					# Handles pp [NUMBER] [OPTION] [FILE/FOLDER]... ---> pp 2 -L mnt media
					# Handles pp [NUMBER] [FILE/FOLDER]... ---> pp 2 mnt media
					# Handles pp [OPTION] [NUMBER] [FILE/FOLDER]... ---> pp -L 2 mnt media
					# Handles pp [OPTION] [FILE/FOLDER] ---> pp -L folder1
					# Handles pp [FILE/FOLDER]... ---> pp folder1
					# Handles pp [FILE/FOLDER]... [OPTION] ---> pp folder1 folder2 -L
					cd "$@" && return || return
				;;
			esac
		done
	}
	check_input_argument "$@"
	return
}

# Set colors
green="\[\e[1;32m\]"
blue="\[\e[1;34m\]"
yellow="\[\e[1;33m\]"
magenta="\[\e[1;35m\]"
cyan="\[\e[1;36m\]"
white="\[\e[1;97m\]"
none="\[\e[00m\]"
	
# Handles Android
[[ -d /system/app/ && -f /system/build.prop ]] && {
	unset HISTFILE

	# Don't use any fallback if no external storage
	unset external_storage
	[[ $USER != "root" || $EUID -eq 1000 ]] && {
		externalstorage="$(df -h | grep /storage | awk 'NR==2 {print $6}')"
		export external_storage="$externalstorage"
	}
	[[ $EUID -eq 0 || $USER == "root" ]] && {
		# Set external storage to USB-OTG or SD card if available
		for available_storage in /storage/*-*; do
			[[ -d $available_storage ]] && {
				export external_storage="$available_storage"
				break
			}
		done
	}

	# Set internal storage
	export phone_storage="/mnt/sdcard"

	export HOME="$phone_storage"
	export TERM="xterm-256color"
	export SHELL="$0"
	export PATH=/system/bin:/system/xbin:/sbin

	# Expand path for devices with termux installed
	[[ -n $(pm -l 2>/dev/null | grep "com.termux$") ]] && {
		export PATH=/data/data/com.termux/files/usr/bin:/system/bin:/system/xbin:/sbin
	}

	export TMPDIR="/data/local/tmp"
	# Fixes empty $USER in non-root termux
	[[ -z $USER ]] && {
		: '\u'
		USER="${_@P}"
	}

	alias external='cd $external_storage'
	alias sdcard='cd $phone_storage'
	alias termux='cd /data/data/com.termux/files'

	alias vi='busybox vi'
	alias vim='vi'

	module_directory=/data/adb/modules/tether
	alias bash='bash --rcfile $module_directory/system/etc/bash/.bashrc'

	[[ $USER == "root" || $EUID -eq 0 ]] && {
		blue=$magenta
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
		cd ~
	}
	[[ $USER == "shell" || $EUID -eq 2000 ]] && {
		blue=$cyan
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
		cd ~
	}
	[[ $USER != "root" && $USER != "shell" ]] || [[ $EUID -ge 1000 ]] && {
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
		cd ~
	}
}

# Handles Android (chroot)
[[ ! -d /system/app && -d /sys/class/power_supply/battery ]] && {
	unset ANDROID_I18N_ROOT
	unset DEX2OATBOOTCLASSPATH
	unset PREFIX
	unset BOOTCLASSPATH
	unset ANDROID_ROOT
	unset ANDROID_TZDATA_ROOT
	unset ANDROID_ART_ROOT
	unset ANDROID_DATA

	export external_storage="/media"
	export phone_storage="/mnt/sdcard"

	alias external='cd $external_storage'
	alias sdcard='cd $phone_storage'

	module_dns="/mnt/module-dnscrypt"

	alias querylogs='vi $module_dns/query-logs.log'
	alias dnslogs='vi $module_dns/dnscrypt-proxy.log'
	alias blockedlogs='vi $module_dns/blocked-names.log'
	alias blockedips='vi $module_dns/blocked-ips.log'
	alias allowedlogs='vi $module_dns/allowed-names.log'

	alias editallowed='vi $module_dns/allowed-names.txt'
	alias editblocked='vi $module_dns/blocked-names.txt'
	alias editcloaked='vi $module_dns/cloaking-rules.txt'
	alias editblockedips='vi $module_dns/blocked-ips.txt'

	alias edittether="vi /home/${SUDO_USER:=$USER}/.local/bin/tether"

	[[ $EUID -eq 0 || $USER == "root" ]] && {
		blue=$magenta
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
	}
	[[ $EUID -gt 0 || $USER != "root" ]] && {
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
		cd ~
		[[ $SHLVL -eq 4 ]] && {
			session=$(tmux ls 2>/dev/null | wc -l)
			active=$(tmux ls 2>/dev/null | grep -c '(attached)')
			[[ $session -gt $active ]] && tmux attach && return 0
			tmux 2>/dev/null
		}
	}
}

# Handles Linux desktop including Virtual Machines
[[ -d /sys/class/power_supply/BAT0 ]] ||
# Check if device has a Snapdragon CPU and is an Android device
[[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] ||
# Check if device has a Mediatek CPU and is an Android device
[[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
	alias querylogs="vi /etc/dnscrypt-proxy/query-logs.log"
	alias dnslogs="vi /etc/dnscrypt-proxy/dnscrypt-proxy.log"
	alias blockedlogs="vi /etc/dnscrypt-proxy/blocked-names.log"
	alias blockedips="vi /etc/dnscrypt-proxy/blocked-ips.log"
	alias allowedlogs="vi /etc/dnscrypt-proxy/allowed-names.log"

	alias editallowed="vi /etc/dnscrypt-proxy/allowed-names.txt"
	alias editblocked="vi /etc/dnscrypt-proxy/blocked-names.txt"
	alias editcloaked='vi /etc/dnscrypt-proxy/cloaking-rules.txt'
	alias editblockedips="vi /etc/dnscrypt-proxy/blocked-ips.txt"

	alias edittether="vi /home/${SUDO_USER:=$USER}/.local/bin/tether"

	[[ $EUID -eq 0 || $USER == "root" ]] && {
		blue=$magenta
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
	}
	[[ $EUID -gt 0 || $USER != "root" ]] && {
		PS1="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}] [${green}\w${white}]\n${white}╰── ${yellow}$ ${none}"
		PS2="${white}┌─[${blue}\t${white}] [${blue}\h@\u${white}]\n${white}╰── ${yellow}> ${none}"
		cd ~
		[[ $SHLVL -eq 1 ]] && {
			session=$(tmux ls 2>/dev/null | wc -l)
			active=$(tmux ls 2>/dev/null | grep -c '(attached)')
			[[ $session -gt $active ]] && tmux attach && return 0
			tmux 2>/dev/null
		}
	}
}
EOF
	# Add exist status for Android
	[[ -d /system/app/ && -f /system/build.prop ]] && return 0
	# Change file ownership
	[[ -f /home/"${SUDO_USER:=$USER}"/.bashrc ]] && {
		chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.bashrc 2>/dev/null
	}
}

#--------------------------------------------------------------
# Create custom mkshrc for Android
#--------------------------------------------------------------
print_mkshrc_android() {
	mkdir -p "$module_directory/system/etc" 2>/dev/null
	cat 2>/dev/null << "EOF" > $module_directory/system/etc/mkshrc
#--------------------------------------------------------------
# Android
#--------------------------------------------------------------
# Don't use any fallback if no external storage
unset external_storage
# Set external storage to USB-OTG or SD card if available
for available_storage in /storage/*-*; do
	[[ -d $available_storage ]] && {
		export external_storage="$available_storage"
		break
	}
done

# Set internal storage
export phone_storage="/mnt/sdcard"

export HOME="$phone_storage"
export HOSTNAME=$(hostname)
export USER=$(id -un)
export PWD=$(pwd)
export TERM="xterm-256color"
export SHELL="$0"
export PATH=/system/bin:/system/xbin:/sbin
export TMPDIR="/data/local/tmp"

alias external='cd $external_storage'
alias sdcard='cd $phone_storage'
alias termux='cd /data/data/com.termux/files'

alias vi='busybox vi'
alias vim='vi'
alias ls='ls --color=auto'
alias grep='grep --color=auto'

alias void='ping -c4 voidlinux.org'
alias google='ping -c4 google.com'

module_directory=/data/adb/modules/tether
alias bash='bash --rcfile $module_directory/system/etc/bash/.bashrc'

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: cd
#--------------------------------------------------------------
pp() {
	script_name="pp"
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION] [NUMBER] [FOLDER/FILE...]\n"
		echo -e "Examples: $script_name /sdcard/folder"
		echo -e "          $script_name 1"
		echo -e "          $script_name 1 folder"
		echo -e "          $script_name -L folder"
		echo -e "          $script_name -L 1 folder"
		echo -e "          $script_name -L 1 folder/folder\n"
		echo -e "Options: -h, --help  Print out this message\n"
		echo -e "All 'cd' options are also available here\n"
		echo -e "Expand 'cd' functionality"
		return 0
	}
	check_input_argument() {
		# Handles cd
		# Handles cd 0
		[[ $# -eq 0 || $1 == "0" ]] && {
			cd && return || return
		}
		for primary_options in "$@"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				*)
					unset dir_glob
					for glob_count in 1 2 3 4 5 6 7 8 9; do
						dir_glob+=../
						[[ $# -eq 1 ]] && {
							case "$1" in
								# Handles pp [NUMBER] ---> pp 1
								$glob_count)
									cd "${dir_glob}" && return || return
								;;
								# Handles pp [OPTION] ---> pp -L
								-*)
									cd "$1" && return || return
								;;
							esac
						}
						[[ $# -eq 2 ]] && {
							[[ $1 == "$glob_count" ]] && {
								case "$2" in
									# Handles pp [NUMBER] [OPTION] ---> pp 2 -L
									-*)
										cd "$2" "$dir_glob" && return || return
									;;
									# Handles pp [NUMBER] [FILE/FOLDER] ---> pp 2 sys/class
									*)
										cd ${dir_glob}$2 2>/dev/null ||
										cd ${dir_glob}"$2"
										return
									;;
								esac
								return
							}
							[[ $2 == "$glob_count" ]] && {
								case "$1" in
									# Handles pp [OPTION] [NUMBER] ---> pp -L 2
									-*)
										cd "$1" "$dir_glob" && return || return
									;;
									# Handles pp [FILE/FOLDER] [NUMBER] ---> pp sys/class 2
									*)
										cd ${dir_glob}$1 2>/dev/null ||
										cd ${dir_glob}"$1"
										return
									;;
								esac
								return
							}
						}
					done
					# Handles pp [NUMBER] [OPTION] [FILE/FOLDER]... ---> pp 2 -L mnt media
					# Handles pp [NUMBER] [FILE/FOLDER]... ---> pp 2 mnt media
					# Handles pp [OPTION] [NUMBER] [FILE/FOLDER]... ---> pp -L 2 mnt media
					# Handles pp [OPTION] [FILE/FOLDER] ---> pp -L folder1
					# Handles pp [FILE/FOLDER]... ---> pp folder1
					# Handles pp [FILE/FOLDER]... [OPTION] ---> pp folder1 folder2 -L
					cd "$@" && return || return
				;;
			esac
		done
	}
	check_input_argument "$@"
	return
}

[[ $USER == "root" ]] && {
	PS1=$'\e[1;97m┌─[\e[1;35m$(date +%H:%M:%S)\e[1;97m] [\e[1;35m$HOSTNAME@$USER\e[1;97m] [\e[1;32m$PWD\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
	PS2=$'\e[1;97m┌─[\e[1;35m'
	PS2+="$(date +%H:%M:%S)"
	PS2+=$'\e[1;97m] [\e[1;35m'
	PS2+="$HOSTNAME@$USER"
	PS2+=$'\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
}
[[ $USER == "shell" ]] && {
	PS1=$'\e[1;97m┌─[\e[1;36m$(date +%H:%M:%S)\e[1;97m] [\e[1;36m$HOSTNAME@$USER\e[1;97m] [\e[1;32m$PWD\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
	PS2=$'\e[1;97m┌─[\e[1;36m'
	PS2+="$(date +%H:%M:%S)"
	PS2+=$'\e[1;97m] [\e[1;36m'
	PS2+="$HOSTNAME@$USER"
	PS2+=$'\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
}
[[ $USER != "root" && $USER != "shell" ]] && {
	PS1=$'\e[1;97m┌─[\e[1;34m$(date +%H:%M:%S)\e[1;97m] [\e[1;34m$HOSTNAME@$USER\e[1;97m] [\e[1;32m$PWD\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
	PS2=$'\e[1;97m┌─[\e[1;34m'
	PS2+="$(date +%H:%M:%S)"
	PS2+=$'\e[1;97m] [\e[1;34m'
	PS2+="$HOSTNAME@$USER"
	PS2+=$'\e[1;97m]\n\e[1;97m╰──\e[0m \e[1;33m$\e[0m '
}
EOF
}

#--------------------------------------------------------------
# Create custom user.js
#--------------------------------------------------------------
print_firefox() {
	unset user_js
	# Handles Android
	[[ -d /system/app/ && -f /system/build.prop ]] && {
		for firefox_dir in /data/data/org.mozilla.fennec_fdroid/files/mozilla/*default*; do
			[[ -f $firefox_dir/prefs.js || -f $firefox_dir/storage.sqlite || -f $firefox_dir/pkcs11.txt ]] && {
				user_js="$firefox_dir/user.js"
				break
			}
		done
	}

	# Handles Linux desktop
	[[ ! -d /system/app/ ]] && {
		for firefox_dir in /home/"${SUDO_USER:=$USER}"/.mozilla/firefox/*default*; do
			[[ -f $firefox_dir/prefs.js || -f $firefox_dir/storage.sqlite || -f $firefox_dir/pkcs11.txt ]] && {
				user_js="$firefox_dir/user.js"
				break
			}
		done
	}

	# Return an error if Firefox is installed but $firefox_dir doesn't exist
	[[ -z $user_js ]] && {
		user_js="user.js"
		return 1
	}

	cat 2>/dev/null << "EOF" > "$user_js"
//--------------------------------------------------------------
// Set browser startup page
// 0=blank, 1=home, 2=last visited page, 3=resume previous session
//--------------------------------------------------------------
user_pref("browser.startup.page", 3);

//--------------------------------------------------------------
// Set HOME+NEWWINDOW
// about:home, custom URL, about:blank
//--------------------------------------------------------------
user_pref("browser.startup.homepage", "about:blank");

//--------------------------------------------------------------
// Set NEWTAB page
// true=Firefox Home, false=blank page
//--------------------------------------------------------------
user_pref("browser.newtabpage.enabled", false);

//--------------------------------------------------------------
// Disable sponsored content on Firefox Home
//--------------------------------------------------------------
user_pref("browser.newtabpage.activity-stream.showSponsored", false);
user_pref("browser.newtabpage.activity-stream.showSponsoredTopSites", false);

//--------------------------------------------------------------
// Clear default topsites
//--------------------------------------------------------------
user_pref("browser.newtabpage.activity-stream.default.sites", "");

//--------------------------------------------------------------
// Disable geolocation service
//--------------------------------------------------------------
user_pref("geo.provider.network.url", "");

//--------------------------------------------------------------
// Disable using the OS' geolocation service
//--------------------------------------------------------------
user_pref("geo.provider.ms-windows-location", false);
user_pref("geo.provider.use_corelocation", false);
user_pref("geo.provider.use_gpsd", false);
user_pref("geo.provider.use_geoclue", false);

//--------------------------------------------------------------
// Disable recommendation pane in about:addons
//--------------------------------------------------------------
user_pref("extensions.getAddons.showPane", false);
user_pref("extensions.htmlaboutaddons.recommendations.enabled", false);

//--------------------------------------------------------------
// Disable personalized Extension Recommendations in about:addons
//--------------------------------------------------------------
user_pref("browser.discovery.enabled", false);

//--------------------------------------------------------------
// Disable shopping experience
//--------------------------------------------------------------
user_pref("browser.shopping.experience2023.enabled", false);

//--------------------------------------------------------------
// Disable new data submission
//--------------------------------------------------------------
user_pref("datareporting.policy.dataSubmissionEnabled", false);

//--------------------------------------------------------------
// Disable Health Reports
//--------------------------------------------------------------
user_pref("datareporting.healthreport.uploadEnabled", false);

//--------------------------------------------------------------
// Disable telemetry
//--------------------------------------------------------------
user_pref("toolkit.telemetry.unified", false);
user_pref("toolkit.telemetry.enabled", false);
user_pref("toolkit.telemetry.server", "data:,");
user_pref("toolkit.telemetry.archive.enabled", false);
user_pref("toolkit.telemetry.newProfilePing.enabled", false);
user_pref("toolkit.telemetry.shutdownPingSender.enabled", false);
user_pref("toolkit.telemetry.updatePing.enabled", false);
user_pref("toolkit.telemetry.bhrPing.enabled", false);
user_pref("toolkit.telemetry.firstShutdownPing.enabled", false);

//--------------------------------------------------------------
// Disable Telemetry Coverage
//--------------------------------------------------------------
user_pref("toolkit.telemetry.coverage.opt-out", true);
user_pref("toolkit.coverage.opt-out", true);
user_pref("toolkit.coverage.endpoint.base", "");

//--------------------------------------------------------------
// Disable PingCentre telemetry
//--------------------------------------------------------------
user_pref("browser.ping-centre.telemetry", false);

//--------------------------------------------------------------
// Disable Firefox Home telemetry
//--------------------------------------------------------------
user_pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
user_pref("browser.newtabpage.activity-stream.telemetry", false);

//--------------------------------------------------------------
// Disable Studies
//--------------------------------------------------------------
user_pref("app.shield.optoutstudies.enabled", false);

//--------------------------------------------------------------
// Disable Normandy/Shield
//--------------------------------------------------------------
user_pref("app.normandy.enabled", false);
user_pref("app.normandy.api_url", "");

//--------------------------------------------------------------
// Disable Crash Reports
//--------------------------------------------------------------
user_pref("breakpad.reportURL", "");
user_pref("browser.tabs.crashReporting.sendReport", false);

//--------------------------------------------------------------
// Enforce no submission of backlogged Crash Reports
//--------------------------------------------------------------
user_pref("browser.crashReports.unsubmittedCheck.autoSubmit2", false);

//--------------------------------------------------------------
// Disable Captive Portal detection
//--------------------------------------------------------------
user_pref("captivedetect.canonicalURL", "");
user_pref("network.captive-portal-service.enabled", false);

//--------------------------------------------------------------
// Disable Network Connectivity checks
//--------------------------------------------------------------
user_pref("network.connectivity-service.enabled", false);

//--------------------------------------------------------------
// Disable SB (Safe Browsing)
//--------------------------------------------------------------
user_pref("browser.safebrowsing.malware.enabled", false);
user_pref("browser.safebrowsing.phishing.enabled", false);

//--------------------------------------------------------------
// Disable SB checks for downloads
//--------------------------------------------------------------
user_pref("browser.safebrowsing.downloads.enabled", false);

//--------------------------------------------------------------
// Disable SB checks for downloads (remote)
//--------------------------------------------------------------
user_pref("browser.safebrowsing.downloads.remote.enabled", false);
user_pref("browser.safebrowsing.downloads.remote.url", "");

//--------------------------------------------------------------
// Disable SB checks for unwanted software
//--------------------------------------------------------------
user_pref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", false);
user_pref("browser.safebrowsing.downloads.remote.block_uncommon", false);

//--------------------------------------------------------------
// Disable "ignore this warning" on SB warnings
//--------------------------------------------------------------
user_pref("browser.safebrowsing.allowOverride", false);

//--------------------------------------------------------------
// Disable link prefetching
//--------------------------------------------------------------
user_pref("network.prefetch-next", false);

//--------------------------------------------------------------
// Disable DNS prefetching
//--------------------------------------------------------------
user_pref("network.dns.disablePrefetch", true);
user_pref("network.dns.disablePrefetchFromHTTPS", true);

//--------------------------------------------------------------
// Disable predictor / prefetching
//--------------------------------------------------------------
user_pref("network.predictor.enabled", false);
user_pref("network.predictor.enable-prefetch", false);

//--------------------------------------------------------------
// Disable link-mouseover opening connection to linked server
//--------------------------------------------------------------
user_pref("network.http.speculative-parallel-limit", 0);

//--------------------------------------------------------------
// Disable mousedown speculative connections on bookmarks and history
//--------------------------------------------------------------
user_pref("browser.places.speculativeConnect.enabled", false);

//--------------------------------------------------------------
// Enforce no "Hyperlink Auditing" (click tracking)
//--------------------------------------------------------------
user_pref("browser.send_pings", false);

//--------------------------------------------------------------
// Enable DNS-over-HTTPS (DoH)
// 0=default, 2=increased (TRR (Trusted Recursive Resolver) first), 3=max (TRR only), 5=off (no rollout)
//--------------------------------------------------------------
user_pref("network.trr.mode", 5);

//--------------------------------------------------------------
// Disable location bar making speculative connections
//--------------------------------------------------------------
user_pref("browser.urlbar.speculativeConnect.enabled", false);

//--------------------------------------------------------------
// Disable location bar contextual suggestions
//--------------------------------------------------------------
user_pref("browser.urlbar.suggest.quicksuggest.nonsponsored", false);
user_pref("browser.urlbar.suggest.quicksuggest.sponsored", false);

//--------------------------------------------------------------
// Disable live search suggestions
//--------------------------------------------------------------
user_pref("browser.search.suggest.enabled", false);
user_pref("browser.urlbar.suggest.searches", false);

//--------------------------------------------------------------
// Disable urlbar trending search suggestions
//--------------------------------------------------------------
user_pref("browser.urlbar.trending.featureGate", false);

//--------------------------------------------------------------
// Disable urlbar suggestions
//--------------------------------------------------------------
user_pref("browser.urlbar.addons.featureGate", false);
user_pref("browser.urlbar.mdn.featureGate", false);
user_pref("browser.urlbar.pocket.featureGate", false);
user_pref("browser.urlbar.weather.featureGate", false);

//--------------------------------------------------------------
// Disable urlbar clipboard suggestions
//--------------------------------------------------------------
user_pref("browser.urlbar.clipboard.featureGate", false);

//--------------------------------------------------------------
// Disable search and form history
//--------------------------------------------------------------
user_pref("browser.formfill.enable", false);

//--------------------------------------------------------------
// Disable coloring of visited links
//--------------------------------------------------------------
user_pref("layout.css.visited_links_enabled", false);

//--------------------------------------------------------------
// Disable auto-filling username & password form fields
//--------------------------------------------------------------
user_pref("signon.autofillForms", false);

//--------------------------------------------------------------
// Disable formless login capture for Password Manager
//--------------------------------------------------------------
user_pref("signon.formlessCapture.enabled", false);

//--------------------------------------------------------------
// Limit (or disable) HTTP authentication credentials dialogs triggered by sub-resources
// 0 = don't allow sub-resources to open HTTP authentication credentials dialogs
// 1 = don't allow cross-origin sub-resources to open HTTP authentication credentials dialogs
// 2 = allow sub-resources to open HTTP authentication credentials dialogs
//--------------------------------------------------------------
user_pref("network.auth.subresource-http-auth-allow", 1);

//--------------------------------------------------------------
// Enforce no automatic authentication on Microsoft sites
//--------------------------------------------------------------
user_pref("network.http.windows-sso.enabled", false);

//--------------------------------------------------------------
// 1602: control the amount of cross-origin information to send
// 0=send full URI, 1=scheme+host+port+path, 2=scheme+host+port
//--------------------------------------------------------------
user_pref("network.http.referer.XOriginTrimmingPolicy", 2);

//--------------------------------------------------------------
// Prevent scripts from moving and resizing open windows
//--------------------------------------------------------------
user_pref("dom.disable_window_move_resize", true);

//--------------------------------------------------------------
// Enforce PDFJS, disable PDFJS scripting
//--------------------------------------------------------------
user_pref("pdfjs.disabled", false);
user_pref("pdfjs.enableScripting", false);

//--------------------------------------------------------------
// Disable middle click on new tab button opening URLs or searches using clipboard
//--------------------------------------------------------------
user_pref("browser.tabs.searchclipboardfor.middleclick", false);

//--------------------------------------------------------------
// Enable user interaction always asking where to download
//--------------------------------------------------------------
user_pref("browser.download.useDownloadDir", false);

//--------------------------------------------------------------
// Disable downloads panel opening on every download
//--------------------------------------------------------------
user_pref("browser.download.alwaysOpenPanel", false);

//--------------------------------------------------------------
// Disable adding downloads to the system's "recent documents" list
//--------------------------------------------------------------
user_pref("browser.download.manager.addToRecentDocs", false);

//--------------------------------------------------------------
// Enable user interaction always asking how to handle new mimetypes
//--------------------------------------------------------------
user_pref("browser.download.always_ask_before_handling_new_types", true);

//--------------------------------------------------------------
// Enable ETP Strict Mode
// ETP Strict Mode enables Total Cookie Protection (TCP)
//--------------------------------------------------------------
user_pref("browser.contentblocking.category", "strict");

//--------------------------------------------------------------
// Disable ETP web compat features
//--------------------------------------------------------------
user_pref("privacy.antitracking.enableWebcompat", false);

//--------------------------------------------------------------
// Enable Firefox clearing items on shutdown
//--------------------------------------------------------------
user_pref("privacy.sanitize.sanitizeOnShutdown", true);

//--------------------------------------------------------------
// Set/enforce what items to clear on shutdown
//--------------------------------------------------------------
user_pref("privacy.clearOnShutdown.cache", true);
user_pref("privacy.clearOnShutdown.formdata", true);
user_pref("privacy.clearOnShutdown.siteSettings", true);
user_pref("privacy.clearOnShutdown.cookies", true);
user_pref("privacy.clearOnShutdown.offlineApps", true);
user_pref("privacy.clearOnShutdown.history", false);
user_pref("privacy.clearOnShutdown.downloads", false);
user_pref("privacy.clearOnShutdown.sessions", false);
user_pref("privacy.clearOnShutdown.openWindows", false);

//--------------------------------------------------------------
// Enable RFP
//--------------------------------------------------------------
user_pref("privacy.resistFingerprinting", true);

//--------------------------------------------------------------
// Enforce links targeting new windows to open in a new tab instead
// 1=most recent window or tab, 2=new window, 3=new tab
//--------------------------------------------------------------
user_pref("browser.link.open_newwindow", 3);

//--------------------------------------------------------------
// Set all open window methods to abide by "browser.link.open_newwindow"
//--------------------------------------------------------------
user_pref("browser.link.open_newwindow.restriction", 0);

//--------------------------------------------------------------
// Disable WebGL (Web Graphics Library)
//--------------------------------------------------------------
user_pref("webgl.disabled", true);

//--------------------------------------------------------------
// Disable Form Autofill
//--------------------------------------------------------------
user_pref("extensions.formautofill.addresses.enabled", false);
user_pref("extensions.formautofill.creditCards.enabled", false);

//--------------------------------------------------------------
// Enable the DNT (Do Not Track) HTTP header
//--------------------------------------------------------------
user_pref("privacy.donottrackheader.enabled", true);

//--------------------------------------------------------------
// Disable WebRTC (Web Real-Time Communication)
//--------------------------------------------------------------
user_pref("media.peerconnection.enabled", false);

//--------------------------------------------------------------
// Disable welcome notices
//--------------------------------------------------------------
user_pref("browser.startup.homepage_override.mstone", "ignore");

//--------------------------------------------------------------
// Disable recommending extensions/features as you browse
//--------------------------------------------------------------
user_pref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.addons", false);
user_pref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.features", false);

//--------------------------------------------------------------
// Disable What's New toolbar icon
//--------------------------------------------------------------
user_pref("browser.messaging-system.whatsNewPanel.enabled", false);

//--------------------------------------------------------------
// Force use of custom font
//--------------------------------------------------------------
user_pref("browser.display.use_document_fonts", 0);
user_pref("browser.display.use_document_fonts.icon_font_allowlist", "");

//--------------------------------------------------------------
// Disable rendering of web fonts
//--------------------------------------------------------------
user_pref("gfx.downloadable_fonts.disable_cache", true);
user_pref("gfx.downloadable_fonts.enabled", false);

//--------------------------------------------------------------
// Set custom cursive font
//--------------------------------------------------------------
user_pref("font.name.cursive.x-math", "Iosevka");
user_pref("font.name.cursive.x-unicode", "Iosevka");
user_pref("font.name.cursive.x-western", "Iosevka");

//--------------------------------------------------------------
// Set custom monospace font
//--------------------------------------------------------------
user_pref("font.name.monospace.x-math", "Iosevka");
user_pref("font.name.monospace.x-unicode", "Iosevka");
user_pref("font.name.monospace.x-western", "Iosevka");
user_pref("font.name-list.monospace.x-math", "Iosevka");
user_pref("font.name-list.monospace.x-unicode", "Iosevka");
user_pref("font.name-list.monospace.x-western", "Iosevka");

//--------------------------------------------------------------
// Set custom sans-serif font
//--------------------------------------------------------------
user_pref("font.name.sans-serif.x-math", "Iosevka");
user_pref("font.name.sans-serif.x-unicode", "Iosevka");
user_pref("font.name.sans-serif.x-western", "Iosevka");
user_pref("font.name-list.sans-serif.x-math", "Iosevka");
user_pref("font.name-list.sans-serif.x-unicode", "Iosevka");
user_pref("font.name-list.sans-serif.x-western", "Iosevka");

//--------------------------------------------------------------
// Set custom serif font
//--------------------------------------------------------------
user_pref("font.name.serif.x-math", "Iosevka");
user_pref("font.name.serif.x-unicode", "Iosevka");
user_pref("font.name.serif.x-western", "Iosevka");
user_pref("font.name-list.serif.x-math", "Iosevka");
user_pref("font.name-list.serif.x-unicode", "Iosevka");
user_pref("font.name-list.serif.x-western", "Iosevka");
EOF
	# Add exist status for Android
	[[ -d /system/app/ && -f /system/build.prop ]] && {
		chmod 644 "$user_js" 2>/dev/null
		return 0
	}
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" "$user_js" 2>/dev/null
}

#--------------------------------------------------------------
# Create custom kitty.conf file
#--------------------------------------------------------------
print_kitty() {
	mkdir -p "/home/"${SUDO_USER:=$USER}"/.config/kitty" 2>/dev/null
	cat 2>/dev/null << "EOF" > /home/"${SUDO_USER:=$USER}"/.config/kitty/kitty.conf
#--------------------------------------------------------------
# Appearance settings
#--------------------------------------------------------------
# Font configuration
#--------------------------------------------------------------
font_family      Iosevka
bold_font        Iosevka Bold
bold_italic_font Iosevka Bold Italic
italic_font      Iosevka Italic

#--------------------------------------------------------------
# Set default font size
#--------------------------------------------------------------
font_size 12.0

#--------------------------------------------------------------
# Enable font ligatures
#--------------------------------------------------------------
disable_ligatures never

#--------------------------------------------------------------
# Set cursor shape
#--------------------------------------------------------------
cursor_shape beam

#--------------------------------------------------------------
# Set cursor blink speed
#--------------------------------------------------------------
cursor_blink_interval 0.5

#--------------------------------------------------------------
# Never timeout cursor blinking
#--------------------------------------------------------------
cursor_stop_blinking_after 0

#--------------------------------------------------------------
# Set terminal scrollback buffer size
#--------------------------------------------------------------
scrollback_lines 25000

#--------------------------------------------------------------
# Set terminal size
#--------------------------------------------------------------
remember_window_size  no
initial_window_width  1024
initial_window_height 960

#--------------------------------------------------------------
# Disable confirm to close dialog
#--------------------------------------------------------------
confirm_os_window_close 0

#--------------------------------------------------------------
# Tether Kitty colorscheme
#--------------------------------------------------------------
# Set cursor color
#--------------------------------------------------------------
cursor #D9BB96

#--------------------------------------------------------------
# Set foreground, background color
#--------------------------------------------------------------
foreground            #D1B38F
background            #060A0C
selection_foreground  #060A0C
selection_background  #D1B38F
url_color             #72C2D6

#--------------------------------------------------------------
# High contrast blue/navy blue
#--------------------------------------------------------------
color0  #060A0C

#--------------------------------------------------------------
# Low contrast blue/navy blue
#--------------------------------------------------------------
color7  #121D23

#--------------------------------------------------------------
# Desaturated dark brown - Desaturated light brown
#--------------------------------------------------------------
color8  #D1B38F
color15 #D9BB96

#--------------------------------------------------------------
# Desaturated Red
#--------------------------------------------------------------
color1  #FE5E41
color9  #FE5E41

#--------------------------------------------------------------
# Desaturated Green
#--------------------------------------------------------------
color2  #B1CC72
color10 #B1CC72

#--------------------------------------------------------------
# Desaturated Yellow
#--------------------------------------------------------------
color3  #FFAC54
color11 #FFAC54

#--------------------------------------------------------------
# Desaturated Blue
#--------------------------------------------------------------
color4  #72C2D6
color12 #72C2D6

#--------------------------------------------------------------
# Desaturated Purple/Magenta
#--------------------------------------------------------------
color5  #ED7782
color13 #ED7782

#--------------------------------------------------------------
# Desaturated Cyan
#--------------------------------------------------------------
color6  #A2DAC6
color14 #A2DAC6

#--------------------------------------------------------------
# Always show window title bar
#--------------------------------------------------------------
hide_window_decorations no

#--------------------------------------------------------------
# Sync to monitor to prevent screen tearing
#--------------------------------------------------------------
sync_to_monitor yes

#--------------------------------------------------------------
# Disable audio notification / error bell
#--------------------------------------------------------------
enable_audio_bell no
EOF
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.config/kitty/kitty.conf 2>/dev/null
}

#--------------------------------------------------------------
# Create custom .Xresources file
#--------------------------------------------------------------
print_xresources() {
	cat 2>/dev/null << "EOF" > /home/"${SUDO_USER:=$USER}"/.Xresources
!--------------------------------------------------------------
! tether Urxvt color scheme
!--------------------------------------------------------------
URxvt.background: #060A0C
URxvt.foreground: #D1B38F
URxvt.cursorColor: #D9BB96

!--------------------------------------------------------------
! High contrast blue/navy blue
!--------------------------------------------------------------
URxvt.color0: #060A0C

!--------------------------------------------------------------
! Low contrast blue/navy blue
!--------------------------------------------------------------
URxvt.color7: #121D23

!--------------------------------------------------------------
! Desaturated dark brown - Desaturated light brown
!--------------------------------------------------------------
URxvt.color8: #D1B38F
URxvt.color15: #D9BB96

!--------------------------------------------------------------
! Desaturated Red
!--------------------------------------------------------------
URxvt.color1: #FE5E41
URxvt.color9: #FE5E41

!--------------------------------------------------------------
! Desaturated Green
!--------------------------------------------------------------
URxvt.color2: #B1CC72
URxvt.color10: #B1CC72

!--------------------------------------------------------------
! Desaturated Yellow
!--------------------------------------------------------------
URxvt.color3: #FFAC54
URxvt.color11: #FFAC54

!--------------------------------------------------------------
! Desaturated Blue
!--------------------------------------------------------------
URxvt.color4: #72C2D6
URxvt.color12: #72C2D6

!--------------------------------------------------------------
! Desaturated Purple/Magenta
!--------------------------------------------------------------
URxvt.color5: #ED7782
URxvt.color13: #ED7782

!--------------------------------------------------------------
! Desaturated Cyan
!--------------------------------------------------------------
URxvt.color6: #A2DAC6
URxvt.color14: #A2DAC6

!--------------------------------------------------------------
! URxvt Appearance
!--------------------------------------------------------------
URxvt.cursorBlink: true
URxvt.geometry: 132x44
URxvt.scrollBar: false
URxvt.scrollBar_right: false
URxvt.font: xft:Iosevka:size=12, xft:Sarasa\ Mono\ CL:size=12
EOF
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.Xresources 2>/dev/null
}

#--------------------------------------------------------------
# Create custom .vimrc file
#--------------------------------------------------------------
print_vimrc() {
	cat 2>/dev/null << "EOF" > /home/"${SUDO_USER:=$USER}"/.vimrc
"--------------------------------------------------------------
" Disables compatibility with vi
"--------------------------------------------------------------
set nocompatible

"--------------------------------------------------------------
" Custom key mapping
"--------------------------------------------------------------
" Enables smooth single line scrolling
"--------------------------------------------------------------
map <ScrollWheelUp> <C-Y>
imap <ScrollWheelUp> <C-X><C-Y>
map <ScrollWheelDown> <C-E>
imap <ScrollWheelDown> <C-X><C-E>

"--------------------------------------------------------------
" Open netrw: horizontal, vertical, new-tab
"--------------------------------------------------------------
map yh :Hexplore <CR>
map yv :Vexplore <CR>
map yt :Texplore <CR>

"--------------------------------------------------------------
" Perform visual yank without cursor jump
"--------------------------------------------------------------
vnoremap <expr>y "my\"" . v:register . "y`y"

"--------------------------------------------------------------
" Close file and exit into previous netrw window
"--------------------------------------------------------------
map yx :Rex <CR>

"--------------------------------------------------------------
" Open new tab
"--------------------------------------------------------------
map tt :tabnew <CR>

"--------------------------------------------------------------
" Move buffer to new window
"--------------------------------------------------------------
map <silent> to <C-W>T

"--------------------------------------------------------------
" Open new empty horizontal buffer
"--------------------------------------------------------------
map th :new <CR>

"--------------------------------------------------------------
" Open new empty vertical buffer
"--------------------------------------------------------------
map tv :vsp new <CR>

"--------------------------------------------------------------
" Close open buffer or window
"--------------------------------------------------------------
map qq :q <CR>

"--------------------------------------------------------------
" Exit without saving
"--------------------------------------------------------------
map qx :q! <CR>

"--------------------------------------------------------------
" Save file
"--------------------------------------------------------------
map ss :w <CR>

"--------------------------------------------------------------
" Force file save
"--------------------------------------------------------------
map sx :w! <CR>

"--------------------------------------------------------------
" Reload open file
"--------------------------------------------------------------
map ee :e <CR>

"--------------------------------------------------------------
" Reload open file without saving / Force file reload
"--------------------------------------------------------------
map ex :e! <CR>

"--------------------------------------------------------------
" Change current directory to working file directory
"--------------------------------------------------------------
map cd :cd <CR>

"--------------------------------------------------------------
" Resize horizontal buffers
"--------------------------------------------------------------
map ( :res +3 <CR>
map ) :res -3 <CR>

"--------------------------------------------------------------
" Resize vertical buffers
"--------------------------------------------------------------
map < :vertical resize-3 <CR>
map > :vertical resize+3 <CR>

"--------------------------------------------------------------
" Reload vimrc file
"--------------------------------------------------------------
map <C-N> :source $VIMRC <CR>

"--------------------------------------------------------------
" Better movement in documents>
"--------------------------------------------------------------
map <silent> j gj
map <silent> k gk

"--------------------------------------------------------------
" Switch to previous open tab
"--------------------------------------------------------------
map <silent> gl gT

"--------------------------------------------------------------
" Switch between open buffers
"--------------------------------------------------------------
map <silent> ff <C-W><C-W>

"--------------------------------------------------------------
" Swap open panes postion similar to <C-B>{ in tmux
"--------------------------------------------------------------
map <silent> fg <C-W>r

"--------------------------------------------------------------
" Netrw settings
"--------------------------------------------------------------
" Enable folder copy
"--------------------------------------------------------------
let g:netrw_localcopydircmd='cp -rf'

"--------------------------------------------------------------
" Enable move
"--------------------------------------------------------------
let g:netrw_localmovecmd='mv -f'

"--------------------------------------------------------------
" Turn off netrw banner
"--------------------------------------------------------------
let g:netrw_banner=0

"--------------------------------------------------------------
" Use current dir when copying files
"--------------------------------------------------------------
let g:netrw_keepdir=0

"--------------------------------------------------------------
" Shell settings
"--------------------------------------------------------------
" Point to bash aliases file for when vim shell is used
" i.e bash is not running interactively
"--------------------------------------------------------------
let $BASH_ENV="~/.bashrc"

"--------------------------------------------------------------
" Point to vimrc file
"--------------------------------------------------------------
let $VIMRC="~/.vimrc"

"--------------------------------------------------------------
" General settings
"--------------------------------------------------------------
" Enables unicode support
"--------------------------------------------------------------
set encoding=utf-8

"--------------------------------------------------------------
" Enables clipboard support
"--------------------------------------------------------------
set clipboard=unnamedplus

"--------------------------------------------------------------
" Enables mouse, useful for touch screens
"--------------------------------------------------------------
set mouse=a

"--------------------------------------------------------------
" Enable smoothscroll useful for when wrap is enabled
"--------------------------------------------------------------
set smoothscroll

"--------------------------------------------------------------
" Set cursorline offset from top or bottom of window when scrolling
"--------------------------------------------------------------
set scrolloff=2

"--------------------------------------------------------------
" Set smooth horizontal scrolling
"--------------------------------------------------------------
set sidescroll=2

"--------------------------------------------------------------
" Set horizontal scrolling cursor offset from right or left of window
"--------------------------------------------------------------
set sidescrolloff=2

"--------------------------------------------------------------
" Changes current directory automatically so :cd is not needed
"--------------------------------------------------------------
set autochdir

"--------------------------------------------------------------
" Enable file-type options
"--------------------------------------------------------------
filetype on

"--------------------------------------------------------------
" Enable indentation based on file-type
"--------------------------------------------------------------
filetype indent on

"--------------------------------------------------------------
" Enable file-type plugin
"--------------------------------------------------------------
filetype plugin on

"--------------------------------------------------------------
" Enable indentation plugin for files
"--------------------------------------------------------------
filetype plugin indent on

"--------------------------------------------------------------
" Enable coloring based on syntax
"--------------------------------------------------------------
syntax enable

"--------------------------------------------------------------
" Change syntax coloring parse method
"--------------------------------------------------------------
syntax sync fromstart

"--------------------------------------------------------------
" Enable smartindent
"--------------------------------------------------------------
set smartindent

"--------------------------------------------------------------
" Stop certain movements from always going to the first character of a line.
"--------------------------------------------------------------
set nostartofline

"--------------------------------------------------------------
" Enable automatic indentation
"--------------------------------------------------------------
set autoindent

"--------------------------------------------------------------
" Enable backspacing over indents
"--------------------------------------------------------------
set backspace=indent,eol,start

"--------------------------------------------------------------
" Scan current file for keyword completion
"--------------------------------------------------------------
set complete-=i

"--------------------------------------------------------------
" Indent to the correct location when tab is pressed
"--------------------------------------------------------------
set smarttab

"--------------------------------------------------------------
" Disable spellchecking
"--------------------------------------------------------------
set nospell

"--------------------------------------------------------------
" Set the number of tab space
"--------------------------------------------------------------
set tabstop=4

"--------------------------------------------------------------
" Set number of spaces used for indenting
"--------------------------------------------------------------
set shiftwidth=4

"--------------------------------------------------------------
" Use spaces instead of tab
"--------------------------------------------------------------
set expandtab

"--------------------------------------------------------------
" Set terminal colors to 256
"--------------------------------------------------------------
set t_Co=256

"--------------------------------------------------------------
" Enable line numbers
"--------------------------------------------------------------
set number

"--------------------------------------------------------------
" Disable vim mode, insert, visual etc.
"--------------------------------------------------------------
set noshowmode

"--------------------------------------------------------------
" Disable ruler
"--------------------------------------------------------------
set noruler

"--------------------------------------------------------------
" Disable line wrapping
"--------------------------------------------------------------
set nowrap

"--------------------------------------------------------------
" Enable cursor line highlighting
"--------------------------------------------------------------
set cursorline

"--------------------------------------------------------------
" Enable paste mode, prevent auto indent when pasting code from clipboard
"--------------------------------------------------------------
set paste

"--------------------------------------------------------------
" Set fold method to manual
"--------------------------------------------------------------
set foldmethod=manual

"--------------------------------------------------------------
" Always show tab-line
"--------------------------------------------------------------
set showtabline=2

"--------------------------------------------------------------
" Customize tab indent, EOL
"--------------------------------------------------------------
set listchars=tab:│\ ,trail:⋅,extends:»,precedes:«
set list

"--------------------------------------------------------------
" Enables file auto-reload
"--------------------------------------------------------------
set autoread

"--------------------------------------------------------------
" Color scheme
"--------------------------------------------------------------
color tether

"--------------------------------------------------------------
" Return to last edit position when opening files
"--------------------------------------------------------------
autocmd BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\	 exe "normal! g`\"" |
	\ endif

"--------------------------------------------------------------
" Status-line customization
"--------------------------------------------------------------
" Show the current mode in the status line
"--------------------------------------------------------------
let g:currentmode={
    \ 'n'  : 'NORMAL',
    \ 'no' : 'OPERATOR PENDING',
    \ 'nt' : 'TERMINAL NORMAL',
    \ 'v'  : 'VISUAL',
    \ 'V'  : 'VISUAL LINE',
    \ "\<C-V>" : 'VISUAL BLOCK',
    \ 's'  : 'SELECT',
    \ 'S'  : 'SELECT LINE',
    \ "\<C-S>" : 'SELECT BLOCK',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'Rv' : 'VISUAL REPLACE',
    \ 'c'  : 'COMMAND',
    \ 'cv' : 'VIM EX',
    \ 'ce' : 'EX NORMAL',
    \ 'r'  : 'PROMPT',
    \ 'rm' : 'MORE',
    \ 'r?' : 'CONFIRM',
    \ '!'  : 'SHELL',
    \ 't'  : 'TERMINAL'
    \}

"--------------------------------------------------------------
" Always show the statusline
"--------------------------------------------------------------
set laststatus=2

"--------------------------------------------------------------
" Reset the statusline
"--------------------------------------------------------------
set statusline=

"--------------------------------------------------------------
" Change the color of the status line
"--------------------------------------------------------------
set statusline=%#TablineSel#\ 

"--------------------------------------------------------------
" Show current mode, insert, normal etc
"--------------------------------------------------------------
set statusline+=%{g:currentmode[mode()]}\ 

"--------------------------------------------------------------
" Reset the statusline color
"--------------------------------------------------------------
set statusline+=%*\ 

"--------------------------------------------------------------
" Show the file name and modifier status
"--------------------------------------------------------------
set statusline+=%<%f\ %m%r

"--------------------------------------------------------------
" Separate left and right sections
"--------------------------------------------------------------
set statusline+=%=\ 

"--------------------------------------------------------------
" Show the file type in lowercase letters
"--------------------------------------------------------------
set statusline+=%{''!=#&filetype?&filetype:''}\ 

"--------------------------------------------------------------
" Show the file line numbers in custom color
"--------------------------------------------------------------
set statusline+=%#TabLineSel#\ %l\:%L\ 

"--------------------------------------------------------------
" Enable timeout
"--------------------------------------------------------------
set timeout
set ttimeout

"--------------------------------------------------------------
" Set keymap timeout and Escape timeout
"--------------------------------------------------------------
set timeoutlen=700
set ttimeoutlen=50

"--------------------------------------------------------------
" Highlight all search hits in buffer
"--------------------------------------------------------------
set hlsearch

"--------------------------------------------------------------
" Show search hits as prompt is being typed
"--------------------------------------------------------------
set incsearch

"--------------------------------------------------------------
" Ignore case of search prompt unless using uppercase
"--------------------------------------------------------------
set ignorecase

"--------------------------------------------------------------
" Use ignores ignore-case option and allows case insensitive search
"--------------------------------------------------------------
set smartcase

"--------------------------------------------------------------
" Number format for arithmetic
"--------------------------------------------------------------
set nrformats-=octal

"--------------------------------------------------------------
" Set wild-menu to show full for file suggestions
"--------------------------------------------------------------
set wildmode=full,full
set wildmenu

"--------------------------------------------------------------
" Set command history
"--------------------------------------------------------------
set history=2000

"--------------------------------------------------------------
" Set maximum open tabs
"--------------------------------------------------------------
set tabpagemax=50

"--------------------------------------------------------------
" Set maximum number of revertible changes
"--------------------------------------------------------------
set undolevels=2000

"--------------------------------------------------------------
" Set maximum number of lines for undo
"--------------------------------------------------------------
set undoreload=2000

"--------------------------------------------------------------
" Set an undofile so change history persist across restarts
"--------------------------------------------------------------
set undodir=~/.vim
set undofile
EOF
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.vimrc 2>/dev/null
}

#--------------------------------------------------------------
# Create custom .tmux.conf file
#--------------------------------------------------------------
print_tmux_conf() {
	cat 2>/dev/null << "EOF" > /home/"${SUDO_USER:=$USER}"/.tmux.conf
#--------------------------------------------------------------
# General settings
#--------------------------------------------------------------
# Start with mouse mode enabled
#--------------------------------------------------------------
set -g mouse on

#--------------------------------------------------------------
# Start windows numbering at 1
#--------------------------------------------------------------
set -g base-index 1

#--------------------------------------------------------------
# Make pane numbering consistent with windows
#--------------------------------------------------------------
setw -g pane-base-index 1

#--------------------------------------------------------------
# Rename window to reflect current program
#--------------------------------------------------------------
setw -g automatic-rename on

#--------------------------------------------------------------
# Renumber windows when a window is closed
#--------------------------------------------------------------
set -g renumber-windows on

#--------------------------------------------------------------
# Set terminal title
#--------------------------------------------------------------
set -g set-titles on

#--------------------------------------------------------------
# Slightly longer pane indicators display time
#--------------------------------------------------------------
set -gu display-panes-time 800

#--------------------------------------------------------------
# Slightly longer status messages display time
#--------------------------------------------------------------
set -gu display-time 1000

#--------------------------------------------------------------
# Redraw status line every 10 seconds
#--------------------------------------------------------------
set -g status-interval 10

#--------------------------------------------------------------
# Increase history size
#--------------------------------------------------------------
set -g history-limit 25000

#--------------------------------------------------------------
# Changes the location of the statusline
#--------------------------------------------------------------
set -g status-position bottom

#--------------------------------------------------------------
# Adjust copymode scrolling speed
#--------------------------------------------------------------
bind-key -T copy-mode-vi WheelUpPane send -N1 -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send -N1 -X scroll-down

#--------------------------------------------------------------
# Set the default shell
#--------------------------------------------------------------
set -g default-shell /bin/bash

#--------------------------------------------------------------
# Use vim keybindings
#--------------------------------------------------------------
set -g status-keys vi
set -g mode-keys vi

#--------------------------------------------------------------
# Run command on start / start up shell
#--------------------------------------------------------------
set -g default-command "/bin/bash --rcfile ~/.bashrc"

#--------------------------------------------------------------
# Colours
#--------------------------------------------------------------
# Set colour of statusline foreground
#--------------------------------------------------------------
set -g status-fg 'colour234'

#--------------------------------------------------------------
# Set colour of statusline background
#--------------------------------------------------------------
set -g status-bg 'colour7'

#--------------------------------------------------------------
# Colour of the clock when <prefix> t is pressed
#--------------------------------------------------------------
setw -g clock-mode-colour 'colour15'

#--------------------------------------------------------------
# Content of the right side of the statusline
#--------------------------------------------------------------
set -g status-right '#[fg=colour234,bg=colour15,bold] #S '

#--------------------------------------------------------------
# Content of the left side of the statusline
#--------------------------------------------------------------
set -g status-left ''

#--------------------------------------------------------------
# Content of statusline
#--------------------------------------------------------------
set -g status-justify left
set -g status-style 'bg=colour15 fg=colour234 bold'

#--------------------------------------------------------------
# Colour of active window in statusline
#--------------------------------------------------------------
setw -g window-status-current-style 'fg=colour234 bg=colour15 bold'
setw -g window-status-current-format ' #I#[fg=colour234]:#[fg=colour234]#W#[fg=colour234]#F '

#--------------------------------------------------------------
# Colour of inactive window in statusline
#--------------------------------------------------------------
setw -g window-status-style 'fg=colour15 bg=colour7'
setw -g window-status-format ' #I#[fg=colour15]:#[fg=colour15]#W#[fg=colour15]#F '

#--------------------------------------------------------------
# Colour of command line
#--------------------------------------------------------------
set -g message-style 'fg=colour15 bg=colour7 bold'

#--------------------------------------------------------------
# Colour of the cursorline
#--------------------------------------------------------------
set -g mode-style 'bg=colour7 fg=color15'

#--------------------------------------------------------------
# Key bindings
#--------------------------------------------------------------
# Unbind % from vertical split
#--------------------------------------------------------------
unbind-key %

#--------------------------------------------------------------
# Unbind £ from possible binds
#--------------------------------------------------------------
unbind-key £

#--------------------------------------------------------------
# Unbind c from creating new window
#--------------------------------------------------------------
unbind-key c

#--------------------------------------------------------------
# Bind <prefix> t to create new window
#--------------------------------------------------------------
bind-key t new-window

#--------------------------------------------------------------
# Bind <prefix> o to move pane to seperate window
#--------------------------------------------------------------
bind-key o break-pane

#--------------------------------------------------------------
# Bind <prefix> h to create horizontal pane
#--------------------------------------------------------------
bind-key h split-window

#--------------------------------------------------------------
# Bind <prefix> v to create vertical pane
#--------------------------------------------------------------
bind-key v split-window -h

#--------------------------------------------------------------
# Bind <prefix> < to resize vertically split pane left
#--------------------------------------------------------------
bind-key < resize-pane -L 3

#--------------------------------------------------------------
# Bind <prefix> > to resize vertically split pane right
#--------------------------------------------------------------
bind-key > resize-pane -R 3

#--------------------------------------------------------------
# Bind <prefix> ( to resize horizontally split pane up
#--------------------------------------------------------------
bind-key ( resize-pane -U 3

#--------------------------------------------------------------
# Bind <prefix> < to resize vertically split pane left
#--------------------------------------------------------------
bind-key ) resize-pane -D 3

#--------------------------------------------------------------
# Bind <prefix> j to select top pane
#--------------------------------------------------------------
bind-key j select-pane -D

#--------------------------------------------------------------
# Bind <prefix> k to select bottom pane
#--------------------------------------------------------------
bind-key k select-pane -U

#--------------------------------------------------------------
# Bind <prefix> Ctrl+r to reload tmux.conf file
#--------------------------------------------------------------
bind-key C-r source-file ~/.tmux.conf
EOF
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.tmux.conf 2>/dev/null
}

#--------------------------------------------------------------
# Create custom vim colorscheme
#--------------------------------------------------------------
print_vim_color() {
	mkdir -p /usr/share/vim/vim90/colors 2>/dev/null
	cat 2>/dev/null << "EOF" > /usr/share/vim/vim90/colors/tether.vim
"--------------------------------------------------------------
" Name:         tether
" Description:  color scheme by tether
"--------------------------------------------------------------

"--------------------------------------------------------------
" Sets background color to dark
"--------------------------------------------------------------
set background=dark

"--------------------------------------------------------------
" Clear previous settings
"--------------------------------------------------------------
hi clear

"--------------------------------------------------------------
" Set the name of this colorscheme to tether
"--------------------------------------------------------------
let g:colors_name = 'tether'

"--------------------------------------------------------------
" Colors of marked files
"--------------------------------------------------------------
hi! link netrwMarkFile Pmenu

"--------------------------------------------------------------
" Colors of the inbuilt vim terminal
"--------------------------------------------------------------
hi! link Terminal Normal

"--------------------------------------------------------------
" Colors of search results under cursorline
"--------------------------------------------------------------
hi! link CurSearch Search

"--------------------------------------------------------------
" Colors of folded text under cursorline
"--------------------------------------------------------------
hi! link CursorLineFold CursorLine

"--------------------------------------------------------------
" Colors of signs under cursorline
"--------------------------------------------------------------
hi! link CursorLineSign CursorLine

"--------------------------------------------------------------
" Colors of popup notification
"--------------------------------------------------------------
hi! link PopupNotification Todo

"--------------------------------------------------------------
" Colors of column where signs are displayed
"--------------------------------------------------------------
hi! link SignColumn Folded

"--------------------------------------------------------------
" Colors of fold column
"--------------------------------------------------------------
hi! link FoldColumn Folded

"--------------------------------------------------------------
" Colors of the default vim window
"--------------------------------------------------------------
hi Normal ctermfg=15 ctermbg=0 cterm=NONE

"--------------------------------------------------------------
" Colors for unrecognized words with spellcheck
"--------------------------------------------------------------
hi SpellBad ctermfg=5 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors for uncapitalized words with spellcheck
"--------------------------------------------------------------
hi SpellCap ctermfg=2 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors for rare words with spellcheck
"--------------------------------------------------------------
hi SpellRare ctermfg=4 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors for wrongly spelled words
"--------------------------------------------------------------
hi SpellLocal ctermfg=1 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the notification for the command window
"--------------------------------------------------------------
hi Todo ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of bracket parent
"--------------------------------------------------------------
hi MatchParen ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the wild menu used for tab completions
"--------------------------------------------------------------
hi WildMenu ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the option flags used with commands
"--------------------------------------------------------------
hi Special ctermfg=5 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of warning messages under statusline e.g **warning** in netrw
"--------------------------------------------------------------
hi WarningMsg ctermfg=1 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of search results
"--------------------------------------------------------------
hi Search ctermfg=3 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of search prompts as its being typed
"--------------------------------------------------------------
hi IncSearch ctermfg=3 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of error highlight
"--------------------------------------------------------------
hi Error ctermfg=1 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the tab completion menu
"--------------------------------------------------------------
hi Pmenu ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the selector for the tab completion menu
"--------------------------------------------------------------
hi PmenuSel ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Color of the scroll bar background in tab completion menu
"--------------------------------------------------------------
hi PmenuSbar ctermfg=14 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Color of the scroll bar bar in tab completion menu
"--------------------------------------------------------------
hi PmenuThumb ctermfg=NONE ctermbg=7 cterm=NONE

"--------------------------------------------------------------
" Colors of error messages e.g when no search pattern is found
"--------------------------------------------------------------
hi ErrorMsg ctermfg=1 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the buffer number in tabline
"--------------------------------------------------------------
hi Title ctermfg=15 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of the added lines in diffmode
"--------------------------------------------------------------
hi diffAdd ctermfg=2 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of the removed lines in diffmode
"--------------------------------------------------------------
hi diffDelete ctermfg=1 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of the changed lines in diffmode
"--------------------------------------------------------------
hi diffChange ctermfg=5 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of the changed text on changed lines in diffmode
"--------------------------------------------------------------
hi diffText ctermfg=1 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of divider in vertical mode
"--------------------------------------------------------------
hi VertSplit ctermfg=15 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of strings
"--------------------------------------------------------------
hi String ctermfg=2 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of constants
"--------------------------------------------------------------
hi Constant ctermfg=1 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of type definitions
"--------------------------------------------------------------
hi Type ctermfg=14 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of command statements
"--------------------------------------------------------------
hi Statement ctermfg=3 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of the current tab indicator
"--------------------------------------------------------------
hi TabLine ctermfg=15 ctermbg=7 cterm=bold

"--------------------------------------------------------------
" Colors of the tab line
"--------------------------------------------------------------
hi TabLineFill ctermfg=NONE ctermbg=7 cterm=NONE

"--------------------------------------------------------------
" Colors of active tab indicator/label
"--------------------------------------------------------------
hi TabLineSel ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors for visual highlighter
"--------------------------------------------------------------
hi visual ctermfg=NONE ctermbg=NONE cterm=bold,inverse

"--------------------------------------------------------------
" Colors for commented text
"--------------------------------------------------------------
hi comment ctermfg=242 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Color of the popup messages under the statusline
"--------------------------------------------------------------
hi MessageWindow ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors of the status line
"--------------------------------------------------------------
hi StatusLine ctermfg=15 ctermbg=7 cterm=bold

"--------------------------------------------------------------
" Colors of the inactive status line
"--------------------------------------------------------------
hi StatuslineNC ctermfg=15 ctermbg=7 cterm=NONE

"--------------------------------------------------------------
" Colors of the active vim terminal window
"--------------------------------------------------------------
hi StatusLineTerm ctermfg=15 ctermbg=7 cterm=bold

"--------------------------------------------------------------
" Colors of inactive vim terminal window
"--------------------------------------------------------------
hi StatuslineTermNC ctermfg=15 ctermbg=7 cterm=NONE

"--------------------------------------------------------------
" Colors for number column on cursor line
"--------------------------------------------------------------
hi CursorLineNr ctermfg=15 ctermbg=7 cterm=bold

"--------------------------------------------------------------
" Colors of the line numbers
"--------------------------------------------------------------
hi LineNr ctermfg=238 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors for the active mode, visual or insert
"--------------------------------------------------------------
hi ModeMsg ctermfg=15 ctermbg=0 cterm=bold,inverse

"--------------------------------------------------------------
" Colors for the 'press ENTER or type command to continue'
"--------------------------------------------------------------
hi Question ctermfg=2 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors of folders in netrw
"--------------------------------------------------------------
hi Directory ctermfg=4 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Color of operators for commands e.g >
"--------------------------------------------------------------
hi Operator ctermfg=3 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors of the ~ and background at the end of each buffer
"--------------------------------------------------------------
hi EndOfBuffer ctermfg=236 ctermbg=0 cterm=bold

"--------------------------------------------------------------
" Colors for cursor line
"--------------------------------------------------------------
hi CursorLine ctermfg=NONE ctermbg=7 cterm=NONE

"--------------------------------------------------------------
" Colors for vim markers, eol, preceed
"--------------------------------------------------------------
hi NonText ctermfg=236 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors for indentation markers
"--------------------------------------------------------------
hi SpecialKey ctermfg=236 ctermbg=NONE cterm=NONE

"--------------------------------------------------------------
" Colors for variable identifiers
"--------------------------------------------------------------
hi Identifier ctermfg=4 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors for preprocessor
"--------------------------------------------------------------
hi PreProc ctermfg=4 ctermbg=NONE cterm=bold

"--------------------------------------------------------------
" Colors for folded text
"--------------------------------------------------------------
hi Folded ctermfg=14 ctermbg=NONE cterm=bold
EOF
	chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /usr/share/vim/vim90/colors/tether.vim 2>/dev/null
}

#--------------------------------------------------------------
# Create custom /etc/profile for termux
#--------------------------------------------------------------
print_termux_profile() {
	mkdir -p "$termux_directory/usr/etc" 2>/dev/null
	cat 2>/dev/null << "EOF" > $termux_directory/usr/etc/profile
#--------------------------------------------------------------
# Source etc/.bashrc for interactive bash login shells:
#--------------------------------------------------------------
[[ -n "$BASH" && $- == *i* && -f /data/data/com.termux/files/usr/etc/.bashrc ]] && {
	source /data/data/com.termux/files/usr/etc/.bashrc
}
EOF
	chmod 755 "$termux_directory/usr/etc/profile" 2>/dev/null
}

#--------------------------------------------------------------
# Create custom Termux colorscheme
#--------------------------------------------------------------
print_termux_color() {
	mkdir -p "$termux_directory/home/.termux" 2>/dev/null
	cat 2>/dev/null << "EOF" > $termux_directory/home/.termux/colors.properties
#--------------------------------------------------------------
# tether color scheme
#--------------------------------------------------------------
background=#060A0C
foreground=#D1B38F
cursor=#D9BB96

#--------------------------------------------------------------
# High contrast blue/navy blue
#--------------------------------------------------------------
color0=#060A0C

#--------------------------------------------------------------
# Low contrast blue/navy blue
#--------------------------------------------------------------
color7=#121D23

#--------------------------------------------------------------
# Desaturated dark brown - Desaturated light brown
#--------------------------------------------------------------
color8=#D1B38F
color15=#D9BB96

#--------------------------------------------------------------
# Desaturated Red
#--------------------------------------------------------------
color1=#FE5E41
color9=#FE5E41

#--------------------------------------------------------------
# Desaturated Green
#--------------------------------------------------------------
color2=#B1CC72
color10=#B1CC72

#--------------------------------------------------------------
# Desaturated Yellow
#--------------------------------------------------------------
color3=#FFAC54
color11=#FFAC54

#--------------------------------------------------------------
# Desaturated Blue
#--------------------------------------------------------------
color4=#72C2D6
color12=#72C2D6

#--------------------------------------------------------------
# Desaturated Purple/Magenta
#--------------------------------------------------------------
color5=#ED7782
color13=#ED7782

#--------------------------------------------------------------
# Desaturated Cyan
#--------------------------------------------------------------
color6=#A2DAC6
color14=#A2DAC6
EOF
	chmod 755 "$termux_directory/home/.termux/colors.properties" 2>/dev/null
}

#--------------------------------------------------------------
# Create custom termux.properties for termux
#--------------------------------------------------------------
print_termux_config() {
	mkdir -p "$termux_directory/home/.termux" 2>/dev/null
	cat 2>/dev/null << "EOF" > $termux_directory/home/.termux/termux.properties
### After making changes and saving you need to run `termux-reload-settings`
### to update the terminal.  All information here can also be found on the
### wiki: https://wiki.termux.com/wiki/Terminal_Settings

#--------------------------------------------------------------
# General
#--------------------------------------------------------------

### Allow external applications to execute arbitrary commands within Termux.
### This potentially could be a security issue, so option is disabled by
### default. Uncomment to enable.
# allow-external-apps = true

### Default working directory that will be used when launching the app.
default-working-directory = /mnt/sdcard

### Uncomment to disable toasts shown on terminal session change.
disable-terminal-session-change-toast = true

### Uncomment to not show soft keyboard on application start.
# hide-soft-keyboard-on-startup = false

### Uncomment to let keyboard toggle button to enable or disable software
### keyboard instead of showing/hiding it.
# soft-keyboard-toggle-behaviour = enable/disable

### Adjust terminal scrollback buffer. Max is 50000. May have negative
### impact on performance.
terminal-transcript-rows = 10000

### Uncomment to use volume keys for adjusting volume and not for the
### extra keys functionality.
volume-keys = volume

#--------------------------------------------------------------
# Fullscreen mode
#--------------------------------------------------------------

### Uncomment to let Termux start in full screen mode.
# fullscreen = true

### Uncomment to attempt workaround layout issues when running in
### full screen mode.
# use-fullscreen-workaround = true

#--------------------------------------------------------------
# Cursor
#--------------------------------------------------------------

### Cursor blink rate. Values 0, 100 - 2000.
terminal-cursor-blink-rate = 500

### Cursor style: block, bar, underline.
terminal-cursor-style = bar

#--------------------------------------------------------------
# Extra keys
#--------------------------------------------------------------

### Settings for choosing which set of symbols to use for illustrating keys.
### Choose between default, arrows-only, arrows-all, all and none
# extra-keys-style = none

### Force capitalize all text in extra keys row button labels.
# extra-keys-text-all-caps = true

### Default extra-key configuration
extra-keys = [[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]

### Two rows with more keys
# extra-keys = [['ESC','/','~','HOME','UP','END'], \
#              ['TAB','CTRL','_','LEFT','DOWN','RIGHT']]

### Configuration with additional popup keys (swipe up from an extra key)
# extra-keys = [[ \
#   {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
#   {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
#   {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
#   {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
#   {key: LEFT, popup: HOME}, \
#   {key: DOWN, popup: PGDN}, \
#   {key: UP, popup: PGUP}, \
#   {key: RIGHT, popup: END}, \
#   {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
#   {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
# ]]

#--------------------------------------------------------------
# Colors/themes
#--------------------------------------------------------------

### Force black colors for drawer and dialogs
# use-black-ui = false

#--------------------------------------------------------------
# HW keyboard shortcuts
#--------------------------------------------------------------

### Disable hardware keyboard shortcuts.
# disable-hardware-keyboard-shortcuts = true

### Open a new terminal with ctrl + t (volume down + t)
# shortcut.create-session = ctrl + t

### Go one session down with (for example) ctrl + 2
# shortcut.next-session = ctrl + 2

### Go one session up with (for example) ctrl + 1
# shortcut.previous-session = ctrl + 1

### Rename a session with (for example) ctrl + n
# shortcut.rename-session = ctrl + n

#--------------------------------------------------------------
# Bell key
#--------------------------------------------------------------

### Vibrate device (default).
# bell-character = vibrate

### Beep with a sound.
# bell-character = beep

### Ignore bell character.
bell-character = ignore

#--------------------------------------------------------------
# Back key
#--------------------------------------------------------------

### Send the Escape key.
# back-key=escape

### Hide keyboard or leave app (default).
# back-key=back

#--------------------------------------------------------------
# Keyboard issue workarounds
#--------------------------------------------------------------

### Letters might not appear until enter is pressed on Samsung devices
# enforce-char-based-input = true

### ctrl+space (for marking text in emacs) does not work on some devices
# ctrl-space-workaround = true
EOF
	chmod 755 "$termux_directory/home/.termux/termux.properties" 2>/dev/null
}

#--------------------------------------------------------------
#################### END IMPORTANT NOTICE #####################
#--------------------------------------------------------------

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: bc, bash
#--------------------------------------------------------------
benchmark() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [OPTION] [NUMBER]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name --iteration 20\n"
		echo -e "Options: -h,  --help       Print out this message"
		echo -e "         -it, --iteration  Number of iterations to perform"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Single core performance benchmark using Mersenne primality test"
		exit 0
	}
	prime_test_benchmark() {
		found_mersenne_primes=0
		for ((prime_numbers=2; prime_numbers < user_iteration; prime_numbers++)); do
			# Use bash to find mersenne numbers
			# Use mersenne formula 2^n - 1
			[[ $user_iteration -le 62 ]] && {
				mersenne_numbers="$(( (2 ** $prime_numbers) - 1 ))"
			}
			# Use bc to find mersenne numbers
			# Use mersenne formula 2^n - 1
			[[ $user_iteration -ge 63 ]] && {
				mersenne_numbers=$( echo "2 ^ $prime_numbers - 1" | bc )
				mersenne_numbers=${mersenne_numbers//\\}
				mersenne_numbers=${mersenne_numbers//[[:space:]]}
			}
			# Test found mersenne numbers for primality
			for ((primality_checker=0, calculated_range=1; calculated_range < mersenne_numbers; calculated_range++)); do
				primality_test=$(( mersenne_numbers % calculated_range ))
				[[ $primality_test -eq 0 ]] && {
					primality_checker=$(( primality_checker + 1 ))
				}
				# Stop checking $mersenne_numbers since it fails primality test
				[[ $primality_checker -gt 1 ]] && break
			done
			# Count found mersenne primes
			[[ $primality_checker -eq 1 ]] && {
				found_mersenne_primes=$(( found_mersenne_primes + 1 ))
				mersenne_prime_largest="Largest Mersenne prime found M($prime_numbers) = $mersenne_numbers"
				echo -e "M($prime_numbers) = $mersenne_numbers"
			}
		done
		# Show number of mersenne primes found
		print_success "Total Mersenne primes found = ${found_mersenne_primes}\n"
		[[ $found_mersenne_primes -gt 0 ]] && {
			# Show the largest mersenne prime found
			print_success "${mersenne_prime_largest}\n"
		}
		# Show the time taken to process
		time_suffix="seconds"
		[[ $SECONDS -eq 1 ]] && time_suffix="${time_suffix%s}"
		print_success "Total time taken = ${SECONDS} ${time_suffix}"
	}
	# Show total time taken on program cancellation
	show_on_exit() {
		time_suffix="seconds"
		[[ $SECONDS -eq 1 ]] && time_suffix="${time_suffix%s}"
		echo -e "\n" && print_error "Aborted\n"
		print_success "Total Time taken = ${SECONDS} ${time_suffix}"
		exit 1
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-it | --iteration)
					user_iteration="$2"
					integer_checker="${user_iteration//[0-9]}"
					integer_checker="${integer_checker//[[:space:]]}"
					[[ -n $integer_checker || -z $user_iteration ]] && {
						print_error "Input iterations as positive integers"
						exit 1
					}
					[[ $user_iteration -ge 32 ]] && {
						print_warning "This may take a while"
						echo ""
					}
					# Switch to bc since bash overflows at > 2 ^ 62
					[[ $user_iteration -ge 63 ]] && {
						[[ ! $(type -p bc) ]] && print_missing_dependencies "bc"
						print_warning "Switching from bash to bc"
						print_aligned "Bash overflows at 2 ^ 63"
						echo ""
					}
					prime_test_benchmark "$@"
					exit 0
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
	}
	trap 'show_on_exit' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: cp, mkdir, losetup, 7zip
#--------------------------------------------------------------
chroot-backup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [OPTION] [FOLDER]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name --encrypt /sdcard/newfolder\n"
		echo -e "Options: -en, --encrypt    Create an encrypted backup"
		echo -e "         -h,  --help       Print out this message"
		echo -e "         -un, --unencrypt  Create an unencrypted backup"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Create chroot image backup in specifed folder"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in cp mkdir losetup 7z; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Declare file directory
		chroot_image="/data/voidimg/void.img"
		chroot_install_dir="/data/voidlinux"
		folder_name="$2"
		# Check if source and destination directory are the same
		[[ ${chroot_image%/*} == "$folder_name" ]] && {
			print_error "'$folder_name/void.img' and '$chroot_image' are the same file"
			exit 1
		}
		# Check if chroot file exists
		[[ ! -f $chroot_image ]] && {
			print_error "Chroot image not found"
			exit 1
		}
		# Check if a file already exists with $folder_name
		[[ -f $folder_name ]] && {
			print_error "Cannot create directory '$folder_name': File exists"
			exit 1
		}
		# Check if chroot is mounted
		[[ -f "$chroot_install_dir/bin/bash" || $(losetup -j "$chroot_image" 2>/dev/null) ]] && {
			print_error "Chroot image is currently mounted"
			print_aligned "Run 'void-umount' before proceeding"
			exit 1
		}
		# Only run as root user
		print_not_root_user
		# Handles $script_name [OPTION]
		# Handles $script_name [OPTION] [FOLDER...]
		[[ $# -lt 2 || $# -gt 2 ]] && {
			print_syntax_error
		}
		# Create destination directory
		mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create '${chroot_image##*\/}' backup in '$folder_name'"
		rm -r "$folder_name/void.7z" 2>/dev/null
		rm -r "$folder_name/void.img" 2>/dev/null
		exit 1
	}
	encrypted_backup() {
		print_warning "Creating encrypted chroot image backup\n"
		# Handles password creation
		input_password "$@"
		print_warning "Starting backup, this may take a while\n"
		7z a -snl -snh -p"$file_password" -t7z -mx1 -mmt"$cpu_core_count" -mhe=on "${folder_name}/void.7z" "$chroot_image" &>/dev/null ||
		failed_to_create "$@"
		unset file_password file_password2
		print_success "Created encrypted '${chroot_image##*\/}' backup in '$folder_name'"
		exit 0
	}
	unencrypted_backup() {
		print_warning "Creating chroot image backup\n"
		print_warning "This may take a while\n"
		cp -f "$chroot_image" "$folder_name" 2>/dev/null ||
		failed_to_create "$@"
		print_success "Created '${chroot_image##*/}' backup in '$folder_name'"
		exit 0
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-en | --encrypt)
					check_dependencies "$@"
					encrypted_backup "$@"
				;;
				-un | --unencrypt)
					check_dependencies "$@"
					unencrypted_backup "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options/*-} || -z ${primary_options//--*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options/*-}'"
					print_notification
				;;
				*)
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
	}
	trap 'remove_file_on_exit "${folder_name}/void.7z" "${folder_name}/void.img"' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: bash
#--------------------------------------------------------------
dotfiles() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --vim"
		echo -e "          $script_name --bash\n"
		echo -e "Options: -b,  --bashrc   Add custom .bashrc"
		echo -e "         -fi, --firefox  Add custom user.js"
		echo -e "         -h,  --help     Print out this message"
		echo -e "         -k,  --kitty    Add custom kitty.conf"
		echo -e "         -m,  --mkshrc   Add custom mkshrc for android"
		echo -e "         -te, --termux   Add custom colorscheme and prop files"
		echo -e "         -tm, --tmux     Add custom .tmux.conf"
		echo -e "         -u,  --urxvt    Add custom .Xresources"
		echo -e "         -v,  --vim      Add custom .vimrc and vim colorscheme"
		echo -e "         -V,  --version  Show version information\n"
		echo -e "Install/Update dotfiles"
		exit 0
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-b | --bashrc)
					[[ -d /system/app/ && -f /system/build.prop ]] && {
						print_not_root_user "$@"
						print_bashrc "$@" &&
						print_success "Finished updating '$module_directory/system/etc/bash/.bashrc'" ||
						print_error "Failed to update '$module_directory/system/etc/bash/.bashrc'"
						exit 0
					}
					print_bashrc "$@" &&
					print_success "Finished updating '/home/"${SUDO_USER:=$USER}"/.bashrc'" ||
					print_error "Failed to update '/home/"${SUDO_USER:=$USER}"/.bashrc'"
					# Exit status is gotten from 'print_bashrc'
					exit
				;;
				-fi | --firefox)
					[[ $(type -p firefox) || $(pm -l 2>/dev/null | grep "org.mozilla.fennec_fdroid") ]] && {
						print_firefox "$@" &&
						print_success "Finished updating '$user_js'" ||
						print_error "Failed to update '$user_js'"
						exit 0
					}
					print_missing_dependencies "Firefox"
					exit 1
				;;
				-h | --help)
					print_help
				;;
				-k | --kitty)
					[[ $(type -p kitty) ]] && {
						print_kitty "$@" &&
						print_success "Finished updating '~/.config/kitty/kitty.conf'" ||
						print_error "Failed to update '~/.config/kitty/kitty.conf'"
						exit 0
					}
					print_missing_dependencies "Kitty"
					exit 1
				;;
				-m | --mkshrc)
					[[ -d /system/app/ && -f /system/build.prop ]] && {
						print_not_root_user "$@"
						print_mkshrc_android "$@" &&
						print_success "Finished updating '$module_directory/system/etc/mkshrc'" ||
						print_error "Failed to update '$module_directory/system/etc/mkshrc'"
						exit 0
					}
					print_os_error
					exit 1
				;;
				-te | --termux)
					[[ ! -d /system/app ]] && {
						print_os_error
					}
					[[ -n $(pm -l 2>/dev/null | grep "com.termux$") && -d $termux_directory ]] && {
						print_not_root_user "$@"
						# Update termux.properties
						print_termux_config "$@" &&
						print_success "Finished updating '$termux_directory/home/.termux/termux.properties'" ||
						print_error "Failed to update '$termux_directory/home/.termux/termux.properties'"
						# Update etc/profile
						print_termux_profile "$@" &&
						print_success "Finished updating '$termux_directory/usr/etc/profile'" ||
						print_error "Failed to update '$termux_directory/usr/etc/profile'"
						# Update colors.properties
						print_termux_color "$@" &&
						print_success "Finished updating '$termux_directory/home/.termux/colors.properties'" ||
						print_error "Failed to update '$termux_directory/home/.termux/colors.properties'"
						# Update usr/etc/.bashrc
						module_directory="${module_directory:=/data/local/tmp}"
						print_bashrc "$@" &&
						cp -f "$module_directory/system/etc/bash/.bashrc" "$termux_directory/usr/etc" &&
						print_success "Finished updating '$termux_directory/usr/etc/.bashrc'" ||
						print_error "Failed to update '$termux_directory/usr/etc/.bashrc'"
						# Populate PATH with tether-utils
						/bin/tether --silent /data/data/com.termux/files/usr/bin
						rm -rf "$termux_directory/usr/etc/bash.bashrc" 2>/dev/null
						rm -rf "$termux_directory"/usr/etc/motd* 2>/dev/null
						exit 0
					}
					[[ -n $(pm -l 2>/dev/null | grep "com.termux$") && ! -d $termux_directory ]] && {
						print_error "Cannot stat '$termux_directory': No such file or directory"
						print_aligned "Try running 'Termux' at least once"
						exit 1
					}
					print_missing_dependencies "termux"
					exit 1
				;;
				-tm | --tmux)
					[[ $(type -p tmux) ]] && {
						print_tmux_conf "$@" &&
						print_success "Finished updating '~/.tmux.conf'" ||
						print_error "Failed to update '~/.tmux.conf'"
						exit 0
					}
					print_missing_dependencies "tmux"
					exit 1
				;;
				-u | --urxvt)
					[[ $(type -p urxvt) ]] && {
						print_xresources "$@" &&
						print_success "Finished updating '~/.Xresources'" ||
						print_error "Failed to update '~/.Xresources'"
						exit 0
					}
					print_missing_dependencies "rxvt-unicode"
					exit 1
				;;
				-v | --vim)
					[[ $(type -p vim) ]] && {
						# Run only root user on first run
						chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /usr/share/vim/vim90/colors/tether.vim 2>/dev/null ||
						print_not_root_user
						# Update .vimrc
						print_vimrc "$@" &&
						print_success "Finished updating '~/.vimrc'" ||
						print_error "Failed to update '~/.vimrc'"
						# Update /usr/share/vim/vim90/colors/tether.vim
						print_vim_color "$@" &&
						print_success "Finished updating '/usr/share/vim/vim90/colors/tether.vim'" ||
						print_error "Failed to update '/usr/share/vim/vim90/colors/tether.vim'"
						exit 0
					}
					print_missing_dependencies "vim"
					exit 1
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					for secondary_options in "${@:2}"; do
						case "$secondary_options" in
							-h | --help)
								print_help
							;;
						esac
					done
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: mkdir, ls, 7zip, bsdtar
#--------------------------------------------------------------
extract() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [FILE...]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name /sdcard/*"
		echo -e "          $script_name file1.zip file2.zip\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Extract archive into archive-name folder"
		exit 0
	}
	check_dependencies() {
		# Prevent bad system call error as non-root user
		[[ -d "/system/app/" && $EUID -gt 0 ]] && print_not_root_user
		# Check for required dependencies
		for mis_dep in mkdir ls; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
	}
	failed_to_extract() {
		print_error "Failed to extract '$archive_file'"
		rm -rf "$folder_name" 2>/dev/null
		exit_status=1
	}
	check_input_argument() {
		for archive_file in "${@:1}"; do
			unset exit_status
			case "$archive_file" in
				*)
					# Set name of archive folder
					folder_name="${archive_file##*/}"
					folder_name="${folder_name%.*}"
					# Handles tar.xz
					folder_name="${folder_name%.tar}"
					# Handles img.xz
					folder_name="${folder_name%.img}"
					# Add random number if file exist with $folder_name
					[[ -e $folder_name ]] && {
						folder_name="${folder_name}_${RANDOM}"
					}
					# Use original filename if $folder_name is empty
					# Only occurs if $archive_file is a hidden file
					[[ -z $folder_name ]] && {
						folder_name="${archive_file##*/}_${RANDOM}"
					}
					# Handles if $archive_file is a folder
					[[ -d $archive_file ]] && {
						print_error "Cannot extract '$archive_file': Not a valid archive"
						exit_status=1
					}
					# Handles if $archive_file doesn't exist
					[[ ! -e $archive_file ]] && {
						print_error "Cannot extract '$archive_file': No such file"
						exit_status=1
					}
					# Handles archive files
					[[ -f $archive_file && $archive_file =~ .7z|.xz|.gz|.tar|.tar.xz ]] && {
						[[ ! $(type -p 7z) ]] && print_missing_dependencies "7zip"
						# Make $folder_name only if it doesn't already exist
						mkdir "$folder_name" 2>/dev/null || print_write_error "$folder_name"
						7z x "$archive_file" -y -mmt"$cpu_core_count" -o"$folder_name" 2>/dev/null || failed_to_extract
						[[ -n $(ls -A "$folder_name" 2>/dev/null) ]] && {
							print_success "Extracted '$archive_file' to '$folder_name'"
							exit_status=0
						}
					}
					# Handles every other archive type
					[[ -f $archive_file ]] && ! [[ $archive_file =~ .7z|.xz|.gz|.tar|.tar.xz ]] && {
						[[ ! $(type -p bsdtar) ]] && print_missing_dependencies "bsdtar"
						# Make $folder_name only if it doesn't already exist
						mkdir "$folder_name" 2>/dev/null || print_write_error "$folder_name"
						bsdtar -xf "$archive_file" -C "$folder_name" 2>/dev/null || failed_to_extract
						[[ -n $(ls -A "$folder_name" 2>/dev/null) ]] && {
							print_success "Extracted '$archive_file' to '$folder_name'"
							exit_status=0
						}
					}
				;;
			esac
		done
		# Show last exit status
		exit "${exit_status:=1}"
	}
	trap 'remove_file_on_exit "$folder_name"' 1 2 3 15
	print_no_argument "$@"
	input_option_type_one "$@"
	check_dependencies "$@"
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: ls
#--------------------------------------------------------------
ll() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION] [NUMBER] [FOLDER/FILE...]\n"
		echo -e "Examples: $script_name /sdcard/folder"
		echo -e "          $script_name 1"
		echo -e "          $script_name 1 folder"
		echo -e "          $script_name -l folder"
		echo -e "          $script_name -l 1 folder"
		echo -e "          $script_name -l 1 folder folder2"
		echo -e "          $script_name -l 1 folder/folder\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "All 'ls' options are also available here\n"
		echo -e "Expand 'ls' functionality"
		exit 0
	}
	check_input_argument() {
		# Handles ll
		# Handles ll 0
		[[ $# -eq 0 || $1 == "0" ]] && {
			ls -Ah --color=auto && exit
		}
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-V | --version)
					print_version
				;;
				*)
					[[ ! $(type -p ls) ]] && print_missing_dependencies "ls"
					unset dir_glob
					for glob_count in {1..9}; do
						dir_glob+=../
						[[ $# -eq 1 ]] && {
							# Handles ll [NUMBER] ---> ll 1
							[[ $1 == "$glob_count" ]] && {
								echo "${dir_glob%\/}:" && ls -Ah --color=auto "${dir_glob}"
								exit
							}
							# Handles ll [OPTION] ---> ll -rl
							case "$1" in
								-*)
									ls -Ah --color=auto "$1"
									exit
								;;
							esac
						}
						[[ $# -eq 2 ]] && {
							# Handles ll [NUMBER] [OPTION] ---> ll 2 -rl
							[[ $1 == "$glob_count" ]] && {
								case "$2" in
									-*)
										echo "${dir_glob%\/}:" && ls -Ah --color=auto "$2" "$dir_glob" && exit
									;;
								esac
								# Handles ll [NUMBER] [FILE/FOLDER] ---> ll 2 sys/class
								for new_dir in "${@:2}"; do
									echo -e "${dir_glob}$new_dir:"
									ls -Ah --color=auto ${dir_glob}${new_dir} 2>/dev/null ||
									ls -Ah --color=auto ${dir_glob}"${new_dir}"
								done
								exit
							}
							[[ $2 == "$glob_count" ]] && {
								case "$1" in
									# Handles ll [OPTION] [NUMBER] ---> ll -rl 2
									-*)
										echo "${dir_glob%\/}:" && ls -Ah --color=auto "$1" "$dir_glob"
										exit
									;;
									# Handles ll [FILE/FOLDER] [NUMBER] ---> ll sys/class 2
									*)
										echo "${dir_glob}$1:" && ls -Ah --color=auto ${dir_glob}"$1"
										exit
									;;
								esac
								exit
							}
						}
						[[ $# -gt 2 ]] && {
							[[ $1 == "$glob_count" ]] && {
								case "$2" in
									# Handles ll [NUMBER] [OPTION] [FILE/FOLDER]... ---> ll 2 -rl sys/class proc/sys
									-*)
										for dir_next in "${@:3}"; do
											echo -e "${dir_glob}$dir_next:"
											ls -Ah --color=auto "$2" ${dir_glob}$dir_next 2>/dev/null ||
											ls -Ah --color=auto "$2" ${dir_glob}"$dir_next"
										done
										exit
									;;
									# Handles ll [NUMBER] [FILE/FOLDER]... ---> ll 2 sys/class proc/sys dev/block
									*)
										for new_next in "${@:2}"; do
											echo -e "${dir_glob}$new_next:"
											ls -Ah --color=auto ${dir_glob}$new_next 2>/dev/null ||
											ls -Ah --color=auto ${dir_glob}"$new_next"
										done
										exit
									;;
								esac
							}
							[[ $2 == "$glob_count" ]] && {
								case "$1" in
									# Handles ll [OPTION] [NUMBER] [FILE/FOLDER]... ---> ll -rl 2 sys/class dev/block
									-*)
										for dir_sec in "${@:3}"; do
											echo -e "${dir_glob%\/}/$dir_sec:"
											ls -Ah --color=auto "$1" ${dir_glob}$dir_sec 2>/dev/null ||
											ls -Ah --color=auto "$1" ${dir_glob}"$dir_sec"
										done
										exit
									;;
								esac
							}
						}
					done
					# Handles ll [OPTION] [FILE/FOLDER] ---> ll -s /mnt
					# Handles ll [FILE/FOLDER]... ---> ll folder1 file1
					# Handles ll [FILE/FOLDER]... [OPTION] ---> ll folder1 file1 -s
					ls -Ah --color=auto "$@"
					exit
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: mkdir, cp, ls, find
#--------------------------------------------------------------
mkcp() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [FOLDER] [FILE...]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name newfolder file1 file2"
		echo -e "          $script_name newfolder *\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Copy file/folder to the specified folder"
		exit 0
	}
	check_dependencies() {
		# Check for required dependencies
		for mis_dep in mkdir cp ls find; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Declare destination directory
		folder_name="$1"
		# Check if a file exist with $folder_name
		[[ -e $folder_name && ! -d $folder_name ]] && {
			print_error "Cannot create directory '$folder_name': File exists"
			exit 1
		}
		# Check if a file exist with $folder_name
		[[ $# -eq 1 ]] && {
			print_error "Missing source file operand after '$folder_name'"
			print_notification
		}
	}
	check_input_argument() {
		for file_name in "${@:2}"; do
			case "$file_name" in
				*)
					# Check if source file exists
					[[ ! -e $file_name ]] && {
						print_error "Cannot stat '$file_name': No such file or directory"
					}
					# Check if source file and destination directory are the same
					[[ $file_name == "$folder_name" ]] && {
						print_error "'$file_name' and '$folder_name' are the same file"
						exit 1
					}
					# Create destination directory
					mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
					# Handles if $file_name is a file but not a directory
					# Handles special files, stuff normally not caught by -f
					[[ -e $file_name && ! -d $file_name ]] && {
						unset exit_status
						# Allow copying symbolic links as-is on filesystems that support it
						cp -rf "$file_name" "$folder_name" 2>/dev/null && exit_status=0 ||
						cp -f "$file_name" "$folder_name" 2>/dev/null && exit_status=0
						[[ -z $exit_status ]] && {
							print_error "Cannot create file '${folder_name}/${file_name##*\/}': Permission denied"
						}
					}
					# Work around to allow copying folders containing symlinks to Android
					# Handles if $file_name is a directory
					[[ -d $file_name ]] && {
						# folder_name --> foldername/ -> foldername
						sec_folder_name=${folder_name%\/}
						while read sec_file_name; do
							[[ -d $sec_file_name ]] && {
								unset exit_status
								# Gets filename from user prompt and removes the directory path
								# file_name --> /home/username/folder -> folder
								new_file_name=${file_name##*\/}
								[[ -z $new_file_name ]] && {
									# /home/username/file/*  -> /home/username/file/
									new_file_name=${file_name%\*}
									# /home/username/file/  -> /home/username/file
									new_file_name=${file_name%\/}
									# /home/username/file  -> file
									new_file_name=${new_file_name##*\/}
								}
								# Creates folder in destination directory using $new_file_name as base directory
								# sec_file_name --> /home/username/folder/folder1/name -> folder1/name
								mkdir -p "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0
								[[ -z $exit_status ]] && {
									print_error "Cannot create directory '${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}': Permission denied"
								}
								# Remove destination folder duplicate --- consequence of using find, first result is the input file path
								dup_file_name="${file_name}"
								# /home/username/file  -> home/username/file
								dup_file_name="${dup_file_name#\/}"
								# home/username/file  -> home
								dup_file_name="${dup_file_name%%\/*}"
								rm -r "${sec_folder_name}/${new_file_name}/${dup_file_name}" 2>/dev/null
							}
							[[ -e $sec_file_name && ! -d $sec_file_name ]] && {
								unset exit_status
								# Gets filename from user prompt and removes the directory path
								# file_name --> /home/username/folder -> folder
								new_file_name=${file_name##*\/}
								[[ -z $new_file_name ]] && {
									# /home/username/file/*  -> home/username/file/
									new_file_name=${file_name%\*}
									# /home/username/file/  -> home/username/file
									new_file_name=${file_name%\/}
									# /home/username/file  -> file
									new_file_name=${new_file_name##*\/}
								}
								# Copies file into created destination directory using $new_file_name as base directory
								# sec_file_name --> /home/username/folder/folder1/name -> folder1/name
								# Allow copying symbolic links as-is on filesystems that support it
								cp -rf "$sec_file_name" "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0 ||
								cp -f "$sec_file_name" "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0
								[[ -z $exit_status ]] && {
									print_error "Cannot create file '${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}': Permission denied"
								}
							}
						# Feed while loop data using here string ----> so exit_status is not empty on subshell exit
						done <<< $(find "$file_name")
					}
					# Print program run status
					[[ -n $exit_status && $exit_status -eq 0 ]] && {
						print_success "Copied '$file_name' to '$folder_name'"
					}
				;;
			esac
		done
		# Handles specified files not existing
		[[ -z $(ls -A "$folder_name" 2>/dev/null) ]] && {
			rm -r "$folder_name" 2>/dev/null
			exit 1
		}
		# Exit status for successful run
		exit "${exit_status:=1}"
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	input_option_type_one "$@"
	check_dependencies "$@"
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: mkdir, cp, ls, find, rm
#--------------------------------------------------------------
mkmv() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [FOLDER] [FILE...]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name newfolder file1 file2"
		echo -e "          $script_name newfolder *\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Move file/folder to the specified folder"
		exit 0
	}
	check_dependencies() {
		# Check for required dependencies
		for mis_dep in mkdir cp ls find rm; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Declare destination directory
		folder_name="$1"
		# Check if a file exist with $folder_name
		[[ -e $folder_name && ! -d $folder_name ]] && {
			print_error "Cannot create directory '$folder_name': File exists"
			exit 1
		}
		# Check if a file exist with $folder_name
		[[ $# -eq 1 ]] && {
			print_error "Missing source file operand after '$folder_name'"
			print_notification
		}
	}
	check_input_argument() {
		for file_name in "${@:2}"; do
			case "$file_name" in
				*)
					# Check if source file exists
					[[ ! -e $file_name ]] && {
						print_error "Cannot stat '$file_name': No such file or directory"
					}
					# Check if source file and destination directory are the same
					[[ $file_name == "$folder_name" ]] && {
						print_error "'$file_name' and '$folder_name' are the same file"
						exit 1
					}
					# Create destination directory
					mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
					# Handles if $file_name is a file but not a directory
					# Handles special files, stuff normally not caught by -f
					[[ -e $file_name && ! -d $file_name ]] && {
						unset exit_status
						# Allow copying symbolic links as-is on filesystems that support it
						cp -rf "$file_name" "$folder_name" 2>/dev/null && exit_status=0 ||
						cp -f "$file_name" "$folder_name" 2>/dev/null && exit_status=0
						[[ -z $exit_status ]] && {
							print_error "Cannot create file '${folder_name}/${file_name##*\/}': Permission denied"
						}
					}
					# Work around to allow moving folders containing symlinks to Android
					# Handles if $file_name is a directory
					[[ -d $file_name ]] && {
						# folder_name --> foldername/ -> foldername
						sec_folder_name=${folder_name%\/}
						while read sec_file_name; do
							[[ -d $sec_file_name ]] && {
								unset exit_status
								# Gets filename from user prompt and removes the directory path
								# file_name --> /home/username/folder -> folder
								new_file_name=${file_name##*\/}
								[[ -z $new_file_name ]] && {
									# /home/username/file/*  -> /home/username/file/
									new_file_name=${file_name%\*}
									# /home/username/file/  -> /home/username/file
									new_file_name=${file_name%\/}
									# /home/username/file  -> file
									new_file_name=${new_file_name##*\/}
								}
								# Creates folder in destination directory using $new_file_name as base directory
								# sec_file_name --> /home/username/folder/folder1/name -> folder1/name
								mkdir -p "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0
								[[ -z $exit_status ]] && {
									print_error "Cannot create directory '${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}': Permission denied"
								}
								# Remove destination folder duplicate --- consequence of using find, first result is the input file path
								dup_file_name="${file_name}"
								# /home/username/file  -> home/username/file
								dup_file_name="${dup_file_name#\/}"
								# home/username/file  -> home
								dup_file_name="${dup_file_name%%\/*}"
								rm -r "${sec_folder_name}/${new_file_name}/${dup_file_name}" 2>/dev/null
							}
							[[ -e $sec_file_name && ! -d $sec_file_name ]] && {
								unset exit_status
								# Gets filename from user prompt and removes the directory path
								# file_name --> /home/username/folder -> folder
								new_file_name=${file_name##*\/}
								[[ -z $new_file_name ]] && {
									# /home/username/file/*  -> home/username/file/
									new_file_name=${file_name%\*}
									# /home/username/file/  -> home/username/file
									new_file_name=${file_name%\/}
									# /home/username/file  -> file
									new_file_name=${new_file_name##*\/}
								}
								# Copies file into created destination directory using $new_file_name as base directory
								# sec_file_name --> /home/username/folder/folder1/name -> folder1/name
								# Allow copying symbolic links as-is on filesystems that support it
								cp -rf "$sec_file_name" "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0 ||
								cp -f "$sec_file_name" "${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}" 2>/dev/null && exit_status=0
								[[ -z $exit_status ]] && {
									print_error "Cannot create file '${sec_folder_name}/${new_file_name}/${sec_file_name//*"$new_file_name"\/}': Permission denied"
								}
							}
						# Feed while loop data using here string ----> so exit_status is not empty on subshell exit
						done <<< $(find "$file_name")
					}
					# Print program run status
					[[ -n $exit_status && $exit_status -eq 0 ]] && {
						print_success "Moved '$file_name' to '$folder_name'"
						# Delete copied file
						rm -rf "$file_name" 2>/dev/null
					}
				;;
			esac
		done
		# Handles specified files not existing
		[[ -z $(ls -A "$folder_name" 2>/dev/null) ]] && {
			rm -r "$folder_name" 2>/dev/null
			exit 1
		}
		# Exit status for successful run
		exit "${exit_status:=1}"
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	input_option_type_one "$@"
	check_dependencies "$@"
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: mkdir, touch, ls
#--------------------------------------------------------------
mktouch() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [FOLDER] [FILE...]\n"
		echo -e "Examples: $script_name --help"
		echo -e "          $script_name newfolder file1 file2"
		echo -e "          $script_name newfolder *\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Create empty file(s) in the specified folder"
		exit 0
	}
	check_dependencies() {
		# Check for required dependencies
		for mis_dep in mkdir touch ls; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Declare destination directory
		folder_name="$1"
		# Check if a file exist with $folder_name
		[[ -e $folder_name && ! -d $folder_name ]] && {
			print_error "Cannot create directory '$folder_name': File exists"
			exit 1
		}
		# Check if a file exist with $folder_name
		[[ $# -eq 1 ]] && {
			print_error "Missing source file operand after '$folder_name'"
			print_notification
		}
	}
	check_input_argument() {
		folder_name="$1"
		for file_name in "${@:2}"; do
			unset exit_status
			case "$file_name" in
				*)
					# Check if a file exist with $file_name
					[[ -e "${folder_name}/${file_name}" ]] && {
						print_error "Cannot create file '$file_name': File exists"
						exit 1
					}
					# Create destination directory
					mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
					$(touch "$folder_name/$file_name" 2>/dev/null) &&
					print_success "Created '$file_name' in '$folder_name'" ||
					print_error "Failed to create '$file_name' to '$folder_name'" &&
					exit_status=0
				;;
			esac
		done
		# Handles specified files not existing
		[[ -z $(ls -A "$folder_name" 2>/dev/null) ]] && {
			rm -r "$folder_name" 2>/dev/null
			exit 1
		}
		# Exit status for successful run
		exit "${exit_status:=1}"
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	input_option_type_one "$@"
	check_dependencies "$@"
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: 7zip, ls, pm, date, mkdir
#--------------------------------------------------------------
omaps-backup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --encrypt"
		echo -e "          $script_name --restore\n"
		echo -e "Options: -en, --encrypt    Create an encrypted backup"
		echo -e "         -h,  --help       Print out this message"
		echo -e "         -l,  --list       List all available backups"
		echo -e "         -un, --unencrypt  Create an unencrypted backup"
		echo -e "         -r,  --restore    Restore organic maps from available backups"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Create and restore organic maps backups"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in ls 7z pm date mkdir; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root user
		print_not_root_user
		# Handles no organic maps install
		[[ -z $(pm -l | grep "app.organicmaps$" 2>/dev/null) ]] && {
			print_error "Organic Maps is not installed"
			print_notification
			exit 1
		}
		# Set organic maps content directories
		omaps_internal="/sdcard/Android/data/app.organicmaps"
		[[ -n $external_storage ]] && {
			omaps_external="$external_storage/Android/data/app.organicmaps"
		}
		omaps_private_internal="/data/data/app.organicmaps"
		# Array of content directories
		omaps_backup_candidates=(
			"$omaps_internal"
			"$omaps_external"
			"$omaps_private_internal"
		)
		# Handles missing organic maps folders
		unset backup_checker
		backup_checker=0
		for avail_dir in ${omaps_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				backup_checker=$((backup_checker + 1))
			}
		done
		# Set organic maps backup directory
		omaps_backup_dir="$phone_storage/Misc/omaps-backup"
		# Use external storage if available
		[[ -n $(ls -A "$external_storage" 2>/dev/null) ]] && {
			omaps_backup_dir="$external_storage/Misc/omaps-backup"
		}
		# Set current current directory
		current_dir="$PWD"
		# Get date and time in YY.MM.DD.HH.MM format
		current_date="$(date +%y.%m.%d.%H%M)"
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create 'omaps-backup.${current_date}.7z'"
		rm -rf "${omaps_backup_dir}/current" 2>/dev/null
		rm -rf "${omaps_backup_dir}/omaps-backup.${current_date}.7z" 2>/dev/null
		# CD back to original directory
		cd "$current_dir"
		exit 1
	}
	failed_to_extract() {
		echo ""
		print_error "Failed to extract '${backup_list[$backup_option]}'"
		rm -rf "${omaps_backup_dir}/current" 2>/dev/null
		# CD back to original directory
		cd "$current_dir"
		exit 1
	}
	encrypted_backup_omaps() {
		print_warning "Creating encrypted backup 'omaps-backup.${current_date}.7z'\n"
		# Handles password creation
		create_password "$@"
		mkdir -p "${omaps_backup_dir}/current"
		unset avail_dir
		# Create archives of each omaps content folder
		for avail_dir in ${omaps_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				file_name="${avail_dir#\/}"
				file_name="${file_name%%\/*}"
				cd "${avail_dir%files}"
				# Compress $avail_dir contents
				7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "omaps-${file_name}.7z" "files/" &>/dev/null &&
				mv "omaps-${file_name}.7z" "${omaps_backup_dir}/current" 2>/dev/null
			}
		done
		# Make main archive
		cd "${omaps_backup_dir}/current"
		7z a -snl -snh -p"$file_password" -t7z -mx1 -mmt"$cpu_core_count" -mhe=on "omaps-backup.${current_date}.7z" "*" &>/dev/null &&
		unset file_password file_password2 &&
		mv "omaps-backup.${current_date}.7z" .. 2>/dev/null ||
		failed_to_create "$@"
		print_success "Finished encrypting 'omaps-backup.${current_date}.7z'"
		print_aligned "Check '$omaps_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		rm -rf "${omaps_backup_dir}/current" 2>/dev/null
		exit 0
	}
	unencrypted_backup_omaps() {
		print_warning "Creating unencrypted backup 'omaps-backup.${current_date}.7z'\n"
		mkdir -p "${omaps_backup_dir}/current"
		unset avail_dir
		# Create archives of each omaps content folder
		for avail_dir in ${omaps_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				file_name="${avail_dir#\/}"
				file_name="${file_name%%\/*}"
				cd "${avail_dir%files}"
				# Compress $avail_dir contents
				7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "omaps-${file_name}.7z" "files/" &>/dev/null &&
				mv "omaps-${file_name}.7z" "${omaps_backup_dir}/current" 2>/dev/null
			}
		done
		# Make main archive
		cd "${omaps_backup_dir}/current"
		7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "omaps-backup.${current_date}.7z" "*" &>/dev/null &&
		mv "omaps-backup.${current_date}.7z" .. 2>/dev/null ||
		failed_to_create "$@"
		print_success "Finished creating 'omaps-backup.${current_date}.7z'"
		print_aligned "Check '$omaps_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		rm -rf "${omaps_backup_dir}/current" 2>/dev/null
		exit 0
	}
	restore_omaps() {
		# Set variables for available backups
		array_counter=1
		for avail_backup in $(ls -A "$omaps_backup_dir" 2>/dev/null); do
			backup_list[$array_counter]="$avail_backup"
			array_counter=$((array_counter + 1))
		done
		# Handles no available backups
		[[ $array_counter -eq 1 ]] && {
			print_error "No available backups to restore from"
			exit 1
		}
		# List available backups
		print_banner
		print_warning "Restoring organic maps\n"
		for ((array_checker=1; array_checker < array_counter; array_checker++)); do
			echo -e "${array_checker}.${backup_list[$array_checker]}"
		done
		echo ""
		read -rep "Select preferred backup: " backup_option
		case "$backup_option" in
			-*)
				echo ""
				[[ -z ${backup_option#*\-} ]] && {
					print_error "Invalid option '${backup_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${backup_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				[[ $(( backup_option / 1 )) -gt 0 && $backup_option -lt $array_counter ]] && {
					print_warning "Restoring organic maps using '${backup_list[$backup_option]}'"
					rm -rf "${omaps_backup_dir}/current" 2>/dev/null
					mkdir -p "${omaps_backup_dir}/current"
					# Copy selected backup file to $omaps_backup_dir/current
					cp -rf "$omaps_backup_dir"/${backup_list[$backup_option]} "${omaps_backup_dir}/current" 2>/dev/null &&
					cd "${omaps_backup_dir}/current"
					# Extract selected backup file
					7z x "${backup_list[$backup_option]}" -mmt"$cpu_core_count" -y 2>/dev/null || failed_to_extract
					# Get names of extracted files
					for avail_dir in ${omaps_backup_candidates[@]}; do
						file_name="${avail_dir#\/}"
						file_name="${file_name%%\/*}"
						[[ -f omaps-${file_name}.7z ]] && {
							# Extract compressed files in omaps content directories
							7z x "omaps-${file_name}.7z" -mmt"$cpu_core_count" -y -o${avail_dir} 2>/dev/null || failed_to_extract
						}
					done
					echo "" &&
					print_success "Finished restoring '${backup_list[$backup_option]}'"
					# CD back to original directory
					cd "$current_dir"
					rm -rf "${omaps_backup_dir}/current" 2>/dev/null
					exit 0
				}
				print_error "Invalid option '${backup_option}'" &&
				exit 1
			;;
		esac
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-en | --encrypt)
					check_dependencies "$@"
					# Handles if $omaps_backup exists and is empty
					[[ -z $(ls -A "$omaps_internal" 2>/dev/null) || ! -d $omaps_internal || $backup_checker -eq 0 ]] && {
						print_error "There is nothing to backup"
						print_aligned "Try running 'Organic Maps' at least once"
						exit 1
					}
					encrypted_backup_omaps "$@"
				;;
				-h | --help)
					print_help
				;;
				-l | --list)
					check_dependencies "$@"
					# Handles no available omaps backup
					[[ -z $(ls -A "$omaps_backup_dir" 2>/dev/null) ]] && {
						print_error "No available backups"
						exit 1
					}
					echo -e "\033[1;97mAvailable backups:\033[00m"
					ls -A "$omaps_backup_dir"
					exit 0
				;;
				-un | --unencrypt)
					check_dependencies "$@"
					# Handles if $omaps_backup exists and is empty
					[[ -z $(ls -A "$omaps_internal" 2>/dev/null) || ! -d $omaps_internal || $backup_checker -eq 0 ]] && {
						print_error "There is nothing to backup"
						print_aligned "Try running 'Organic Maps' at least once"
						exit 1
					}
					unencrypted_backup_omaps "$@"
				;;
				-r | --restore)
					check_dependencies "$@"
					restore_omaps "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					for secondary_options in "${@:2}"; do
						case "$secondary_options" in
							-h | --help)
								print_help
							;;
						esac
					done
					print_syntax_error
				;;
			esac
		done
	}
	trap 'remove_file_on_exit "${omaps_backup_dir}/current" "${omaps_backup_dir}/omaps-backup.${current_date}.7z"' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: 7zip, ls, pm, date, mkdir
#--------------------------------------------------------------
opencamera-backup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --encrypt"
		echo -e "          $script_name --restore\n"
		echo -e "Options: -en, --encrypt    Create an encrypted backup"
		echo -e "         -h,  --help       Print out this message"
		echo -e "         -l,  --list       List all available backups"
		echo -e "         -un, --unencrypt  Create an unencrypted backup"
		echo -e "         -r,  --restore    Restore open camera from available backups"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Create and restore open camera backups"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in ls 7z pm date mkdir; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root user
		print_not_root_user
		# Handles no open camera install
		[[ -z $(pm -l | grep "net.sourceforge.opencamera$" 2>/dev/null) ]] && {
			print_error "Open Camera is not installed"
			print_notification
			exit 1
		}
		# Set open camera content directories
		ocam_internal="/sdcard/Android/data/net.sourceforge.opencamera"
		# Array of content directories
		ocam_backup_candidates=(
			"$ocam_internal"
		)
		# Handles missing open camera folders
		unset backup_checker
		backup_checker=0
		for avail_dir in ${ocam_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				backup_checker=$((backup_checker + 1))
			}
		done
		# Set open camera backup directory
		ocam_backup_dir="$phone_storage/Misc/opencamera-backup"
		# Use external storage if available
		[[ -n $(ls -A "$external_storage" 2>/dev/null) ]] && {
			ocam_backup_dir="$external_storage/Misc/opencamera-backup"
		}
		# Set current current directory
		current_dir="$PWD"
		# Get date and time in YY.MM.DD.HH.MM format
		current_date="$(date +%y.%m.%d.%H%M)"
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create 'opencamera-backup.${current_date}.7z'"
		rm -rf "${ocam_backup_dir}/current" 2>/dev/null
		rm -rf "${ocam_backup_dir}/opencamera-backup.${current_date}.7z" 2>/dev/null
		# CD back to original directory
		cd "$current_dir"
		exit 1
	}
	failed_to_extract() {
		echo ""
		print_error "Failed to extract '${backup_list[$backup_option]}'"
		rm -rf "${ocam_backup_dir}/current" 2>/dev/null
		# CD back to original directory
		cd "$current_dir"
		exit 1
	}
	encrypted_backup_ocam() {
		print_warning "Creating encrypted backup 'opencamera-backup.${current_date}.7z'\n"
		# Handles password creation
		create_password "$@"
		mkdir -p "${ocam_backup_dir}/current"
		unset avail_dir
		# Create archives of each open camera content folder
		for avail_dir in ${ocam_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				file_name="${avail_dir#\/}"
				file_name="${file_name%%\/*}"
				cd "${avail_dir%files}"
				# Compress $avail_dir contents
				7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "opencamera-${file_name}.7z" "files/" &>/dev/null &&
				mv "opencamera-${file_name}.7z" "${ocam_backup_dir}/current" 2>/dev/null
			}
		done
		# Make main archive
		cd "${ocam_backup_dir}/current"
		7z a -snl -snh -p"$file_password" -t7z -mx1 -mmt"$cpu_core_count" -mhe=on "opencamera-backup.${current_date}.7z" "*" &>/dev/null &&
		unset file_password file_password2 &&
		mv "opencamera-backup.${current_date}.7z" .. 2>/dev/null ||
		failed_to_create "$@"
		print_success "Finished encrypting 'opencamera-backup.${current_date}.7z'"
		print_aligned "Check '$ocam_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		rm -rf "${ocam_backup_dir}/current" 2>/dev/null
		exit 0
	}
	unencrypted_backup_ocam() {
		print_warning "Creating unencrypted backup 'opencamera-backup.${current_date}.7z'\n"
		mkdir -p "${ocam_backup_dir}/current"
		unset avail_dir
		# Create archives of each open camera content folder
		for avail_dir in ${ocam_backup_candidates[@]}; do
			[[ -d $avail_dir ]] && {
				file_name="${avail_dir#\/}"
				file_name="${file_name%%\/*}"
				cd "${avail_dir%files}"
				# Compress $avail_dir contents
				7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "opencamera-${file_name}.7z" "files/" &>/dev/null &&
				mv "opencamera-${file_name}.7z" "${ocam_backup_dir}/current" 2>/dev/null
			}
		done
		# Make main archive
		cd "${ocam_backup_dir}/current"
		7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "opencamera-backup.${current_date}.7z" "*" &>/dev/null &&
		mv "opencamera-backup.${current_date}.7z" .. 2>/dev/null ||
		failed_to_create "$@"
		print_success "Finished creating 'opencamera-backup.${current_date}.7z'"
		print_aligned "Check '$ocam_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		rm -rf "${ocam_backup_dir}/current" 2>/dev/null
		exit 0
	}
	restore_ocam() {
		# Set variables for available backups
		array_counter=1
		for avail_backup in $(ls -A "$ocam_backup_dir" 2>/dev/null); do
			backup_list[$array_counter]="$avail_backup"
			array_counter=$((array_counter + 1))
		done
		# Handles no available backups
		[[ $array_counter -eq 1 ]] && {
			print_error "No available backups to restore from"
			exit 1
		}
		# List available backups
		print_banner
		print_warning "Restoring open camera\n"
		for ((array_checker=1; array_checker < array_counter; array_checker++)); do
			echo -e "${array_checker}.${backup_list[$array_checker]}"
		done
		echo ""
		read -rep "Select preferred backup: " backup_option
		case "$backup_option" in
			-*)
				echo ""
				[[ -z ${backup_option#*\-} ]] && {
					print_error "Invalid option '${backup_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${backup_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				[[ $(( backup_option / 1 )) -gt 0 && $backup_option -lt $array_counter ]] && {
					print_warning "Restoring open camera using '${backup_list[$backup_option]}'"
					rm -rf "${ocam_backup_dir}/current" 2>/dev/null
					mkdir -p "${ocam_backup_dir}/current"
					# Copy selected backup file to $ocam_backup_dir/current
					cp -rf "$ocam_backup_dir"/${backup_list[$backup_option]} "${ocam_backup_dir}/current" 2>/dev/null &&
					cd "${ocam_backup_dir}/current"
					# Extract selected backup file
					7z x "${backup_list[$backup_option]}" -mmt"$cpu_core_count" -y 2>/dev/null || failed_to_extract
					# Get names of extracted files
					for avail_dir in ${ocam_backup_candidates[@]}; do
						file_name="${avail_dir#\/}"
						file_name="${file_name%%\/*}"
						[[ -f opencamera-${file_name}.7z ]] && {
							# Extract compressed files in open camera content directories
							7z x "opencamera-${file_name}.7z" -mmt"$cpu_core_count" -y -o${avail_dir} 2>/dev/null || failed_to_extract
						}
					done
					echo "" &&
					print_success "Finished restoring '${backup_list[$backup_option]}'"
					# CD back to original directory
					cd "$current_dir"
					rm -rf "${ocam_backup_dir}/current" 2>/dev/null
					exit 0
				}
				print_error "Invalid option '${backup_option}'" &&
				exit 1
			;;
		esac
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-en | --encrypt)
					check_dependencies "$@"
					# Handles if $ocam_backup exists and is empty
					[[ -z $(ls -A "$ocam_internal" 2>/dev/null) || ! -d $ocam_internal || $backup_checker -eq 0 ]] && {
						print_error "There is nothing to backup"
						print_aligned "Create a backup first using the Open Camera app"
						exit 1
					}
					encrypted_backup_ocam "$@"
				;;
				-h | --help)
					print_help
				;;
				-l | --list)
					check_dependencies "$@"
					# Handles no available ocam backup
					[[ -z $(ls -A "$ocam_backup_dir" 2>/dev/null) ]] && {
						print_error "No available backups"
						exit 1
					}
					echo -e "\033[1;97mAvailable backups:\033[00m"
					ls -A "$ocam_backup_dir"
					exit 0
				;;
				-un | --unencrypt)
					check_dependencies "$@"
					# Handles if $ocam_backup exists and is empty
					[[ -z $(ls -A "$ocam_internal" 2>/dev/null) || ! -d $ocam_internal || $backup_checker -eq 0 ]] && {
						print_error "There is nothing to backup"
						print_aligned "Create a backup first using the Open Camera app"
						exit 1
					}
					unencrypted_backup_ocam "$@"
				;;
				-r | --restore)
					check_dependencies "$@"
					restore_ocam "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					for secondary_options in "${@:2}"; do
						case "$secondary_options" in
							-h | --help)
								print_help
							;;
						esac
					done
					print_syntax_error
				;;
			esac
		done
	}
	trap 'remove_file_on_exit "${ocam_backup_dir}/current" "${ocam_backup_dir}/opencamera-backup.${current_date}.7z"' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: ping, magisk, sed
#--------------------------------------------------------------
package() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Magisk module packaging tool"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app ]] && print_os_error
		# Run only on arm64 Android
		[[ $HOSTTYPE != aarch64 ]] && print_os_error
		# Check for internet connectivity
		[[ ! $(ping -c4 voidlinux.org 2>/dev/null) ]] && {
			print_error "Network isn't ready yet"
			exit 1
		}
		package_tmp_dir="/data/local/tmp/package"
		tmp_dir="/data/local/tmp"
		# Remove directory incase it already exists
		rm -r "$package_tmp_dir" 2>/dev/null
		# Dnscrypt version
		dnscrypt_version="2.1.5"
		# 7zip version
		z_version="2301"
		# Get current directory
		current_dir="$PWD"
		# Get date and time in YY.MM.DD.HH.MM format
		current_date="$(date +%y.%m.%d.%H%M)"
		# Declare module backup directory
		backup_dir="$external_storage/Misc/module-backup"
		# Only run if magisk is installed
		[[ ! $(type -p magisk) ]] && [[ ! $(type -p su) ]] && {
			print_error "Magisk is not installed"
			exit 1
		}
		# Check if sed is installed
		[[ ! $(type -p sed) ]] && print_missing_dependencies "sed"
		# Create module package directories
		mkdir -p "$package_tmp_dir/system/app" 2>/dev/null || print_write_error "$package_tmp_dir/system/app"
		mkdir -p "$package_tmp_dir/system/bin" 2>/dev/null || print_write_error "$package_tmp_dir/system/bin"
		mkdir -p "$package_tmp_dir/system/etc" 2>/dev/null || print_write_error "$package_tmp_dir/system/etc"
		mkdir -p "$package_tmp_dir/system/product" 2>/dev/null || print_write_error "$package_tmp_dir/system/product"
		# Check for required dependencies
		for mis_dep in busybox; do
			# Copy magisk busybox if not found in PATH
			[[ ! $(type -p $mis_dep) ]] && {
				cp -f /data/adb/magisk/busybox "$package_tmp_dir/system/bin" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/busybox"
				chmod +x "$package_tmp_dir/system/bin/busybox"
				export PATH=$package_tmp_dir/system/bin:$PATH
			}
		done
		# Copy busybox to package_tmp_dir if it is in PATH
		[[ -f /bin/busybox ]] && {
			cp -f /bin/busybox "$package_tmp_dir/system/bin" || print_file_write_error "$package_tmp_dir/system/bin/busybox"
		}
	}
	download_fail() {
		print_error "Something went wrong"
		print_aligned "Failed to download '$@'"
		rm -r "${package_tmp_dir}" 2>/dev/null
		cd "$current_dir"
		exit 1
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create 'tether.$current_date.zip'"
		rm -r "${package_tmp_dir} $tmp_dir/tether" 2>/dev/null
		cd "$current_dir"
		exit 1
	}
	download_dnscrypt() {
		mkdir -p "$package_tmp_dir/system/etc/dnscrypt-proxy" 2>/dev/null || print_write_error "$package_tmp_dir/system/etc/dnscrypt-proxy"
		cd "$package_tmp_dir"
		print_warning "Downloading 'dnscrypt-proxy version $dnscrypt_version'\n"
		# Download dnscrypt-proxy for arm64 Android
		busybox wget https://github.com/DNSCrypt/dnscrypt-proxy/releases/download/${dnscrypt_version}/dnscrypt-proxy-android_arm64-${dnscrypt_version}.zip -O "$package_tmp_dir/dnscrypt-proxy-android_arm64-${dnscrypt_version}.zip" &>/dev/null ||
		download_fail "dnscrypt-proxy-android_arm64-${dnscrypt_version}.zip"
		# Extract downloaded zip file
		busybox unzip dnscrypt-proxy-android_arm64-${dnscrypt_version}.zip &>/dev/null
		cp -rf "$package_tmp_dir/android-arm64/dnscrypt-proxy" "$package_tmp_dir/system/bin/" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/dnscrypt-proxy"
		rm -r "$package_tmp_dir/dnscrypt-proxy-android_arm64-${dnscrypt_version}.zip" "$package_tmp_dir/android-arm64" 2>/dev/null
		# Download custom config files for dnscrypt-proxy
		print_warning "Downloading 'dnscrypt-proxy' config files\n"
		busybox wget https://github.com/teth3r/blocklist/archive/refs/heads/main.zip -O "$package_tmp_dir/main.zip" &>/dev/null ||
		download_fail "main.zip"
		# Extract downloaded zip file
		busybox unzip "main.zip" &>/dev/null
		cp -rf "$package_tmp_dir/blocklist-main"/*.txt "$package_tmp_dir/system/etc/dnscrypt-proxy" 2>/dev/null
		cp -rf "$package_tmp_dir/blocklist-main"/*.toml "$package_tmp_dir/system/etc/dnscrypt-proxy" 2>/dev/null
		# Change default DNS port
		sed -i 's|127.0.0.1:53|127.0.0.1:5354|g' "$package_tmp_dir/system/etc/dnscrypt-proxy/dnscrypt-proxy.toml" 2>/dev/null
		# Force TCP usage for connecting to upstream resolvers 
		sed -i 's/force_tcp\ =\ false/force_tcp\ =\ true/' "$package_tmp_dir/system/etc/dnscrypt-proxy/dnscrypt-proxy.toml" 2>/dev/null
		rm -r "$package_tmp_dir/main.zip" "$package_tmp_dir/blocklist-main" 2>/dev/null
	}
	download_bash() {
		print_warning "Downloading 'bash' static binary (ccbins)\n"
		# Download bash static binary from ccbins magisk module repo
		busybox wget https://github.com/Zackptg5/Cross-Compiled-Binaries-Android/raw/master/bash/bash-arm64 -O "$package_tmp_dir/bash-arm64" &>/dev/null ||
		download_fail "bash-arm64"
		cp -rf "$package_tmp_dir/bash-arm64" "$package_tmp_dir/system/bin/bash" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/bash"
		rm -rf "$package_tmp_dir/bash-arm64" 2>/dev/null
	}
	download_adb() {
		print_warning "Downloading 'adb' static binary (adb-ndk)\n"
		# Download adb static binary from adb-ndk magisk module repo
		busybox wget https://github.com/Magisk-Modules-Repo/adb-ndk/raw/master/bin/adb.bin-arm64 -O "$package_tmp_dir/adb.bin-arm64" &>/dev/null ||
		download_fail "adb.bin-arm64"
		cp -rf "$package_tmp_dir/adb.bin-arm64" "$package_tmp_dir/system/bin/adb" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/adb"
		# Download fastboot static binary from adb-ndk magisk module repo
		print_warning "Downloading 'fastboot' static binary (adb-ndk)\n"
		busybox wget https://github.com/Magisk-Modules-Repo/adb-ndk/raw/master/bin/fastboot.bin-arm64 -O "$package_tmp_dir/fastboot.bin-arm64" &>/dev/null ||
		download_fail "fastboot.bin-arm64"
		cp -rf "$package_tmp_dir/fastboot.bin-arm64" "$package_tmp_dir/system/bin/fastboot" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/fastboot"
		rm -r "$package_tmp_dir/adb.bin-arm64" "$package_tmp_dir/fastboot.bin-arm64" 2>/dev/null
	}
	download_zip() {
		print_warning "Downloading '7zip' static binary\n"
		mkdir -p "$package_tmp_dir/new" 2>/dev/null
		# Download 7zip for arm64 Android
		busybox wget https://7-zip.org/a/7z${z_version}-linux-arm64.tar.xz -O "$package_tmp_dir/new/7z${z_version}-linux-arm64.tar.xz" &>/dev/null ||
		download_fail "7z${z_version}-linux-arm64.tar.xz"
		cd "$package_tmp_dir/new"
		# Extract downloaded archive
		busybox xz -d "7z${z_version}-linux-arm64.tar.xz" &>/dev/null
		busybox tar -xf "7z${z_version}-linux-arm64.tar" &>/dev/null
		cp -rf "$package_tmp_dir/new/7zzs" "$package_tmp_dir/system/bin/7z" 2>/dev/null || print_file_write_error "$package_tmp_dir/system/bin/7z"
		cd "$package_tmp_dir/system/bin"
		ln -sf 7z 7zip 2>/dev/null
		cd "$package_tmp_dir"
		rm -r "$package_tmp_dir/new" 2>/dev/null
	}
	download_tether() {
		print_warning "Downloading 'tether'\n"
		# Download latest version of tether
		busybox wget https://raw.githubusercontent.com/teth3r/tether/master/tether -O "$package_tmp_dir/tether" &>/dev/null ||
		download_fail "tether"
		chmod +x "$package_tmp_dir/tether"
		./tether --silent "$package_tmp_dir/system/bin"
		tether_version="$(./tether -V)"
		rm tether 2>/dev/null
		
	}
	populate_dir() {
		print_warning "Populating module directories\n"
		# Populate app/
		mkdir -p "$package_tmp_dir/system/app/Stk" 2>/dev/null || print_write_error "$package_tmp_dir/system/app/Stk"
		$(touch "$package_tmp_dir/system/app/Stk/Stk.apk" 2>/dev/null)
		# Populate product/app/
		# AOSP webview shell
		mkdir -p "$package_tmp_dir/system/product/app/Browser2" 2>/dev/null || print_write_error "$package_tmp_dir/system/product/app/Browser2"
		$(touch "$package_tmp_dir/system/product/app/Browser2/Browser2.apk" 2>/dev/null)
		# AOSP camera app
		mkdir -p "$package_tmp_dir/system/product/app/Camera2" 2>/dev/null || print_write_error "$package_tmp_dir/system/product/app/Camera2"
		$(touch "$package_tmp_dir/system/product/app/Camera2/Camera2.apk" 2>/dev/null)
		# AOSP music player
		mkdir -p "$package_tmp_dir/system/product/app/Music" 2>/dev/null || print_write_error "$package_tmp_dir/system/product/app/Music"
		$(touch "$package_tmp_dir/system/product/app/Music/Music.apk" 2>/dev/null)
		# AOSP launcher search bar
		mkdir -p "$package_tmp_dir/system/product/app/QuickSearchBox" 2>/dev/null || print_write_error "$package_tmp_dir/system/product/app/QuickSearchBox"
		$(touch "$package_tmp_dir/system/product/app/QuickSearchBox/QuickSearchBox.apk" 2>/dev/null)
		# Create empty mkshrc file to populate with 'dotfiles --mkshrc'
		$(touch "$package_tmp_dir/system/etc/mkshrc" 2>/dev/null)
	}
	create_module_prop() {
		print_warning "Creating 'module.prop'\n"
		cat 2>/dev/null << "EOF" > "$package_tmp_dir/module.prop"
id=tether
name=tether
version=
versionCode=1
author=tether
description=
EOF
	}
	create_customize() {
		print_warning "Creating 'customize.sh'\n"
		cat 2>/dev/null << "EOF" > "$package_tmp_dir/customize.sh"
#!/bin/env sh

ui_print "
████████╗███████╗████████╗██╗   ██╗███████╗██████═╗
╚══██╔══╝██╔════╝╚══██╔══╝██║   ██║██╔════╝██╔═══██
   ██║   ███████╗   ██║   ████████║███████╗███████═╗
   ██║   ██╔════╝   ██║   ██╔═══██║██╔════╝██╔═══██║
   ██║   ███████╗   ██║   ██║   ██║███████╗██║   ██║
   ╚═╝   ╚══════╝   ╚═╝   ╚═╝   ╚═╝╚══════╝╚═╝   ╚═╝
"
ui_print "Installing $(cat $TMPDIR/module.prop | grep name= | sed 's/name=//') $(cat $TMPDIR/module.prop | grep version= | sed 's/version=//')"
ui_print " "
ui_print "Copyright (C) 2023, Kolade Ayomide Olanrewaju (tether)"
ui_print " "
ui_print "GPL-3.0-or-later"
ui_print " "
EOF
	}
	create_post_fs() {
		print_warning "Creating 'post-fs-data.sh'\n"
		cat 2>/dev/null << "EOF" > "$package_tmp_dir/post-fs-data.sh"
#!/bin/env sh

#--------------------------------------------------------------
# Get module directory
#--------------------------------------------------------------
MODDIR=${0%/*}

#--------------------------------------------------------------
# Copy font.xml file
#--------------------------------------------------------------
cp /system/etc/fonts.xml "$MODDIR/system/etc/"

#--------------------------------------------------------------
# Edit font.xml file to include custom ttf files
#--------------------------------------------------------------
[[ -f "$MODDIR/system/fonts/NotoSerif-Regular.ttf" ]] && {
	sed -i 's/<font weight="100" style="normal">Roboto-Regular.ttf/<font weight="100" style="normal">NotoSerif-Regular.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="200" style="normal">Roboto-Regular.ttf/<font weight="200" style="normal">NotoSerif-Regular.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="300" style="normal">Roboto-Regular.ttf/<font weight="300" style="normal">NotoSerif-Regular.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="400" style="normal">Roboto-Regular.ttf/<font weight="400" style="normal">NotoSerif-Regular.ttf/g' "$MODDIR/system/etc/fonts.xml"
}

[[ -f "$MODDIR/system/fonts/NotoSerif-Italic.ttf" ]] && {
	sed -i 's/<font weight="100" style="italic">Roboto-Regular.ttf/<font weight="100" style="italic">NotoSerif-Italic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="200" style="italic">Roboto-Regular.ttf/<font weight="200" style="italic">NotoSerif-Italic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="300" style="italic">Roboto-Regular.ttf/<font weight="300" style="italic">NotoSerif-Italic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="400" style="italic">Roboto-Regular.ttf/<font weight="400" style="italic">NotoSerif-Italic.ttf/g' "$MODDIR/system/etc/fonts.xml"
}

[[ -f "$MODDIR/system/fonts/NotoSerif-BoldItalic.ttf" ]] && {
	sed -i 's/<font weight="500" style="italic">Roboto-Regular.ttf/<font weight="500" style="italic">NotoSerif-BoldItalic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="600" style="italic">Roboto-Regular.ttf/<font weight="600" style="italic">NotoSerif-BoldItalic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="700" style="italic">Roboto-Regular.ttf/<font weight="700" style="italic">NotoSerif-BoldItalic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="800" style="italic">Roboto-Regular.ttf/<font weight="800" style="italic">NotoSerif-BoldItalic.ttf/g' "$MODDIR/system/etc/fonts.xml"
	sed -i 's/<font weight="900" style="italic">Roboto-Regular.ttf/<font weight="900" style="italic">NotoSerif-BoldItalic.ttf/g' "$MODDIR/system/etc/fonts.xml"
}

[[ -f "$MODDIR/system/fonts/NotoSerif-Bold.ttf" ]] && {
	sed -i 's/Roboto-Regular.ttf/NotoSerif-Bold.ttf/g' "$MODDIR/system/etc/fonts.xml"
}

exit 0
EOF
	}
	create_service() {
		print_warning "Creating 'service.sh'\n"
		cat 2>/dev/null << "EOF" > "$package_tmp_dir/service.sh"
#!/bin/env bash

#--------------------------------------------------------------
# Get module directory
#--------------------------------------------------------------
MODDIR=${0%/*}

#--------------------------------------------------------------
# Change device hostname
#--------------------------------------------------------------
device_user="tether"
hostname "$device_user"

#--------------------------------------------------------------
# Enable and configure dnscrypt-proxy if installed and config files are available
#--------------------------------------------------------------
[[ -f /system/bin/dnscrypt-proxy && -f /system/etc/dnscrypt-proxy/dnscrypt-proxy.toml ]] && {
	# Change IPv4 DNS settings to prevent leakage
	iptables -t nat -A OUTPUT -p tcp ! -d 45.11.45.11 --dport 53 -j DNAT --to-destination 127.0.0.1:5354
	iptables -t nat -A OUTPUT -p udp ! -d 45.11.45.11 --dport 53 -j DNAT --to-destination 127.0.0.1:5354

	# DNScrypt-proxy service manager
	dnscrypt_loader() {
		# Only run if dnscrypt-proxy is not running
		while [[ ! $(pgrep -x dnscrypt-proxy) ]]; do
			dnscrypt-proxy -config "$MODDIR/system/etc/dnscrypt-proxy/dnscrypt-proxy.toml"
			# Add delay so multiple instances are not created
			read -rt "2" <> <(:) || :
		done
	}
	dnscrypt_loader &

	# Log service runtime
	current_date="$(date +%y.%m.%d.%H%M)"
	setprop tether_dnscrypt_runtime "$current_date"
}

#--------------------------------------------------------------
# Add check for boot_complete trigger (Incase user has no password set)
#--------------------------------------------------------------
while [[ $(getprop sys.boot_completed) -ne 1 ]]; do
	# Delay to prevent excessive CPU usage on startup
	read -rt "2" <> <(:) || :
done

#--------------------------------------------------------------
# Check if /data partition is decrypted (user unlocks device after booting)
#--------------------------------------------------------------
test_file="/data/data/PERMISSION_TEST"
while [[ ! -f $test_file ]]; do
	# Delay to prevent excessive CPU usage on startup
	read -rt "2" <> <(:) || :
	# Create test_file file
	$(touch "$test_file" 2>/dev/null)
done
# User has unlocked device, delete test_file
rm -f "$test_file" 2>/dev/null

#--------------------------------------------------------------
# Set CPU clockspeed to max
#--------------------------------------------------------------
for core_group in /sys/devices/system/cpu/cpufreq/*/scaling_governor; do
	echo "performance" > "$core_group"
done

#--------------------------------------------------------------
# Set GPU clockspeed to max
#--------------------------------------------------------------
[[ -d /sys/class/kgsl/kgsl-3d0 ]] && {
	echo 2>/dev/null "performance" > /sys/class/kgsl/kgsl-3d0/devfreq/governor
	echo "0" > /sys/class/kgsl/kgsl-3d0/default_pwrlevel
	echo "0" > /sys/class/kgsl/kgsl-3d0/thermal_pwrlevel
	echo "0" > /sys/class/kgsl/kgsl-3d0/min_pwrlevel
	echo "0" > /sys/class/kgsl/kgsl-3d0/throttling
}

#--------------------------------------------------------------
# Remove vendor thermal*.conf files
#--------------------------------------------------------------
[[ -f /vendor/etc/thermal-engine.conf ]] && {
	mount -o remount,rw /vendor &>/dev/null
	rm -rf /vendor/etc/thermal-engine*.conf 2>/dev/null
	mount -o remount,ro /vendor &>/dev/null
}

#--------------------------------------------------------------
# Change default cpusets to all available CPUs
#--------------------------------------------------------------
cpu_core_count="$(cat /sys/devices/system/cpu/online)"
for dev_cpuset in /dev/cpuset/*/cpus; do
	echo "$cpu_core_count" > "$dev_cpuset"
done

#--------------------------------------------------------------
# Enable USB OTG on certain devices
#--------------------------------------------------------------
[[ -f /sys/class/power_supply/usb/otg_switch ]] && {
	echo "1" > /sys/class/power_supply/usb/otg_switch
}

#--------------------------------------------------------------
# Disable ZRAM for devices with RAM > 4096MiB
#--------------------------------------------------------------
mem_total="$(cat /proc/meminfo)"
mem_total="${mem_total//kB*}"
mem_total="${mem_total//*MemTotal:}"
mem_total="${mem_total//[[:space:]]}"

[[ $mem_total -gt 4194304 ]] && {
	swapoff /dev/block/zram0 &>/dev/null
}

#--------------------------------------------------------------
# Show clock seconds in status bar
#--------------------------------------------------------------
settings put secure clock_seconds 1

#--------------------------------------------------------------
# Disable private DNS
#--------------------------------------------------------------
settings put global private_dns_mode off

#--------------------------------------------------------------
# Disable captive portal detection
#--------------------------------------------------------------
settings put global captive_portal_detection_enabled 0
settings put global captive_portal_mode 0
settings put global captive_portal_http_url ""
settings put global captive_portal_https_url ""
settings put global captive_portal_fallback_url ""
settings put global captive_portal_other_fallback_urls ""

#--------------------------------------------------------------
# Disable monitoring and killing of phantom app processes
#--------------------------------------------------------------
settings put global settings_enable_monitor_phantom_procs false

#--------------------------------------------------------------
# Increase max phantom process limit
#--------------------------------------------------------------
device_config put activity_manager max_phantom_processes 65536

#--------------------------------------------------------------
# Increase max cached process limit
#--------------------------------------------------------------
device_config put activity_manager max_cached_processes 65536

#--------------------------------------------------------------
# Increase max cached process timeout
#--------------------------------------------------------------
device_config put activity_manager max_empty_time_millis 360000000

#--------------------------------------------------------------
# Log script runtime
#--------------------------------------------------------------
current_date="$(date +%y.%m.%d.%H%M)"
setprop tether_performance_runtime "$current_date"

#--------------------------------------------------------------
# Add custom dotfiles for Termux
#--------------------------------------------------------------
dotfiles --termux

#--------------------------------------------------------------
# Add custom dotfiles for mksh
#--------------------------------------------------------------
dotfiles --mkshrc

#--------------------------------------------------------------
# Add custom dotfiles for bash
#--------------------------------------------------------------
dotfiles --bashrc

exit 0
EOF
	}
	package_main() {
		print_warning "Creating 'tether.$current_date' Magisk module"
		print_aligned "This may take a while\n"
		download_dnscrypt "$@"
		download_bash "$@"
		download_adb "$@"
		download_zip "$@"
		download_tether "$@"
		populate_dir "$@"
		create_module_prop "$@"
		create_customize "$@"
		# Populate font/ if custom font files exist
		[[ -f $tmp_dir/fonts/NotoSerif-Regular.ttf ]] && {
			mkdir -p "$package_tmp_dir/system/fonts" 2>/dev/null || print_write_error "$package_tmp_dir/system/fonts"
			cp -r $tmp_dir/fonts/*.ttf "$package_tmp_dir/system/fonts" 2>/dev/null
			create_post_fs "$@"
		}
		create_service "$@"
		# Add execute permissions
		chmod +x $package_tmp_dir/system/bin/*
		# update module version
		sed -i "s/version\=.*/version\=$current_date/" "$package_tmp_dir/module.prop"
		# update module description
		sed -i "s/description\=.*/description\=Installs $tether_version/" "$package_tmp_dir/module.prop"
		# Copy module files to tether/
		mkdir -p "$tmp_dir/tether" 2>/dev/null || print_write_error "$tmp_dir/tether"
		cp -rf $package_tmp_dir/* $tmp_dir/tether 2>/dev/null
		# Create magisk files
		mkdir -p "$tmp_dir/tether/META-INF/com/google/android" 2>/dev/null || print_write_error "$tmp_dir/tether/META-INF/com/google/android"
		echo "#MAGISK" > "$tmp_dir/tether/META-INF/com/google/android/updater-script"
		cat 2>/dev/null << "EOF" > "$tmp_dir/tether/META-INF/com/google/android/update-binary"
#!/sbin/sh

#################
# Initialization
#################

umask 022

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v20.4+! "
  ui_print "*******************************"
  exit 1
}

#########################
# Load util_functions.sh
#########################

OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

[ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
. /data/adb/magisk/util_functions.sh
[ $MAGISK_VER_CODE -lt 20400 ] && require_new_magisk

install_module
exit 0
EOF
		cd "$tmp_dir/tether"
		print_warning "Almost done"
		print_aligned "Creating archive file 'tether.$current_date.zip'\n"
		# Zip tether/ contents
		7z a -snl -snh -tzip -mx1 -mmt"$cpu_core_count" "tether.$current_date.zip" "*" &>/dev/null ||
		failed_to_create "$@"
		# Move module archive to external storage if available
		[[ -n $(ls -A "$external_storage" 2>/dev/null) ]] && {
			mkdir -p "$backup_dir" 2>/dev/null || print_write_error "$backup_dir"
			cp -rf "$tmp_dir/tether/tether.$current_date.zip" "$backup_dir" 2>/dev/null || print_file_write_error "$backup_dir/tether.$current_date.zip"
			print_success "Finished creating 'tether.$current_date.zip'"
			print_aligned "Check '$backup_dir'"
			rm -r "$package_tmp_dir" "$tmp_dir/tether" 2>/dev/null
			cd "$current_dir"
			exit 0
		}
		cp -rf "$tmp_dir/tether/tether.$current_date.zip" /sdcard 2>/dev/null || print_file_write_error "/sdcard/tether.$current_date.zip"
		print_success "Finished creating 'tether.$current_date.zip'"
		print_aligned "Check '/sdcard'"
		rm -r "$package_tmp_dir" "$tmp_dir/tether" 2>/dev/null
		cd "$current_dir"
		exit 0
	}
	trap 'remove_file_on_exit "$package_tmp_dir" "$tmp_dir/tether" ' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	package_main "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: mount, umount
#--------------------------------------------------------------
replace-su() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Replace phh-su with magisk in AOSP GSI"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Only run on Android >= 12
		[[ $android_version -le 11 ]] && {
			print_os_error
		}
		# Only run on treble GSI ROM
		[[ ! $(getprop init.svc.phh_on_boot) ]] && {
			print_os_error
		}
		# Check if magisk is installed
		[[ -f /system/bin/su && -f /system/bin/magisk ]] ||
		[[ ! -d /system/xbin ]] && {
			print_error "Magisk is already the default root solution"
			exit 1
		}
		# Check for required dependencies
		for mis_dep in mount umount; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Show magisk warning
		[[ $(magisk -V 2>/dev/null) -ge 26000 ]] && {
			print_error "magisk has to be uninstalled first"
			exit 1
		}
	}
	replace_root() {
		# mount /system as RW only work on vndk-lite variants
		mount -o remount,rw / &>/dev/null
		rm -r "/system/bin/phh-remotectl.sh" 2>/dev/null
		rm -r "/system/bin/phh-securize.sh" 2>/dev/null
		rm -r "/system/bin/phh-su" 2>/dev/null
		rm -r "/system/etc/init/su.rc" 2>/dev/null
		rm -r "/system/etc/init/phh-remotectl.rc" 2>/dev/null
		umount -lf /system/xbin &>/dev/null
		rm -r "/system/xbin" 2>/dev/null
		mount -o remount,ro / &>/dev/null
		print_success "PHH-SU has been deleted successfully"
		print_aligned "Reboot your device"
		exit 0
	}
	trap 'run_on_exit' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	replace_root "$@"
	exit
}

#--------------------------------------------------------------
# Platform: voidlinux
# Dependencies: xbps, ping, ls, sed, grep, ln
#--------------------------------------------------------------
setup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Post-installation setup utility for voidlinux"
		exit 0
	}
	check_dependencies() {
		[[ -d /system/app || ! -d /proc/1 ]] && print_os_error
		# Handles Linux desktop including Virtual Machines
		[[ -d /sys/class/kgsl || -d /sys/class/power_supply/battery || -d /proc/gpufreq ]] && print_os_error
		# Only run on Void linux
		source "/etc/os-release" 2>/dev/null
		[[ $PRETTY_NAME != "Void Linux" ]] && print_os_error
		[[ ! $(type -p xbps-install) ]] && print_missing_dependencies "xbps"
		# Only run as root-user
		print_not_root_user
		[[ ! $(ping -c4 voidlinux.org 2>/dev/null) ]] && {
			print_error "Network isn't ready yet"
			exit 1
		}
	}
	install_desktop() {
		desktop_kde() {
			xbps-install -Syu xbps void-repo-multilib kde5 dolphin kdegraphics-thumbnailers spectacle okular gwenview xorg sddm elisa papirus-icon-theme ffmpegthumbnailer noto-fonts-cjk &&
			sudo xbps-install -Syu &&
			# Add Dbus service
			ln -sf /etc/sv/dbus /var/service/
			# Remove conflicting desktop/session managers
			[[ -d /var/service/gdm ]] && {
				sv down gdm
				rm -r /var/service/gdm
			}
			[[ -d /var/service/lightdm ]] && {
				sv down lightdm
				rm -r /var/service/lightdm
			}
			# Disable acpid service
			[[ -d /var/service/acpid ]] && {
				sv down acpid
				rm -r /var/service/acpid
			}
			# Remove unnecessary ttys
			[[ -d /var/service/agetty-tty3 ]] && {
				sv down agetty-tty3
				sv down agetty-tty4
				sv down agetty-tty5
				sv down agetty-tty6
				rm -rf /var/service/agetty-tty3
				rm -rf /var/service/agetty-tty4
				rm -rf /var/service/agetty-tty5
				rm -rf /var/service/agetty-tty6
			}
			# Remove gnome tweaks/customizations for qt5 programs if present
			env_var_file="$(< /etc/environment)"
			[[ $env_var_file == *QT_QPA_PLATFORMTHEME* ]] && {
				sed -i 's|QT_QPA_PLATFORMTHEME=qt5ct||g' /etc/environment
				sed -i 's|QT_LOGGING_RULES="qt.svg*.warning=false"||g' /etc/environment
			}
			ln -sf /etc/sv/sddm /var/service/
		}
		desktop_gnome() {
			xbps-install -Syu xbps void-repo-multilib gnome-core gdm dbus xorg gnome-tweaks eog qt5ct rhythmbox fontmanager totem papirus-icon-theme ffmpegthumbnailer noto-fonts-cjk &&
			sudo xbps-install -Syu &&
			# Add Dbus service
			ln -sf /etc/sv/dbus /var/service/
			# Remove conflicting desktop/session managers
			[[ -d /var/service/sddm ]] && {
				sv down sddm
				rm -r /var/service/sddm
			}
			[[ -d /var/service/lightdm ]] && {
				sv down lightdm
				rm -r /var/service/lightdm
			}
			# Disable acpid service
			[[ -d /var/service/acpid ]] && {
				sv down acpid
				rm -r /var/service/acpid
			}
			# Remove unnecessary ttys
			[[ -d /var/service/agetty-tty3 ]] && {
				sv down agetty-tty3
				sv down agetty-tty4
				sv down agetty-tty5
				sv down agetty-tty6
				rm -rf /var/service/agetty-tty3
				rm -rf /var/service/agetty-tty4
				rm -rf /var/service/agetty-tty5
				rm -rf /var/service/agetty-tty6
			}
			# Enable tweaks/customizations for qt5 programs
			env_var_file="$(< /etc/environment)"
			[[ $env_var_file != *QT_QPA_PLATFORMTHEME* ]] && {
				echo -e "QT_QPA_PLATFORMTHEME=qt5ct" >> /etc/environment
				echo -e "QT_LOGGING_RULES=\"qt.svg*.warning=false\"" >> /etc/environment
			}
			# Fixes missing icon bug
			xbps-reconfigure -af
			# Start gdm
			ln -sf /etc/sv/gdm /var/service/
		}
		desktop_xfce() {
			xbps-install -Syu xbps void-repo-multilib pavucontrol dbus xorg xfce4 xfwm4 lightdm lightdm-gtk-greeter lightdm-gtk3-greeter lightdm-gtk-greeter-settings papirus-icon-theme ffmpegthumbnailer noto-fonts-cjk &&
			sudo xbps-install -Syu &&
			# Remove bloat
			xbps-remove -RFy xfce4-taskmanager mousepad &&
			# Add Dbus service
			ln -sf /etc/sv/dbus /var/service/
			# Remove conflicting desktop/session managers
			[[ -d /var/service/gdm ]] && {
				sv down gdm
				rm -r /var/service/gdm
			}
			[[ -d /var/service/sddm ]] && {
				sv down sddm
				rm -r /var/service/sddm
			}
			# Disable acpid service
			[[ -d /var/service/acpid ]] && {
				sv down acpid
				rm -r /var/service/acpid
			}
			# Remove unnecessary ttys
			[[ -d /var/service/agetty-tty3 ]] && {
				sv down agetty-tty3
				sv down agetty-tty4
				sv down agetty-tty5
				sv down agetty-tty6
				rm -rf /var/service/agetty-tty3
				rm -rf /var/service/agetty-tty4
				rm -rf /var/service/agetty-tty5
				rm -rf /var/service/agetty-tty6
			}
			ln -sf /etc/sv/lightdm /var/service/
		}
		desktop_cinnamon() {
			xbps-install -Syu xbps void-repo-multilib pavucontrol dbus xorg cinnamon lightdm lightdm-gtk-greeter lightdm-gtk3-greeter lightdm-gtk-greeter-settings papirus-icon-theme ffmpegthumbnailer noto-fonts-cjk &&
			sudo xbps-install -Syu &&
			# Add Dbus service
			ln -sf /etc/sv/dbus /var/service/
			# Remove conflicting desktop/session managers
			[[ -d /var/service/gdm ]] && {
				sv down gdm
				rm -r /var/service/gdm
			}
			[[ -d /var/service/sddm ]] && {
				sv down sddm
				rm -r /var/service/sddm
			}
			# Disable acpid service
			[[ -d /var/service/acpid ]] && {
				sv down acpid
				rm -r /var/service/acpid
			}
			# Remove unnecessary ttys
			[[ -d /var/service/agetty-tty3 ]] && {
				sv down agetty-tty3
				sv down agetty-tty4
				sv down agetty-tty5
				sv down agetty-tty6
				rm -rf /var/service/agetty-tty3
				rm -rf /var/service/agetty-tty4
				rm -rf /var/service/agetty-tty5
				rm -rf /var/service/agetty-tty6
			}
			ln -sf /etc/sv/lightdm /var/service/
		}
	}
	install_gpu_drivers() {
		intel_drivers() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			# Enable non-free repo
			xbps-install -Syu void-repo-nonfree &&
			# Install microcode-updates and undervolt software
			xbps-install -Syu linux-firmware-intel mesa-dri mesa-dri-32bit vulkan-loader mesa-vulkan-intel intel-video-accel xf86-video-intel
			sysctl_file="$(< /etc/sysctl.conf)"
			[[ $sysctl_file != *dev.i915.perf_stream_paranoid* ]] && {
				echo -e "dev.i915.perf_stream_paranoid = 0" >> /etc/sysctl.conf
			}
			xbps-install -Syu intel-ucode
		}
		amd_drivers() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu linux-firmware-amd mesa-dri mesa-dri-32bit vulkan-loader mesa-vulkan-radeon amdvlk xf86-video-amdgpu xf86-video-ati mesa-vaapi mesa-vdpau
		}
	}
	install_audio() {
		pulse_audio() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu pulseaudio
		}
		alsa_utils() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu alsa-utils apulse &&
			ln -sf /etc/sv/alsa /var/service &&
			usermod -aG audio "$SUDO_USER"
		}
		pipe_wire() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu pipewire wireplumber libspa-bluetooth
		}
	}
	install_terminal() {
		install_urxvt() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu rxvt-unicode
			# Create vim file association
			mkdir -p /home/"$SUDO_USER"/.local/share/applications || print_write_error "/home/"$SUDO_USER"/.local/share/applications"
			chown -R "$SUDO_USER":"$SUDO_USER" /home/"$SUDO_USER"/.local/ 2>/dev/null
			cat 2>/dev/null << "EOF" > /home/"$SUDO_USER"/.local/share/applications/vim.desktop
[Desktop Entry]
Version=1.0
Name=vim
Comment=Screen-based text editor program
Exec=urxvt -e vim %f
Icon=konsole
Type=Application
MimeType=text/plain;
EOF
			chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.local/share/applications/vim.desktop 2>/dev/null
			# Change uxrvt app/file icon
			[[ $(< /usr/share/applications/rxvt-unicode.desktop) != *konsole* ]] && {
				sed -i 's|Icon=rxvt-unicode|Icon=konsole|g' /usr/share/applications/rxvt-unicode.desktop
			}
			# Create custom Xresources
			print_xresources "$@"
		}
		install_kitty() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu kitty
			# Create vim file association
			mkdir -p /home/"$SUDO_USER"/.local/share/applications || print_write_error "/home/"$SUDO_USER"/.local/share/applications"
			chown -R "$SUDO_USER":"$SUDO_USER" /home/"$SUDO_USER"/.local/ 2>/dev/null
			cat 2>/dev/null << "EOF" > /home/"$SUDO_USER"/.local/share/applications/vim.desktop
[Desktop Entry]
Version=1.0
Name=vim
Comment=Screen-based text editor program
Exec=kitty -e vim %f
Icon=kitty
Type=Application
MimeType=text/plain;
EOF
			chown "${SUDO_USER:=$USER}":"${SUDO_USER:=$USER}" /home/"${SUDO_USER:=$USER}"/.local/share/applications/vim.desktop 2>/dev/null
			# Create custom Xresources
			print_kitty "$@"
		}
	}
	install_extras() {
		# Disble ssh server
		[[ -d /var/service/sshd ]] && {
			sv down sshd
			rm -r /var/service/sshd
		}
		# Update xbps and enable multi-lib repo
		xbps-install -Syu xbps void-repo-multilib &&
		# Install useful GUI software
		xbps-install -Syu nicotine+ qbittorrent tageditor libreoffice krita &&
		# Install gaming software
		xbps-install -Syu wine wine-32bit libwine libwine-32bit wine-mono winetricks
	}
	install_dev_software() {
		# Update xbps and enable multi-lib repo
		xbps-install -Syu xbps void-repo-multilib &&
		# Install development software
		xbps-install -Syu tmux bash-completion gcc git rust cargo
		# Incase no vim-huge exists i.e on ARM systems
		xbps-install -Syu vim-huge
		# Install Android specific tools
		xbps-install -Syu android-tools android-udev-rules gvfs gvfs-mtp &&
		# Install useful CLI software
		xbps-install -Syu smartmontools unzip bsdtar wget bc ldns ntfs-3g udftools man 7zip libhwloc &&
		# Required for ADB and fastboot
		usermod -aG plugdev "$SUDO_USER"
		# Update man pages
		makewhatis /usr/share/man
	}
	install_dotfiles() {
		# Create custom bashrc
		print_bashrc "$@"
		# Create custom vimrc
		print_vimrc "$@"
		# Create custom vim colorscheme
		print_vim_color "$@"
		# Create custom tmux.conf
		print_tmux_conf "$@"
		# Make symbolic links to dotfiles
		[[ -f /home/"$SUDO_USER"/.bashrc ]] && {
			ln -sf /home/"$SUDO_USER"/.bashrc /root
		}
		[[ -f /home/"$SUDO_USER"/.tmux.conf ]] && {
			ln -sf /home/"$SUDO_USER"/.tmux.conf /root
		}
		[[ -f /home/"$SUDO_USER"/.vimrc ]] && {
			ln -sf /home/"$SUDO_USER"/.vimrc /root
		}
		echo "Done"
		echo "Run 'source /home/${SUDO_USER}/.bashrc' to reload shell"
	}
	install_browser() {
		chromium() {
			sudo xbps-install -Syu chromium
		}
		firefox() {
			sudo xbps-install -Syu firefox
		}
	}
	install_media_player() {
		vlc() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			sudo xbps-install -Syu vlc
		}
		mpv() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			sudo xbps-install -Syu mpv
		}
	}
	install_vm() {
		# Update xbps and enable multi-lib repo
		xbps-install -Syu xbps void-repo-multilib &&
		xbps-install -Syu virt-manager qemu &&
		ln -sf /etc/sv/libvirtd /var/service/ &&
		ln -sf /etc/sv/virtlockd /var/service/ &&
		ln -sf /etc/sv/virtlogd /var/service/ &&
		usermod -aG libvirt "$SUDO_USER"
	}
	install_printer_drivers() {
		hp_printer() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			xbps-install -Syu cups hplip xsane cups-filters &&
			ln -sf /etc/sv/cupsd /var/service/
		}
		brother_printer() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			sudo xbps-install -Syu cups cups-filters brother-brlaser xsane &&
			ln -sf /etc/sv/cupsd /var/service/
		}
		epson_printer() {
			# Update xbps and enable multi-lib repo
			xbps-install -Syu xbps void-repo-multilib &&
			sudo xbps-install -Syu cups cups-filters epson-inkjet-printer-escpr imagescan iscan-data &&
			ln -sf /etc/sv/cupsd /var/service/
		}
	}
	change_timezone() {
		# Set Timezone
		zone_count=1
		# Show available timezone files
		for zone_files in /usr/share/zoneinfo/*; do
			[[ -d $zone_files && ${zone_files##*/} != posix && ${zone_files##*/} != right ]] && {
				printf "${zone_count}.${zone_files##*/}  "
				time_zone[$zone_count]="$zone_files"
				zone_count=$((zone_count + 1))
			}
		done
		echo -e "\n"
		# Read user input
		read -rep "Select Timezone: " tz_option
		echo ""
		# Handles invalid user input
		[[ -z $tz_option ]] && {
			print_error "Timezone string cannot be empty" &&
			exit 1
		}
		case "$tz_option" in
			-*)
				echo ""
				[[ -z ${tz_option#*\-} || -z ${tz_option/\-\-*} ]] && {
					print_error "Invalid option '${tz_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${tz_option#*\-}'" &&
				exit 1
			;;
			*)
				# List subzones in user selection
				[[ $tz_option -ge 1 && $tz_option -le $zone_count ]] && {
					# List subzones files
					zone_count=1
					for sub_zone_files in ${time_zone[$tz_option]}/*; do
						printf "${zone_count}.${sub_zone_files##*/}  "
						sub_zone[$zone_count]="$sub_zone_files"
						zone_count=$((zone_count + 1))
					done
					echo -e "\n"
					# Read user input
					read -rep "Select Region: " tz_locale
					echo ""
					# If location in user selection is defined
					[[ -f ${sub_zone[$tz_locale]} && $tz_locale -ge 1 && $tz_locale -le $zone_count ]] && {
						ln -sf "/usr/share/zoneinfo/${time_zone[$tz_option]##*/}/${sub_zone[$tz_locale]##*/}" "/etc/localtime" 2>/dev/null &&
						return 0
					}
					# If location in user selection has sublocation
					[[ -d ${sub_zone[$tz_locale]} && $tz_locale -ge 1 && $tz_locale -le $zone_count ]] && {
						# List all sublocale files
						zone_count=1
						for sub_region_files in ${sub_zone[$tz_locale]}/*; do
							printf "${zone_count}.${sub_region_files##*/}  "
							sub_region[$zone_count]="$sub_region_files"
							zone_count=$((zone_count + 1))
						done
						echo -e "\n"
						# Read user input
						read -rep "Select Location: " sub_locale
						echo ""
						# If location in user selection is defined
						[[ -f ${sub_region[$sub_locale]} && $sub_locale -ge 1 && $sub_locale -le $zone_count ]] && {
							ln -sf "/usr/share/zoneinfo/${time_zone[$tz_option]##*/}/${sub_zone[$tz_locale]##*/}/${sub_region[$sub_locale]##*/}" "/etc/localtime" 2>/dev/null &&
							return 0
						}
						# Handles invalid user input
						[[ -z $sub_locale ]] && {
							print_error "Location string cannot be empty" &&
							exit 1
						}
						[[ $sub_locale -lt 1 || $sub_locale -gt $zone_count ]] && {
							print_error "Invalid option '${sub_locale}'" &&
							exit 1
						}
					}
					# Handles invalid user input
					[[ -z $tz_locale ]] && {
						print_error "Region string cannot be empty" &&
						exit 1
					}
					[[ $tz_locale -lt 1 || $tz_locale -gt $zone_count ]] && {
						print_error "Invalid option '${tz_locale}'" &&
						exit 1
					}
				}
				[[ $tz_option -lt 1 || $tz_option -gt $zone_count ]] && {
					print_error "Invalid option '${tz_option}'" &&
					exit 1
				}
			;;
		esac
	}
	install_backlight_control() {
		init_program="$(< /proc/1/status)"
		init_program="${init_program/*Name:}"
		init_program="${init_program/Umask:*}"
		init_program="${init_program//[[:space:]]}"
		[[ $init_program != "runit" ]] && {
			return 1
		}
		[[ ! -f /sys/class/power_supply/BAT0/capacity ]] && {
			error_check="no_battery"
			return 1
		}
		[[ $init_program == "runit" ]] && {
			# Add automatic backlight control to runsvdir
			mkdir -p /var/service/backlight
			cat << "EOF" > /var/service/backlight/run
#!/bin/env bash

# Simple script to adjust system backlight automatically

unset system_set

while :; do
	for device_name in /sys/class/backlight/*; do
		[[ -f $device_name/brightness ]] && {
			# Current brightness level
			cur_value="$(< $device_name/brightness)"
			# Battery percentage
			bat_capacity="$(< /sys/class/power_supply/BAT0/capacity)"
			# Battery status
			bat_status="$(< /sys/class/power_supply/BAT0/status)"
			# Handles battery when unplugged and <= 30%
			[[ $bat_status == "Discharging" && $bat_capacity -le 30 ]] && {
				# Prevent changing current brightness level, in case user increases it manually
				[[ $cur_value -eq 77 || $system_set -eq 1 ]] && {
					system_set=1
					break
				}
				# Set backlight to 30%
				echo "77" > "$device_name/brightness"
				# Turn off keyboard backlight to save power
				for kbd in /sys/class/leds/*kbd_backlight; do
					[[ -f $kbd ]] && {
						echo "0" > "$kbd/brightness"
					}
				done
				system_set=1
			}
			# Handles battery when unplugged and > 30%
			[[ $bat_status == "Discharging" && $bat_capacity -gt 30 ]] && {
				# Prevent changing current brightness level, in case user increases it manually
				[[ $cur_value -eq 128 || $system_set -eq 2 ]] && {
					system_set=2
					break
				}
				# Set backlight to 50%
				echo "128" > "$device_name/brightness"
				system_set=2
			}
			# Handles battery when plugged in or battery is 100%
			[[ $bat_status == "Full" || $bat_status == "Charging" ]] && {
				# Prevent changing current brightness level, in case user increases it manually
				[[ $cur_value -eq 179 || $system_set -eq 3 ]] && {
					system_set=3
					break
				}
				# Set backlight to 70%
				echo "179" > "$device_name/brightness"
				system_set=3
			}
		}
	done
	# Poll for changes
	read -rt "2" <> <(:) || :
done
EOF
			chmod +x /var/service/backlight/run &&
			echo "Done"
		}
	}
	install_networking() {
		# Update xbps and enable multi-lib repo
		xbps-install -Syu xbps void-repo-multilib &&
		xbps-install -Syu git dnscrypt-proxy NetworkManager bluez
		[[ -d /var/service/dhcpcd ]] && {
			sv down dhcpcd
			rm -r /var/service/dhcpcd
		}
		[[ -d /var/service/wpa_supplicant ]] && {
			sv down wpa_supplicant
			rm -r /var/service/wpa_supplicant
		}
		# Network Manager
		[[ ! -d /var/service/NetworkManager ]] && {
			ln -sf /etc/sv/NetworkManager /var/service/
		}
		# Bluetooth
		[[ ! -d /var/service/bluetoothd ]] && {
			ln -sf /etc/sv/bluetoothd /var/service/
		}
		usermod -aG bluetooth "$SUDO_USER"
		# Dnscrypt-proxy
		mkdir -p /etc/dnscrypt-proxy
		git clone "https://github.com/teth3r/blocklist" &&
		cp -rf blocklist/*.txt /etc/dnscrypt-proxy &&
		cp -rf blocklist/*.toml /etc/dnscrypt-proxy &&
		rm -r blocklist &&
		# Force TCP usage for connecting to upstream resolvers 
		sed -i 's/force_tcp\ =\ false/force_tcp\ =\ true/' /etc/dnscrypt-proxy/dnscrypt-proxy.toml
		chown -R "$SUDO_USER":"$SUDO_USER" /etc/dnscrypt-proxy 2>/dev/null
		# Make resolv.conf immutable
		chattr -i /etc/resolv.conf
		echo "nameserver 127.0.0.1" > /etc/resolv.conf
		chattr +i /etc/resolv.conf
		[[ ! -d /var/service/dnscrypt-proxy ]] && {
			ln -sf /etc/sv/dnscrypt-proxy /var/service/
		} || sv up dnscrypt-proxy
	}
	get_user_options() {
		print_banner
		print_warning "Setting up Voidlinux"
		# Handles DE Installation
		echo -e "\nInstall Desktop Environment: \n1.KDE \n2.Gnome \n3.Xfce \n4.Cinnamon \n5.Skip \n6.Exit\n"
		read -rep "Select Desktop: " de_option
		case "$de_option" in
			1)
				echo ""
				print_warning "Installing KDE\n"
				install_desktop && desktop_kde && error_check="desktop" &&
				echo "" &&
				print_success "Finished installing KDE"
			;;
			2)
				echo ""
				print_warning "Installing Gnome\n"
				install_desktop && desktop_gnome && error_check="desktop" &&
				echo "" &&
				print_success "Finished installing Gnome"
			;;
			3)
				echo ""
				print_warning "Installing Xfce\n"
				install_desktop && desktop_xfce && error_check="desktop" &&
				echo "" &&
				print_success "Finished installing Xfce"
			;;
			4)
				echo ""
				print_warning "Installing Cinnamon\n"
				install_desktop && desktop_cinnamon && error_check="desktop" &&
				echo "" &&
				print_success "Finished installing Cinnamon"
			;;
			5)
				echo ""
				print_warning "Skipping Desktop Environment Installation"
				error_check="desktop"
			;;
			6)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${de_option#*\-} || -z ${de_option/\-\-*} ]] && {
					print_error "Invalid option '${de_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${de_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${de_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "desktop" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install Desktop Environment"
			exit 1
		}
		# Handles GPU Driver Installation
		echo -e "\nInstall GPU Drivers: \n1.Intel \n2.AMD/radeon \n3.Skip \n4.Exit\n"
		read -rep "Select GPU: " gpu_option
		case "$gpu_option" in
			1)
				echo ""
				print_warning "Installing Intel GPU Drivers\n"
				install_gpu_drivers && intel_drivers && error_check="gpu" &&
				echo "" &&
				print_success "Finished installing Intel GPU Drivers"
			;;
			2)
				echo ""
				print_warning "Installing AMD GPU Drivers\n"
				install_gpu_drivers && amd_drivers && error_check="gpu" &&
				echo "" &&
				print_success "Finished installing AMD GPU Drivers"
			;;
			3)
				echo ""
				print_warning "Skipping GPU Driver Installation"
				error_check="gpu"
			;;
			4)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${gpu_option#*\-} || -z ${gpu_option/\-\-*} ]] && {
					print_error "Invalid option '${gpu_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${gpu_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${gpu_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "gpu" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install GPU drivers"
			exit 1
		}
		# Handles VM Software Installation
		echo -e "\nInstall VM Software (qemu, virt-manager): \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " vm_option
		case "$vm_option" in
			1)
				echo ""
				print_warning "Installing Virtual Machine software\n"
				install_vm && error_check="vm" &&
				echo "" &&
				print_success "Finished installing Virtual Machine software"
			;;
			2)
				echo ""
				print_warning "Skipping VM Software Installation"
				error_check="vm"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${vm_option#*\-} || -z ${vm_option/\-\-*} ]] && {
					print_error "Invalid option '${vm_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${vm_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${vm_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "vm" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install VM software"
			exit 1
		}
		# Handles Printer Software Installation
		echo -e "\nInstall Printer Software: \n1.HP \n2.Epson \n3.Brother \n4.Skip \n5.Exit\n"
		read -rep "Select Printer: " printer_option
		case "$printer_option" in
			1)
				echo ""
				print_warning "Installing HP Printer Software\n"
				install_printer_drivers && hp_printer && error_check="printer" &&
				echo "" &&
				print_success "Finished installing HP Printer software"
			;;
			2)
				echo ""
				print_warning "Installing Epson Printer Software\n"
				install_printer_drivers && epson_printer && error_check="printer" &&
				echo "" &&
				print_success "Finished installing Epson Printer software"
			;;
			3)
				echo ""
				print_warning "Installing Brother Printer Software\n"
				install_printer_drivers && brother_printer && error_check="printer" &&
				echo "" &&
				print_success "Finished installing Brother Printer software"
			;;
			4)
				echo ""
				print_warning "Skipping Printer Software Installation"
				error_check="printer"
			;;
			5)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${printer_option#*\-} || -z ${printer_option/\-\-*} ]] && {
					print_error "Invalid option '${printer_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${printer_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${printer_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "printer" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install printer software"
			exit 1
		}
		# Handles Audio Software Installation
		echo -e "\nInstall Audio Software: \n1.Pulseaudio \n2.ALSA \n3.Pipewire \n4.Skip \n5.Exit\n"
		read -rep "Select Audio: " audio_option
		case "$audio_option" in
			1)
				echo ""
				print_warning "Installing Pulseaudio\n"
				install_audio && pulse_audio && error_check="audio" &&
				echo "" &&
				print_success "Finished installing Pulseaudio"
			;;
			2)
				echo ""
				print_warning "Installing ALSA\n"
				install_audio && alsa_utils && error_check="audio" &&
				echo "" &&
				print_success "Finished installing ALSA"
			;;
			3)
				echo ""
				print_warning "Installing Pipewire\n"
				install_audio && pipe_wire && error_check="audio" &&
				echo "" &&
				print_success "Finished installing Pipewire"
			;;
			4)
				echo ""
				print_warning "Skipping Audio Software Installation"
				error_check="audio"
			;;
			5)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${audio_option#*\-} || -z ${audio_option/\-\-*} ]] && {
					print_error "Invalid option '${audio_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${audio_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${audio_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "audio" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install audio software"
			exit 1
		}
		# Handles Terminal Software Installation
		echo -e "\nInstall Terminal: \n1.Urxvt \n2.Kitty \n3.Skip \n4.Exit\n"
		read -rep "Select Terminal: " term_option
		case "$term_option" in
			1)
				echo ""
				print_warning "Installing Urxvt\n"
				install_terminal && install_urxvt && error_check="terminal" &&
				echo "" &&
				print_success "Finished installing Urxvt"
			;;
			2)
				echo ""
				print_warning "Installing Kitty\n"
				install_terminal && install_kitty && error_check="terminal" &&
				echo "" &&
				print_success "Finished installing Kitty"
			;;
			3)
				echo ""
				print_warning "Skipping Terminal Installation"
				error_check="terminal"
			;;
			4)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${term_option#*\-} || -z ${term_option/\-\-*} ]] && {
					print_error "Invalid option '${term_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${term_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${term_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "terminal" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install terminal"
			exit 1
		}
		# Handles Extra Software Installation
		echo -e "\nInstall Extra/Misc Software (krita, libreoffice, wine): \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " extras_option
		case "$extras_option" in
			1)
				echo ""
				print_warning "Installing Extra/Misc Software\n"
				install_extras && error_check="extras" &&
				echo "" &&
				print_success "Finished installing Extra/Misc software"
			;;
			2)
				echo ""
				print_warning "Skipping Extra/Misc Software Installation"
				error_check="extras"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${extras_option#*\-} || -z ${extras_option/\-\-*} ]] && {
					print_error "Invalid option '${extras_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${extras_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${extras_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "extras" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install extra/misc software"
			exit 1
		}
		# Handles Development Software Installation
		echo -e "\nInstall Development Software (gcc, rust, cargo, vim): \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " dev_option
		case "$dev_option" in
			1)
				echo ""
				print_warning "Installing Development Software\n"
				install_dev_software && error_check="development" &&
				echo "" &&
				print_success "Finished installing development software"
			;;
			2)
				echo ""
				print_warning "Skipping Development Software Installation"
				error_check="development"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${dev_option#*\-} || -z ${dev_option/\-\-*} ]] && {
					print_error "Invalid option '${dev_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${dev_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${dev_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "development" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install development software"
			exit 1
		}
		# Handles Dotfiles Installation
		echo -e "\nInstall Dotfiles (bash, tmux, vim, urxvt): \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " dotfiles_option
		case "$dotfiles_option" in
			1)
				echo ""
				print_warning "Installing Dotfiles\n"
				install_dotfiles && error_check="dotfiles" &&
				echo "" &&
				print_success "Finished installing Dotfiles"
			;;
			2)
				echo ""
				print_warning "Skipping Dotfiles Installation"
				error_check="dotfiles"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${dotfiles_option#*\-} || -z ${dotfiles_option/\-\-*} ]] && {
					print_error "Invalid option '${dotfiles_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${dotfiles_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${dotfiles_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "dotfiles" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install dotfiles"
			exit 1
		}
		# Handles Browser Installation
		echo -e "\nInstall Browser Software: \n1.Chromium \n2.Firefox \n3.Skip \n4.Exit\n"
		read -rep "Select Browser: " browser_option
		case "$browser_option" in
			1)
				echo ""
				print_warning "Installing Chromium\n"
				install_browser && chromium && error_check="browser" &&
				echo "" &&
				print_success "Finished installing Chromium"
			;;
			2)
				echo ""
				print_warning "Installing Firefox\n"
				install_browser && firefox && error_check="browser" &&
				echo "" &&
				print_success "Finished installing Firefox"
			;;
			3)
				echo ""
				print_warning "Skipping Browser Software Installation"
				error_check="browser"
			;;
			4)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${browser_option#*\-} || -z ${browser_option/\-\-*} ]] && {
					print_error "Invalid option '${browser_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${browser_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${browser_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "browser" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install browser software"
			exit 1
		}
		# Handles Media-Player Installation
		echo -e "\nInstall Media-Player Software: \n1.VLC \n2.MPV \n3.Skip \n4.Exit\n"
		read -rep "Select Media-Player: " media_player_option
		case "$media_player_option" in
			1)
				echo ""
				print_warning "Installing VLC\n"
				install_media_player && vlc && error_check="media_player" &&
				echo "" &&
				print_success "Finished installing VLC"
			;;
			2)
				echo ""
				print_warning "Installing MPV\n"
				install_media_player && mpv && error_check="media_player" &&
				echo "" &&
				print_success "Finished installing MPV"
			;;
			3)
				echo ""
				print_warning "Skipping Media-Player Software Installation"
				error_check="media_player"
			;;
			4)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${media_player_option#*\-} || -z ${media_player_option/\-\-*} ]] && {
					print_error "Invalid option '${media_player_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${media_player_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${media_player_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "media_player" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install media-player software"
			exit 1
		}
		# Handles Setting timezone
		echo -e "\nChange Default Timezone: \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " time_zone_option
		case "$time_zone_option" in
			1)
				echo ""
				print_warning "Changing Timezone\n"
				change_timezone && error_check="timezone" &&
				print_success "Finished Changing Timezone"
			;;
			2)
				echo ""
				print_warning "Skipping Timezone Change"
				error_check="timezone"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${time_zone_option#*\-} || -z ${time_zone_option/\-\-*} ]] && {
					print_error "Invalid option '${time_zone_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${time_zone_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${time_zone_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "timezone" ]] && {
			print_error "Something went wrong"
			print_aligned "Couldn't change default timezone"
			exit 1
		}
		# Handles Automatic Backlight Control
		echo -e "\nInstall Automatic Backlight Control: \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " auto_backlight_option
		case "$auto_backlight_option" in
			1)
				echo ""
				print_warning "Installing Automatic Backlight Control\n"
				install_backlight_control && error_check="auto_backlight" &&
				echo "" &&
				print_success "Finished installing Automatic Backlight Control"
			;;
			2)
				echo ""
				print_warning "Skipping Automatic Backlight Control"
				error_check="auto_backlight"
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${auto_backlight_option#*\-} || -z ${auto_backlight_option/\-\-*} ]] && {
					print_error "Invalid option '${auto_backlight_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${auto_backlight_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${auto_backlight_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check == "no_battery" ]] && {
			echo ""
			print_error "Battery not installed"
			exit 1
		}
		[[ $error_check != "auto_backlight" ]] && {
			echo ""
			print_error "Unsupported init detected"
			print_aligned "Couldn't install automatic backlight control"
			exit 1
		}
		# Handles Networking Software Installation
		echo -e "\nInstall Networking Software: \n1.Yes \n2.Skip \n3.Exit\n"
		read -rep "Select option: " network_option
		case "$network_option" in
			1)
				echo ""
				print_warning "Installing Networking Software\n"
				install_networking && error_check="network" &&
				echo "" &&
				print_success "Finished setting up void linux"
			;;
			2)
				echo ""
				print_warning "Skipping Networking Software Installation\n"
				print_error "Nothing left to do, exiting"
				error_check="network"
				exit 1
			;;
			3)
				run_on_exit
			;;
			-*)
				echo ""
				[[ -z ${network_option#*\-} || -z ${network_option/\-\-*} ]] && {
					print_error "Invalid option '${network_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${network_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				print_error "Invalid option '${network_option}'" &&
				exit 1
			;;
		esac
		[[ $error_check != "network" ]] && {
			echo ""
			print_error "Something went wrong"
			print_aligned "Couldn't install networking software"
			exit 1
		}
	}
	trap 'run_on_exit' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	get_user_options "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: bash
#--------------------------------------------------------------
tfetch() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "System resource information tool"
		exit 0
	}
	check_dependencies() {
		# Source Linux OS details
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			source "/etc/os-release" 2>/dev/null ||
			print_file_read_error "/etc/os-release"
		}
		# Source files once to reduce runtime
		cpu_file="$(< /proc/cpuinfo)"
		mem_file="$(< /proc/meminfo)"
		# Declare colors
		color_blue="\033[1;34m"
		color_magenta="\033[1;35m"
		color_cyan="\033[1;36m"
		color_white="\033[1;97m"
		no_color="\033[00m"
		# Fixes empty $USER in non-root termux
		[[ -z $USER ]] && {
			: '\u'
			USER="${_@P}"
		}
	}
	get_hostname() {
		[[ $USER == "shell" || $EUID -eq 2000 ]] && {
			echo -e " ${color_cyan}$HOSTNAME@$USER${no_color}"
			color_blue=$color_cyan &&
			return 0
		}
		[[ $USER == "root" || $EUID -eq 0 ]] && {
			echo -e " ${color_magenta}$HOSTNAME@$USER${no_color}"
			color_blue=$color_magenta &&
			return 0
		}
		[[ $EUID -eq 1000 ]] || [[ $USER != root && $USER != shell ]] && {
			echo -e " ${color_blue}$HOSTNAME@$USER${no_color}"
			return 0
		}
	}
	get_device_name() {
		[[ -f /sys/firmware/devicetree/base/model ]] && {
			IFS= read -r -d '' device_name < /sys/firmware/devicetree/base/model
		}
		[[ -f /proc/device-tree/model ]] && {
			IFS= read -r -d '' device_name < /proc/device-tree/model
		}
		[[ -d /sys/devices/virtual/dmi/id ]] && {
			device_name="$(< /sys/devices/virtual/dmi/id/board_vendor)"
			device_name="${device_name} $(< /sys/devices/virtual/dmi/id/product_name)"
		}
		echo -e "$device_name\n"
	}
	get_os_name() {
		# Handles Android
		[[ -d /system/app/ ]] && {
			echo "Android $android_version $HOSTTYPE"
		}
		# Handles non-Android OS
		[[ ! -d /system/app/ ]] && {
			echo "$PRETTY_NAME $HOSTTYPE"
		}
	}
	get_kernel() {
		kernel_version="$(< /proc/version)"
		kernel_version="${kernel_version/\(*}"
		kernel_version="${kernel_version/version\ }"
		echo "$kernel_version"
	}
	get_init() {
		# Handles proper systems
		[[ -d /proc/1 ]] && {
			init_program="$(< /proc/1/status)"
			init_program="${init_program/*Name:}"
			init_program="${init_program/Umask:*}"
			init_program="${init_program//[[:space:]]}"
			echo -e "$init_program"
		}
		# Handles android chroot
		[[ -z $init_program && $PRETTY_NAME == *Linux* && -d /sys/class/power_supply/battery ]] && {
			echo "init"
		}
	}
	get_pkgs() {
		# Handles Linux with xbps
		[[ $(type -p xbps-install) ]] && {
			package_count="0"
			for package_list in /var/db/xbps/.*; do
				package_count="$((package_count + 1))"
			done
			echo "${package_count//[[:space:]]} xbps"
		}
		# Handles Linux with apt
		[[ $(type -p apt) || $(type -p apt-get) ]] && {
			package_count="0"
			for package_list in /var/lib/dpkg/info/*.md5sums; do
				package_count="$((package_count + 1))"
			done
			echo "${package_count//[[:space:]]} apt"
		}
		# Handles Android
		[[ -d /config/sdcardfs && -d /system/app ]] && {
			package_count="0"
			for package_list in /config/sdcardfs/*/; do
				[[ $package_list != /config/sdcardfs/extensions/ ]] && {
					package_count="$((package_count + 1))"
				}
			done
			echo "${package_count//[[:space:]]} apks"
		}
	}
	get_shell() {
		[[ -n $BASH ]] && echo -e "${BASH##*/} ${BASH_VERSION/-*}"
		[[ -z $BASH ]] && echo -e "${SHELL##*/}"
	}
	get_desktop() {
		desktop_environment="${XDG_CURRENT_DESKTOP:=$DESKTOP_SESSION}"
		[[ -n ${desktop_environment//[[:space:]]} && -z $XDG_SESSION_TYPE ]] && {
			echo -e "${desktop_environment}"
		}
		[[ -n ${desktop_environment//[[:space:]]} && -n $XDG_SESSION_TYPE ]] && {
			echo -e "${desktop_environment} (${XDG_SESSION_TYPE})"
		}
	}
	get_cpu() {
		# Handles Android devices
		[[ -d /sys/class/power_supply/battery ]] && {
			cpu_name="$cpu_file"
			cpu_name="${cpu_name/*Hardware}"
			cpu_name="${cpu_name/*: }"
			cpu_cores="$cpu_file"
			cpu_cores="${cpu_cores/*processor}"
			cpu_cores="${cpu_cores/BogoMIPS*}"
			cpu_cores="${cpu_cores/:}"
			cpu_cores="${cpu_cores//[[:space:]]}"
			cpu_cores="$((cpu_cores + 1))"
		}
		# Handles Intel CPUs
		[[ -d /sys/class/power_supply/BAT0 ]] || [[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] || [[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
			cpu_name="$cpu_file"
			cpu_name="${cpu_name/*model name}"
			cpu_name="${cpu_name/ @ *}"
			cpu_name="${cpu_name/*: }"
			cpu_cores="$cpu_file"
			cpu_cores="${cpu_cores/*cpu cores}"
			cpu_cores="${cpu_cores/apicid*}"
			cpu_cores="${cpu_cores/:}"
			cpu_cores="${cpu_cores//[[:space:]]}"
		}
		# Handles AMD CPUs
		[[ $cpu_file == *AuthenticAMD* ]] && {
			cpu_name="$cpu_file"
			cpu_name="${cpu_name/*model name}"
			cpu_name="${cpu_name/stepping*}"
			cpu_name="${cpu_name/*: }"
			cpu_name="${cpu_name%[[:space:]]}"
			cpu_cores="$cpu_file"
			cpu_cores="${cpu_cores/*cpu cores}"
			cpu_cores="${cpu_cores/apicid*}"
			cpu_cores="${cpu_cores/:}"
			cpu_cores="${cpu_cores//[[:space:]]}"
		}
		# Get CPU clockspeed
		cpu_clock_speed="$(< /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq)"
		cpu_clock_speed="$((cpu_clock_speed / 1000))"
		# Handles Linux desktop
		[[ $cpu_file == *AuthenticAMD* || -d /sys/class/power_supply/BAT0 ]] || [[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] || [[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
			echo -e "${cpu_name} (${cpu_cores}) @ ${cpu_clock_speed}Mhz"
		}
		# Handles Android with Mediatek CPUs
		[[ -d /sys/class/power_supply/battery && ! -d /sys/class/kgsl/kgsl-3d0 ]] && {
			echo -e "${cpu_name} (${cpu_cores}) @ ${cpu_clock_speed}Mhz"
		}
		# Handles Android with Snapdragon CPUs
		[[ -d /sys/class/kgsl/kgsl-3d0 ]] && {
			cpu_clock_speed="$(< /sys/devices/system/cpu/cpu$((cpu_core_count - 1))/cpufreq/scaling_cur_freq)"
			cpu_clock_speed="$((cpu_clock_speed / 1000))"
			echo -e "${cpu_name} (${cpu_cores}) @ ${cpu_clock_speed}Mhz"
		}
	}
	get_cpu_clusters() {
		array_counter=1
		for cpu_cluster in /sys/devices/system/cpu/cpufreq/policy*; do
			# Create Array containing clockspeed of each CPU cluster
			cluster_clock_speed[$array_counter]="$(< $cpu_cluster/scaling_cur_freq)"
			cluster_clock_speed[$array_counter]="$((cluster_clock_speed[array_counter] / 1000))"
			# Create Array containing member cores of each CPU cluster
			cluster_cpu_group[$array_counter]="$(< $cpu_cluster/affected_cpus)"
			array_counter=$((array_counter + 1))
		done
		for ((array_checker=1; array_checker < array_counter; array_checker++)); do
			# Create array for cpu clockspeeds i.e 2400Mhz
			cpu_clock_speed[$array_checker]="${cluster_clock_speed[$array_checker]}Mhz"
			# Create array for cpu group upper limit i.e 3 in 0 1 2 3
			cpu_clock_group_high[$array_checker]="${cluster_cpu_group[$array_checker]/* }"
			# Create array for cpu group lower limit i.e 0 in 0 1 2 3
			cpu_clock_group_low[$array_checker]="${cluster_cpu_group[$array_checker]/ *}"
			# Create array for cpu group higher and lower limit i.e 0-3
			cpu_clock_group[$array_checker]="${cpu_clock_group_low[$array_checker]}-${cpu_clock_group_high[$array_checker]}"
			# Show only 0 in case cpu group contains only one core
			[[ ${cpu_clock_group_low[$array_checker]} == ${cpu_clock_group_high[$array_checker]} ]] && {
				cpu_clock_group[$array_checker]="${cpu_clock_group_low[$array_checker]}"
			}
			# Create array for showing cpu group and clockspeed i.e 0-3 @ 2400Mhz
			cpu_info[$array_checker]="${cpu_clock_group[$array_checker]} @ ${cpu_clock_speed[$array_checker]},"
		done
		# Clean up output
		cpu_info="${cpu_info[@]}"
		echo -e "${cpu_info%,*}"
	}
	get_gpu() {
		# Handles Mediatek GPUs
		[[ -d /proc/gpufreq ]] && {
			gpu_name="$cpu_file"
			gpu_name="${gpu_name/*Hardware}"
			gpu_name="${gpu_name/*: }"
			gpu_clock_speed="$(< /proc/gpufreq/cur_freq)"
			gpu_clock_speed="$((gpu_clock_speed / 1000))"
			echo -e "${gpu_name} @ ${gpu_clock_speed}Mhz"
		}
		# Handles Snapdragron GPUs
		[[ -d /sys/class/kgsl/kgsl-3d0 ]] && {
			gpu_name="$(< /sys/class/kgsl/kgsl-3d0/gpu_model)"
			gpu_clock_speed="$(< /sys/class/kgsl/kgsl-3d0/gpuclk)"
			gpu_clock_speed="$((gpu_clock_speed / 1000000))"
			gpu_utilization="$(< /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage)"
			gpu_utilization="${gpu_utilization//[[:space:]]}"
			echo -e "${gpu_name} @ ${gpu_clock_speed}Mhz - ($gpu_utilization Utilization)"
		}
	}
	get_battery_stats() {
		[[ -d /sys/class/power_supply/BAT0 ]] && {
			battery_status="$(< /sys/class/power_supply/BAT0/status)"
			battery_capacity="$(< /sys/class/power_supply/BAT0/capacity)"
			[[ -f /sys/class/power_supply/BAT0/charge_full_design ]] && {
				battery_full="$(< /sys/class/power_supply/BAT0/charge_full)"
				battery_full_design="$(< /sys/class/power_supply/BAT0/charge_full_design)"
				battery_health="$((( battery_full * 100 ) / battery_full_design ))"
				battery_health_decimal="$((( battery_full * 10000 ) / battery_full_design % 100 ))"
				echo -e "${battery_status}, ${battery_capacity}% - (${battery_health}.${battery_health_decimal}% Health)"
				return
			}
		}
		[[ -d /sys/class/power_supply/battery ]] && {
			battery_status="$(< /sys/class/power_supply/battery/status)"
			battery_capacity="$(< /sys/class/power_supply/battery/capacity)"
			[[ -f /sys/class/power_supply/battery/charge_full_design ]] && {
				battery_full="$(< /sys/class/power_supply/battery/charge_full)"
				battery_full_design="$(< /sys/class/power_supply/battery/charge_full_design)"
				battery_health="$((( battery_full * 100 ) / battery_full_design ))"
				battery_health_decimal="$((( battery_full * 10000 ) / battery_full_design % 100 ))"
				echo -e "${battery_status}, ${battery_capacity}% - (${battery_health}.${battery_health_decimal}% Health)"
				return
			}
		}
		echo -e "${battery_status}, ${battery_capacity}%"
	}
	get_cpu_temp() {
		[[ -d /sys/class/power_supply/battery ]] && {
			cpu_temp="$(< /sys/class/thermal/thermal_zone3/temp)"
			cpu_temp_decimal="$((cpu_temp % 1000))"
			cpu_temp_decimal="$((cpu_temp_decimal / 100))"
			cpu_temp="$((cpu_temp / 1000))"
		}
		[[ -d /sys/class/power_supply/BAT0 ]] || [[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] || [[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
			cpu_temp="$(< /sys/class/thermal/thermal_zone0/temp)"
			cpu_temp_decimal="$((cpu_temp % 1000))"
			cpu_temp_decimal="$((cpu_temp_decimal / 100))"
			cpu_temp="$((cpu_temp / 1000))"
		}
		usage_visualizer="$cpu_temp"
		echo -e "$(print_usage_bar) ${cpu_temp}.${cpu_temp_decimal}°C"
	}
	get_gpu_temp() {
		# Handles Snapdragron GPUs
		[[ -f /sys/class/kgsl/kgsl-3d0/temp ]] && {
			gpu_temp="$(< /sys/class/kgsl/kgsl-3d0/temp)"
			gpu_temp_decimal="$((gpu_temp % 1000))"
			gpu_temp_decimal="$((gpu_temp_decimal / 100))"
			gpu_temp="$((gpu_temp / 1000))"
			usage_visualizer="$gpu_temp"
			echo -e "$(print_usage_bar) ${gpu_temp}.${gpu_temp_decimal}°C"
		}
	}
	get_battery_temp() {
		battery_temp="$(< /sys/class/power_supply/battery/temp)"
		battery_temp_decimal="$((battery_temp % 10))"
		battery_temp="$((battery_temp / 10))"
		usage_visualizer="$battery_temp"
		echo -e "$(print_usage_bar) ${battery_temp}.${battery_temp_decimal}°C"
	}
	get_mem() {
		# Get MemTotal
		total_mem="${mem_file/*MemTotal: }"
		total_mem="${total_mem/ kB*}"
		# Get UsedMem
		# UsedMem = MemTotal - MemAvailable
		used_mem="${mem_file/*MemAvailable: }"
		used_mem="${used_mem/ kB*}"
		used_mem="$((( total_mem - used_mem ) / 1024 ))"
		# Convert to MiB
		total_mem="$((total_mem / 1024))"
		# Convert to percentage for print_usage_bar
		usage_visualizer="$((( used_mem * 100 ) / total_mem ))"
		echo -e "$(print_usage_bar) $used_mem / $total_mem MiB (${usage_visualizer}%)"
	}
	get_swap() {
		# Get SwapTotal
		total_swap="${mem_file/*SwapTotal: }"
		total_swap="${total_swap/ kB*}"
		# Get SwapFree
		free_swap="${mem_file/*SwapFree: }"
		free_swap="${free_swap/ kB*}"
		# Get UsedSwap
		# UsedSwap = SwapTotal - SwapFree
		used_swap="$(((total_swap - free_swap) / 1024 ))"
		total_swap="$((total_swap / 1024))"
		[[ $total_swap -gt 0 ]] && {
			usage_visualizer="$(((used_swap * 100) / total_swap ))"
			echo -e "$(print_usage_bar) $used_swap / $total_swap MiB (${usage_visualizer}%)"
		}
		[[ $total_swap -le 0 ]] && {
			echo -e "$(print_usage_bar) $used_swap / $total_swap MiB"
		}
	}
	get_uptime() {
		system_uptime="$(< /proc/uptime)"
		system_uptime="${system_uptime/.*}"
		in_days="$((system_uptime / 60 / 60 / 24)) days"
		in_hours="$((system_uptime / 60 / 60 % 24)) hours"
		in_minutes="$((system_uptime / 60 % 60)) minutes"
		in_seconds="$((system_uptime % 60)) seconds"
		# Make output suffix singular if value is 1
		[[ ${in_days/ *} -eq 1 ]] && in_days="${in_days/s}"
		[[ ${in_hours/ *} -eq 1 ]] && in_hours="${in_hours/s}"
		[[ ${in_minutes/ *} -eq 1 ]] && in_minutes="${in_minutes/s}"
		[[ ${in_seconds/ *} -eq 1 ]] && in_seconds="${in_seconds%s}"
		system_uptime="${in_days} ${in_hours} ${in_minutes} ${in_seconds}"
		echo -e "$system_uptime"
	}
	tfetch_config() {
		echo ""
		get_hostname "$@"
		echo -e " -----------------"
		# Show only if device name is available
		[[ -d /sys/devices/virtual/dmi/id || -f /sys/firmware/devicetree/base/model || -f /proc/device-tree/model ]] && {
			echo -e "${color_blue} Device:   ${color_white}$(get_device_name)"
		}
		echo -e "${color_blue} OS:       ${color_white}$(get_os_name)"
		echo -e "${color_blue} Kernel:   ${color_white}$(get_kernel)"
		echo -e "${color_blue} Init:     ${color_white}$(get_init)"
		echo -e "${color_blue} Packages: ${color_white}$(get_pkgs)"
		echo -e "${color_blue} Shell:    ${color_white}$(get_shell)"
		# Show on non-root Linux desktop
		[[ -n ${XDG_CURRENT_DESKTOP:=$DESKTOP_SESSION} ]] && {
			echo -e "${color_blue} Desktop:  ${color_white}$(get_desktop)"
		}
		# Show only if CPU files are present, i.e will be absent in a VM
		[[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq ]] && {
			echo -e "${color_blue} CPU:      ${color_white}$(get_cpu)"
		}
		# Show only on Android or desktops with $cpu_core_count <= 8
		[[ -d /sys/class/power_supply/battery || $cpu_core_count -le 8 ]] && {
			echo -e "${color_blue} CPU_CLK:  ${color_white}$(get_cpu_clusters)"
		}
		# Show only on Android with Mediatek or Snapdragon SOC
		[[ -f /proc/gpufreq/cur_freq || -f /sys/class/kgsl/kgsl-3d0/gpuclk ]] && {
			echo -e "${color_blue} GPU:      ${color_white}$(get_gpu)"
		}
		# Show only if battery is available
		[[ -d /sys/class/power_supply/BAT0 || -d /sys/class/power_supply/battery ]] && {
			echo -e "${color_blue} Battery:  ${color_white}$(get_battery_stats)"
		}
		# Show only if CPU files are present, i.e will be absent in a VM
		[[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq ]] && {
			echo -e "${color_blue} CPU Temp: ${color_white}$(get_cpu_temp)"
		}
		# Show only on Android with Snapdragon SOC
		[[ -f /sys/class/kgsl/kgsl-3d0/temp ]] && {
			echo -e "${color_blue} GPU Temp: ${color_white}$(get_gpu_temp)"
		}
		# Show only on Android
		[[ -f /sys/class/power_supply/battery/temp ]] && {
			echo -e "${color_blue} BAT Temp: ${color_white}$(get_battery_temp)"
		}
		echo -e "${color_blue} RAM:      ${color_white}$(get_mem)"
		echo -e "${color_blue} Swap:     ${color_white}$(get_swap)"
		echo -e "${color_blue} Uptime:   ${color_white}$(get_uptime)${no_color}\n"
		exit 0
	}
	tfetch_config_noroot() {
		echo ""
		get_hostname "$@"
		echo -e " -----------------"
		[[ -f /product/etc/build.prop ]] && {
			echo -e "${color_blue} OS:       ${color_white}$(get_os_name)"
		}
		echo -e "${color_blue} Shell:    ${color_white}$(get_shell)"
		# Show only if CPU files are present, i.e will be absent in a VM
		[[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq ]] && {
			echo -e "${color_blue} CPU:      ${color_white}$(get_cpu)"
		}
		# Show only on Android or desktops with $cpu_core_count <= 8
		[[ -d /sys/class/power_supply/battery || $cpu_core_count -le 8 ]] && {
			echo -e "${color_blue} CPU_CLK:  ${color_white}$(get_cpu_clusters)"
		}
		# Show only if CPU files are present, i.e will be absent in a VM
		[[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq ]] && {
			echo -e "${color_blue} CPU Temp: ${color_white}$(get_cpu_temp)"
		}
		echo -e "${color_blue} RAM:      ${color_white}$(get_mem)"
		echo -e "${color_blue} Swap:     ${color_white}$(get_swap)${no_color}\n"
		exit 0
	}
	trap 'run_on_exit' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	# Check if running as non-privileged user on Android
	[[ $OSTYPE == *android* ]] && [[ $USER != "root" || $EUID -ne 0 ]] && [[ -n $EUID ]] && {
		tfetch_config_noroot"$@"
	}
	tfetch_config "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: 7zip, touch, rm
#--------------------------------------------------------------
touchzip() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION] [FILENAME] [FILE...]\n"
		echo -e "Examples: $script_name --encrypt newfile.7z file1 file2"
		echo -e "          $script_name --unencrypt newfile.7z file1 file2\n"
		echo -e "Options: -en, --encrypt    Create an encrypted 7z archive"
		echo -e "         -h,  --help       Print out this message"
		echo -e "         -un, --unencrypt  Create an unencrypted 7z archive"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Create 7z archive"
		exit 0
	}
	check_dependencies() {
		# Prevent bad system call error as non-root user
		[[ -d "/system/app/" && $EUID -gt 0 ]] && print_not_root_user
		archive_name="$2"
		archive_name="${archive_name%.*}"
		# Check for required dependencies
		for mis_dep in touch rm 7z; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		[[ $# -lt 3 ]] && {
			print_syntax_error
		}
		# Check destination directory for write permissions
		touch "${archive_name}_${script_name}" 2>/dev/null || print_file_write_error "${archive_name}.7z"
		rm "${archive_name}_${script_name}"
		# Check if specified files exist
		for check_existing in "${@:3}"; do
			[[ ! -e $check_existing ]] && {
				print_error "Cannot stat '$check_existing': No such file or directory"
				exit 1
			}
		done
		# Check if filename already exists
		[[ -e ${archive_name}.7z ]] && {
			print_error "Cannot create archive '${archive_name}.7z': File exists"
			exit 1
		}
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create 7z archive '${archive_name}.7z'"
		rm "${archive_name}.7z" 2>/dev/null
		exit 1
	}
	encrypted_archive() {
		print_warning "Creating an encrypted 7z archive\n"
		# Handles password creation
		create_password "$@"
		7z a -snl -snh -p"$file_password" -t7z -mx1 -mmt"$cpu_core_count" -mhe=on "${archive_name}.7z" "${@:3}" &>/dev/null &&
		print_success "Created encrypted 7z archive '${archive_name}.7z'" ||
		failed_to_create "$@"
		unset file_password file_password2
		exit 0
	}
	unencrypted_archive() {
		print_warning "Creating an unencrypted 7z archive\n"
		7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "${archive_name}.7z" "${@:3}" &>/dev/null &&
		print_success "Created unencrypted 7z archive '${archive_name}.7z'" ||
		failed_to_create "$@"
		exit 0
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-en | --encrypt)
					encrypted_archive "$@"
				;;
				-un | --unencrypt)
					unencrypted_archive "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					for secondary_options in "${@:2}"; do
						case "$secondary_options" in
							-h | --help)
								print_help
							;;
						esac
					done
					print_syntax_error
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	check_dependencies "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: vim
#--------------------------------------------------------------
viw() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]"
		echo -e "          $script_name [FOLDER]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help"
		echo -e "          $script_name /usr/share \n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Open specified folder in vim netrw"
		exit 0
	}
	check_input_argument() {
		folder_name="$1"
		# Check for required dependencies
		[[ ! $(type -p vim) ]] && print_missing_dependencies "vim"
		[[ $# -eq 0 ]] && vim . && exit 0
		[[ $# -gt 1 ]] && print_syntax_error
		[[ ! -d $1 ]] && {
			print_error "Cannot stat '$folder_name': No such directory"
			exit 1
		}
		[[ -d $1 ]] && vim "$folder_name"
	}
	trap 'run_on_exit' 1 2 3 15
	input_option_type_one "$@"
	check_input_argument "$@"
	exit
}

#--------------------------------------------------------------
# Platform: voidlinux chroot
# Dependencies: mkdir, cp, ls, xbps
#--------------------------------------------------------------
void-backup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --cache\n"
		echo -e "Options: -c, --cache    Backup xbps package cache"
		echo -e "         -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Chroot package cache backup tool"
		exit 0
	}
	check_dependencies() {
		# Chroot environment check
		# Check if device is Android or device is a Linux desktop
		[[ -d /system/app || -d /sys/class/power_supply/BAT0 ]] ||
		# Check if device has a Snapdragon CPU and is an Android device
		[[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] ||
		# Check if device has a Mediatek CPU and is an Android device
		[[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
			print_os_error
		}
		source "/etc/os-release" 2>/dev/null
		[[ $PRETTY_NAME != "Void Linux" ]] && print_os_error
		# Check for required dependencies
		for mis_dep in mkdir cp ls; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		user_name="${SUDO_USER:=$USER}"
		# Declare xbps package cache directory
		cache_source_directory="/var/cache/xbps"
		cache_backup_directory="/media/Misc/xbps-cache"
	}
	failed_copy() {
		print_error "Failed to backup xbps package cache"
		exit 1
	}
	backup_cache() {
		[[ ! $(type -p xbps-install) ]] && print_missing_dependencies "xbps"
		# Check if external storage is available
		[[ -z $(ls -A "$external_storage" 2>/dev/null) ]] && {
			print_error "External storage is not mounted"
			exit 1
		}
		# Check if xbps package cache directory is empty
		[[ -z $(ls -A "$cache_source_directory" 2>/dev/null) ]] && {
			print_error "No packages installed yet"
			exit 1
		}
		mkdir -p "$cache_backup_directory" 2>/dev/null || print_write_error "$cache_backup_directory"
		cp -f "${cache_source_directory}"/* "$cache_backup_directory" 2>/dev/null &&
		print_success "Finished backing up xbps package cache" ||
		failed_copy "$@"
		exit 0
	}
	check_input_option() {
		[[ $# -gt 2 ]] && print_help
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-c | --cache)
					check_dependencies "$@"
					backup_cache
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: voidlinux chroot
# Dependencies: mkdir, cp, ls, xbps
#--------------------------------------------------------------
void-deploy() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --setup"
		echo -e "          $script_name --install\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -i, --install  Setup chroot after installation"
		echo -e "         -s, --setup    Setup chroot after mounting"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Chroot post-install and post-mount setup tool"
		exit 0
	}
	check_dependencies() {
		# Chroot environment check
		# Check if device is Android or device is a Linux desktop
		[[ -d /system/app || -d /sys/class/power_supply/BAT0 ]] ||
		# Check if device has a Snapdragon CPU and is an Android device
		[[ ! -d /sys/class/kgsl && ! -d /sys/class/power_supply/battery ]] ||
		# Check if device has a Mediatek CPU and is an Android device
		[[ ! -d /proc/gpufreq && ! -d /sys/class/power_supply/battery ]] && {
			print_os_error
		}
		source "/etc/os-release" 2>/dev/null
		[[ $PRETTY_NAME != "Void Linux" ]] && print_os_error
		# Check for required dependencies
		for mis_dep in mkdir cp ls; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		user_name="${SUDO_USER:=$USER}"
		# Declare xbps package cache directory
		cache_source_directory="/var/cache/xbps"
		cache_backup_directory="/media/Misc/xbps-cache"
		cache_directory="$cache_backup_directory"
	}
	post_install_setup() {
		# Exit if vim and tmux are installed
		[[ $(type -p tmux) && $(type -p vim) ]] && {
			print_error "Chroot has already been setup"
			exit 1
		}
		# Check for required dependencies
		for mis_dep in ping xbps-install; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Use cache_directory as xbps install dir
		[[ ! -d $cache_backup_directory ]] && {
			cache_directory="$cache_source_directory"
		}
		[[ $(ping -c4 voidlinux.org 2>/dev/null) ]] && {
			print_warning "Setting up voidlinux chroot\n"
			sudo xbps-install -Syu xbps git rust cargo bc ldns man 7zip wget gcc bash-completion unzip bsdtar --cachedir "$cache_directory" || exit 1
			sudo xbps-install -Syu --cachedir "$cache_directory" || exit 1
			sudo xbps-reconfigure -f glibc-locales || exit 1
			sudo makewhatis /usr/share/man || exit 1
			sudo chmod 777 /tmp || exit 1
			# Populate $PATH with tetherutils
			/bin/tether --silent "/home/${user_name}/.local/bin" &&
			sudo xbps-install -Syu vim tmux --cachedir "$cache_directory" || exit 1
			# Create custom bashrc
			print_bashrc "$@"
			# Create custom vimrc
			print_vimrc "$@"
			# Create custom tmux.conf
			print_tmux_conf "$@"
			sudo ln -sf "/home/${user_name}/.bashrc" "/root" || exit 1
			sudo ln -sf "/home/${user_name}/.tmux.conf" "/root" &&
			sudo ln -sf "/home/${user_name}/.vimrc" "/root" &&
			mkdir -p "/home/${user_name}/.vim" &&
			echo "" &&
			print_success "Finished setting up voidlinux chroot"
			print_aligned "Run 'source /home/${user_name}/.bashrc' to reload shell\n"
			exit 0
		}
		print_error "Network isn't ready yet" && exit 1
	}
	password_mismatch() {
		echo ""
		print_error "Failed to change '$@' user password"
		print_aligned "Passwords do not match"
		exit 1
	}
	change_timezone() {
		# Set Timezone
		zone_count=1
		# Show available timezone files
		for zone_files in /usr/share/zoneinfo/*; do
			[[ -d $zone_files && ${zone_files##*/} != posix && ${zone_files##*/} != right ]] && {
				printf "${zone_count}.${zone_files##*/}  "
				time_zone[$zone_count]="$zone_files"
				zone_count=$((zone_count + 1))
			}
		done
		echo -e "\n"
		# Read user input
		read -rep "Select Timezone: " tz_option
		echo ""
		# Handles invalid user input
		[[ -z $tz_option ]] && {
			print_error "Timezone string cannot be empty" &&
			exit 1
		}
		case "$tz_option" in
			-*)
				echo ""
				[[ -z ${tz_option#*\-} || -z ${tz_option/\-\-*} ]] && {
					print_error "Invalid option '${tz_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${tz_option#*\-}'" &&
				exit 1
			;;
			*)
				# List subzones in user selection
				[[ $tz_option -ge 1 && $tz_option -le $zone_count ]] && {
					# List subzones files
					zone_count=1
					for sub_zone_files in ${time_zone[$tz_option]}/*; do
						printf "${zone_count}.${sub_zone_files##*/}  "
						sub_zone[$zone_count]="$sub_zone_files"
						zone_count=$((zone_count + 1))
					done
					echo -e "\n"
					# Read user input
					read -rep "Select Region: " tz_locale
					echo ""
					# If location in user selection is defined
					[[ -f ${sub_zone[$tz_locale]} && $tz_locale -ge 1 && $tz_locale -le $zone_count ]] && {
						ln -sf "/usr/share/zoneinfo/${time_zone[$tz_option]##*/}/${sub_zone[$tz_locale]##*/}" "/etc/localtime" 2>/dev/null &&
						return 0
					}
					# If location in user selection has sublocation
					[[ -d ${sub_zone[$tz_locale]} && $tz_locale -ge 1 && $tz_locale -le $zone_count ]] && {
						# List all sublocale files
						zone_count=1
						for sub_region_files in ${sub_zone[$tz_locale]}/*; do
							printf "${zone_count}.${sub_region_files##*/}  "
							sub_region[$zone_count]="$sub_region_files"
							zone_count=$((zone_count + 1))
						done
						echo -e "\n"
						# Read user input
						read -rep "Select Location: " sub_locale
						echo ""
						# If location in user selection is defined
						[[ -f ${sub_region[$sub_locale]} && $sub_locale -ge 1 && $sub_locale -le $zone_count ]] && {
							ln -sf "/usr/share/zoneinfo/${time_zone[$tz_option]##*/}/${sub_zone[$tz_locale]##*/}/${sub_region[$sub_locale]##*/}" "/etc/localtime" 2>/dev/null &&
							return 0
						}
						# Handles invalid user input
						[[ -z $sub_locale ]] && {
							print_error "Location string cannot be empty" &&
							exit 1
						}
						[[ $sub_locale -lt 1 || $sub_locale -gt $zone_count ]] && {
							print_error "Invalid option '${sub_locale}'" &&
							exit 1
						}
					}
					# Handles invalid user input
					[[ -z $tz_locale ]] && {
						print_error "Region string cannot be empty" &&
						exit 1
					}
					[[ $tz_locale -lt 1 || $tz_locale -gt $zone_count ]] && {
						print_error "Invalid option '${tz_locale}'" &&
						exit 1
					}
				}
				[[ $tz_option -lt 1 || $tz_option -gt $zone_count ]] && {
					print_error "Invalid option '${tz_option}'" &&
					exit 1
				}
			;;
		esac
	}
	post_boot_setup() {
		[[ $HOSTNAME == "$USER" ]] && {
			print_error "Chroot has already been setup"
			 exit 1
		}
		source "/etc/profile"
		source "/etc/void-deploy.conf" 2>/dev/null
		# Check if user account has been created before
		[[ ! -f /etc/void-deploy.conf ]] || [[ $VOID_DEPLOY_SETUP != "true" ]] && {
			print_warning "Changing default timezone\n"
			# Change default time zone
			change_timezone "$@"
			# Create new user account
			print_warning "Creating new user account\n"
			source "/etc/profile"
			read -rep "Input new username: " user_name
			read -rep "Confirm new username: " user_name2
			[[ $user_name != "$user_name2" ]] && {
				echo ""
				print_error "Username does not match"
				exit 1
			}
			[[ -z $user_name || -z $user_name2 ]] && {
				echo ""
				print_error "Username cannot be empty"
				exit 1
			}
			# Set default permissions on /
			chown root:root /
			chmod 755 /
			# Change default locale
			echo "LANG=en_US.UTF-8" > /etc/locale.conf
			sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/default/libc-locales
			# Add locale if it doesn't exist
			locale_file="$(< /etc/default/libc-locales)"
			[[ $locale_file != *en_US.UTF-8\ UTF-8* ]] && {
			    echo "en_US.UTF-8 UTF-8" >> /etc/default/libc-locales
			}
			# Create network groups and add user
			groupadd -g 3001 aid_net_bt_admin 2>/dev/null
			groupadd -g 3002 aid_net_bt 2>/dev/null
			groupadd -g 3003 aid_inet 2>/dev/null
			groupadd -g 3004 aid_net_raw 2>/dev/null
			groupadd -g 3005 aid_net_admin 2>/dev/null
			groupadd -g 3006 aid_net_bw_stats 2>/dev/null
			groupadd -g 3007 aid_net_bw_acct 2>/dev/null
			groupadd -g 3008 aid_net_bt_stack 2>/dev/null
			useradd -m -G wheel,floppy,dialout,audio,video,kvm,plugdev,3001,3002,3003,3004,3005,3006,3007,3008 "$user_name" 2>/dev/null
			echo ""
			# Create new user password
			print_warning "Set password for new user '$user_name'\n"
			passwd "$user_name" || password_mismatch "$user_name"
			echo ""
			# Change default root-user password
			print_warning "Almost done, change the default 'root' user password\n"
			passwd root || password_mismatch "root"
			# Add new user to sudoers file
			sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
			# Set hostname
			echo "$user_name" > /etc/hostname && hostname "$user_name"
			# Set DNS server
			echo "nameserver 127.0.0.1" > /etc/resolv.conf
			chattr +i /etc/resolv.conf
			# Create custom vim colorscheme
			print_vim_color "$@"
			chown "$user_name":"$user_name" /usr/share/vim/vim90/colors/tether.vim 2>/dev/null
			echo ""
			print_success "Done, switching to new user '$user_name'"
			print_aligned "Run 'tether $script_name --install' to finish setting up chroot\n"
			# Change permissions of mounted dnscrypt files
			[[ -f "/mnt/module-dnscrypt/dnscrypt-proxy.toml" ]] && {
				chmod 666 /mnt/module-dnscrypt/*
			}
			# Set config true status
			echo -e "VOID_DEPLOY_SETUP=\"true\"" > /etc/void-deploy.conf
			su "$user_name" && source "/etc/profile"
			exit 0
		}
		[[ -f "/mnt/module-dnscrypt/dnscrypt-proxy.toml" ]] && {
			chmod 666 /mnt/module-dnscrypt/*
		}
		user_name="$(< /etc/hostname)"
		hostname "$user_name"
		su "$user_name" && source "/etc/profile"
		exit 0
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-i | --install)
					check_dependencies "$@"
					post_install_setup "$@"
				;;
				-s | --setup)
					check_dependencies "$@"
					post_boot_setup "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: mount, losetup, busybox, lsof, fallocate, mke2fs
#--------------------------------------------------------------
void-install() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Chroot installation tool"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app ]] && print_os_error
		# Run only on arm64 Android
		[[ $HOSTTYPE != aarch64 ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in mount losetup busybox lsof fallocate mke2fs; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root-user
		print_not_root_user
		# Declare chroot install directory
		chroot_image="/data/voidimg/void.img"
		chroot_image_dir="/data/voidimg"
		chroot_install_dir="/data/voidlinux"
		block_device="/dev/block/loop7"
		tmp_dir="/data/local/tmp"
		module_dns="$module_directory/system/etc/dnscrypt-proxy"
		current_dir="$PWD"
		[[ -f "$chroot_install_dir/bin/bash" || -f $chroot_image || $(lsof "$chroot_install_dir" 2>/dev/null) ]] && {
			print_error "Chroot is already installed"
			print_aligned "Run 'void-mount' to initialize it"
			exit 1
		}
		# Check for internet connectivity
		[[ ! $(ping -c4 voidlinux.org 2>/dev/null) ]] && {
			print_error "Network isn't ready yet"
			exit 1
		}
	}
	download_fail() {
		print_error "Something went wrong"
		print_aligned "Failed to download '$rootfs_file'"
		rm -r "${tmp_dir:=/data/local/tmp}/${rootfs_file}" "${tmp_dir:=/data/local/tmp}/sha256sum.txt" 2>/dev/null
		exit 1
	}
	download_fail_shasum() {
		print_error "Something went wrong"
		print_aligned "Failed to download 'sha256sum.txt'"
		rm -r "${tmp_dir:=/data/local/tmp}/sha256sum.txt" 2>/dev/null
		exit 1
	}
	check_file_hash() {
		# Get file hashsum
		downloaded_file_hash="$(busybox sha256sum ${tmp_dir}/${rootfs_file})"
		downloaded_file_hash="${downloaded_file_hash//\ *}"
		downloaded_file_hash="${downloaded_file_hash//[[:space:]]}"
		# Get checksum
		shasum_file_hash="$(< $tmp_dir/sha256sum.txt)"
		shasum_file_hash="${shasum_file_hash//*$rootfs_file}"
		shasum_file_hash="${shasum_file_hash//SHA256*}"
		shasum_file_hash="${shasum_file_hash//*\ }"
		shasum_file_hash="${shasum_file_hash//[[:space:]]}"
		# Compare file hashes
		[[ $downloaded_file_hash != $shasum_file_hash ]] && {
			print_error "Hash mismatch, possible MITM attack"
			print_aligned "Try again at a later time"
			rm -r "${tmp_dir:=/data/local/tmp}/${rootfs_file}" "${tmp_dir:=/data/local/tmp}/sha256sum.txt" 2>/dev/null
			exit 1
		}
	}
	fetch_rootfs() {
		print_warning "Downloading 'sha256sum.txt'\n"
		shasum_file="https://repo-default.voidlinux.org/live/current/sha256sum.txt"
		# Download sha256sum.txt
		busybox wget "$shasum_file" -O "$tmp_dir/sha256sum.txt" &>/dev/null ||
		# Error handling on download failure
		download_fail_shasum "$@"
		# Get latest aarch64 rootfs filename
		rootfs_version="$(< $tmp_dir/sha256sum.txt)"
		rootfs_version=${rootfs_version//*void-aarch64-ROOTFS}
		rootfs_version=${rootfs_version//\)*}
		rootfs_version=${rootfs_version//[[:space:]]}
		# Set download link for rootfs
		rootfs_version="https://repo-default.voidlinux.org/live/current/void-aarch64-ROOTFS${rootfs_version}"
		# Set downloaded file name
		rootfs_file="${rootfs_version//*\/}"
		print_warning "Downloading '$rootfs_file'\n"
		# Download latest voidlinux aarch64 glibc rootfs
		busybox wget "$rootfs_version" -O "${tmp_dir}/${rootfs_file}" &>/dev/null ||
		# Error handling on download failure
		download_fail "$@"
		print_warning "Comparing file checksums\n"
		# Check downloaded file hashsum
		check_file_hash "$@"
	}
	install_preparation() {
		# Check if rootfs has already been downloaded
		[[ -f ${tmp_dir}/sha256sum.txt ]] && {
			# Get rootfs filename
			rootfs_version="$(< $tmp_dir/sha256sum.txt)"
			rootfs_version=${rootfs_version//*void-aarch64-ROOTFS}
			rootfs_version=${rootfs_version//\)*}
			rootfs_version=${rootfs_version//[[:space:]]}
			rootfs_file="void-aarch64-ROOTFS${rootfs_version}"
			# Check file hash if rootfs exists
			[[ -f ${tmp_dir}/${rootfs_file} ]] && {
				print_warning "Comparing file checksums\n"
				check_file_hash "$@"
			}
			# Download rootfs if it doesn't exist
			[[ ! -f ${tmp_dir}/${rootfs_file} ]] && {
				fetch_rootfs "$@"
			}
		}
		[[ ! -f ${tmp_dir}/sha256sum.txt ]] && {
			# Download voidlinux rootfs
			fetch_rootfs "$@"
		}
		# rootfs file path
		void_rootfs="${tmp_dir}/${rootfs_file}"
		# Extracted rootfs
		extracted_file="${rootfs_file%.*}"
		# Check if rootfs exists
		[[ ! -f $void_rootfs ]] && {
			print_error "'$rootfs_file' not found"
			exit 1
		}
		# Set size of chroot image
		print_warning "Preparing install location\n"
		cd "/sdcard"
		rm -r "$chroot_image" 2>/dev/null
		rm -r "$chroot_install_dir" 2>/dev/null
		# Process user input
		read -rep "Input desired size of chroot image: " input_size
		echo ""
		# Process user input and seperate characters from integers
		user_value="$input_size"
		user_value="${user_value//[aA-zZ]}"
		size_suffix="$input_size"
		size_suffix="${size_suffix//[0.0-9.90-9]}"
		# Check for invalid input
		integer_checker="${user_value//[0.0-9.90-9]}"
		integer_checker="${integer_checker//[[:space:]]}"
		[[ -n $integer_checker || -z $user_value ]] && {
			print_error "Input chroot size in MB or GB"
			print_aligned "Example: 5G, 10GB, 5120M, 10240MB"
			exit 1
		}
		# Create chroot install directories
		mkdir -p "$chroot_install_dir" || print_write_error "$chroot_install_dir"
		mkdir -p "$chroot_image_dir" || print_write_error "$chroot_image_dir"
	}
	create_image() {
		# Download and confirm rootfs file hashsum
		install_preparation "$@"
		# Create chroot container
		case "$size_suffix" in
			m | M | mb | mB | Mb | MB)
				[[ $user_value -lt 2048 ]] && {
					print_error "${user_value}MB is too small for chroot"
					print_aligned "You need at least 2048MB"
					exit 1
				}
				print_warning "Creating ${user_value}MB image file\n"
				fallocate -l "${user_value}"M "$chroot_image"
				size_suffix="MB"
			;;
			g | G | gb | gB | Gb | GB)
				[[ $user_value -lt 2 ]] && {
					print_error "${user_value}GB is too small for chroot"
					print_aligned "You need at least 2GB"
					exit 1
				}
				print_warning "Creating ${user_value}GB image file\n"
				fallocate -l "${user_value}"G "$chroot_image"
				size_suffix="GB"
			;;
			*)
				print_error "Input chroot size in MB or GB"
				print_aligned "Example: 5G, 10GB, 5120M, 10240MB"
				exit 1
			;;
		esac
	}
	chroot_installation() {
		# Create chroot container
		create_image "$@"
		# Extract rootfs in chroot container
		[[ -f $chroot_image ]] && {
			mke2fs -t ext4 "$chroot_image" &>/dev/null
			losetup "$block_device" "$chroot_image"
			mount -t ext4 "$block_device" "$chroot_install_dir"
			cp "$void_rootfs" "$chroot_install_dir"
			cd "$chroot_install_dir"
			print_warning "Extracting '$rootfs_file'\n"
			busybox xz -d "${void_rootfs##*/}" &>/dev/null
			busybox tar -xf "$extracted_file" &>/dev/null && rm "$extracted_file"
			mount -t proc /proc "$chroot_install_dir/proc/"
			mount -t sysfs /sys "$chroot_install_dir/sys/"
			mount -o bind /dev "$chroot_install_dir/dev/"
			mount -o bind /dev/pts "$chroot_install_dir/dev/pts/"
			mkdir -p "$chroot_install_dir/mnt/sdcard"
			mount "$phone_storage" "$chroot_install_dir/mnt/sdcard"
			# Incase there are no dnscrypt-proxy files
			[[ -n $(ls -A "$module_dns" 2>/dev/null) ]] && {
				mkdir -p "$chroot_install_dir/mnt/module-dnscrypt"
				mount "$module_dns" "$chroot_install_dir/mnt/module-dnscrypt"
			}
			# Incase there's no external storage
			[[ -n $external_storage ]] && {
				mount "$external_storage" "$chroot_install_dir/media"
			}
			# Get ${0:=script_name} file path
			# Handles ./${script_name}
			[[ -f ${0#\.\/} ]] && {
				cp -f "${0#\.\/}" "$chroot_install_dir/bin/tether"
			}
			# Handles ./<dirname>/${script_name}
			[[ -f ${0#\.} ]] && {
				cp -f "${0#\.}" "$chroot_install_dir/bin/tether"
			}
			print_success "Finished installing ${user_value}${size_suffix} voidlinux chroot"
			print_aligned "Run 'void-mount' to initialize it"
			# Clean up files on finish
			rm -r "${tmp_dir:=/data/local/tmp}/${rootfs_file}" "${tmp_dir:=/data/local/tmp}/sha256sum.txt" 2>/dev/null
			cd "$current_dir"
			exit 0
		}
		[[ ! -f $chroot_image ]] && {
			print_error "Chroot image not detected"
			print_aligned "Run 'void-install' before proceeding"
			rm -r "${tmp_dir:=/data/local/tmp}/${rootfs_file}" "${tmp_dir:=/data/local/tmp}/sha256sum.txt" 2>/dev/null
			exit 1
		}
	}
	trap 'remove_file_on_exit "${tmp_dir:=/data/local/tmp}/${rootfs_file}" "${tmp_dir:=/data/local/tmp}/sha256sum.txt"' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	chroot_installation "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: losetup, mount, mkdir
#--------------------------------------------------------------
void-mount() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --help\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Chroot initialization tool"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in losetup mount mkdir; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root user
		print_not_root_user
		# Declare file directory
		chroot_image="/data/voidimg/void.img"
		chroot_install_dir="/data/voidlinux"
		block_device="/dev/block/loop7"
		module_dns="$module_directory/system/etc/dnscrypt-proxy"
		# Check if chroot file exists
		[[ ! -f $chroot_image ]] && {
			print_error "Chroot not detected"
			print_aligned "Run 'void-install' before proceeding"
			exit 1
		}
		# Create chroot container mount directory
		[[ ! -d $chroot_install_dir ]] && {
			mkdir -p "$chroot_install_dir" 2>/dev/null
		}
	}
	chroot_mount() {
		mount -t ext4 "$block_device" "$chroot_install_dir"
		mount -t proc /proc "$chroot_install_dir/proc/"
		mount -t sysfs /sys "$chroot_install_dir/sys/"
		mount -o bind /dev "$chroot_install_dir/dev/"
		mount -o bind /dev/pts "$chroot_install_dir/dev/pts/"
		mkdir -p "$chroot_install_dir/mnt/sdcard"
		mount "$phone_storage" "$chroot_install_dir/mnt/sdcard"
		# Incase there are no dnscrypt-proxy files
		[[ -n $(ls -A "$module_dns" 2>/dev/null) ]] && {
			mkdir -p "$chroot_install_dir/mnt/module-dnscrypt"
			mount "$module_dns" "$chroot_install_dir/mnt/module-dnscrypt"
		}
		# Incase there's no external storage
		[[ -n $external_storage ]] && {
			mount "$external_storage" "$chroot_install_dir/media"
		}
		# Get ${0:=script_name} file path
		# Handles ./${script_name}
		[[ -f ${0#\.\/} ]] && {
			cp -f "${0#\.\/}" "$chroot_install_dir/bin/tether"
		}
		# Handles ./<dirname>/${script_name}
		[[ -f ${0#\.} ]] && {
			cp -f "${0#\.}" "$chroot_install_dir/bin/tether"
		}
		chroot "$chroot_install_dir" tether void-deploy --setup
		exit 0
	}
	chroot_mount_main() {
		# Handles unmounted chroot container and inactive block device
		[[ ! $(losetup -j "$chroot_image") ]] && {
			losetup "$block_device" "$chroot_image"
			chroot_mount "$@"
		}
		# Handles active block device but unmounted chroot container
		[[ ! -f "$chroot_install_dir/bin/bash" ]] && {
			chroot_mount "$@"
		}
		# Handles mounted chroot container and active block device
		# Handles ./${script_name}
		[[ -f ${0#\.\/} ]] && {
			cp -f "${0#\.\/}" "$chroot_install_dir/bin/tether"
		}
		# Handles ./<dirname>/${script_name}
		[[ -f ${0#\.} ]] && {
			cp -f "${0#\.}" "$chroot_install_dir/bin/tether"
		}
		chroot "$chroot_install_dir" tether void-deploy --setup
		exit 0
	}
	trap 'run_on_exit' 1 2 3 15
	input_option_type_two "$@"
	check_dependencies "$@"
	chroot_mount_main "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: losetup, umount, lsof, wc, rm
#--------------------------------------------------------------
void-umount() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name"
		echo -e "          $script_name --remove\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -r, --remove   Unmount and delete chroot"
		echo -e "         -V, --version  Show version information\n"
		echo -e "Chroot unmount tool"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in losetup umount lsof wc mkdir rm; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root user
		print_not_root_user
		# Declare file directory
		chroot_image="/data/voidimg/void.img"
		chroot_install_dir="/data/voidlinux"
		block_device="/dev/block/loop7"
		# Check if chroot file exists
		[[ ! -f $chroot_image ]] && {
			print_error "Chroot not detected"
			print_aligned "Run 'void-install' before proceeding"
			[[ -d $chroot_install_dir ]] && {
				rm -r "${chroot_image%/*}" 2>/dev/null
				rm -r "$chroot_install_dir" 2>/dev/null
			}
			exit 1
		}
		# Create chroot container mount directory
		[[ ! -d $chroot_install_dir ]] && {
			mkdir -p "$chroot_install_dir" 2>/dev/null
		}
		# Check if running through adb
		[[ -n $ANDROID_SOCKET_adbd ]] && {
			print_error "Cannot unmount chroot: adb socket detected"
			print_aligned "Unmounting through adb is not supported"
			exit 1
		}
		# Check if chroot has any running processes
		[[ $(lsof "$chroot_install_dir" 2>/dev/null) ]] && {
			print_error "Cannot unmount chroot: ($(lsof "$chroot_install_dir" | wc -l)) Running processes detected"
			exit 1
		}
	}
	failed_delete() {
		print_error "Something went wrong"
		print_aligned "Failed to remove chroot"
		exit 1
	}
	unmount_chroot() {
		# Handles mounted chroot container with no running processes
		[[ -f "$chroot_install_dir/bin/bash" ]] && {
			cd "/sdcard"
			umount "$chroot_install_dir/proc"
			umount "$chroot_install_dir/sys"
			umount -lf "$chroot_install_dir/dev/pts"
			umount -lf "$chroot_install_dir/dev"
			umount "$chroot_install_dir/mnt/sdcard" 2>/dev/null
			# Incase there are no dnscrypt-proxy files
			umount "$chroot_install_dir/mnt/module-dnscrypt" 2>/dev/null
			# Incase there's no external storage
			umount "$chroot_install_dir/media" 2>/dev/null
			umount -lf "$chroot_install_dir"
			losetup -d "$block_device" 2>/dev/null
			[[ $(losetup -j "$chroot_image") ]] && {
				print_error "Failed to unmount chroot"
				exit 1
			}
			print_success "Unmounted chroot"
			exit 0
		}
		# Handles unmounted chroot container and active block device
		[[ $(losetup -j "$chroot_image") ]] && {
			losetup -d "$block_device" 2>/dev/null
			[[ $(losetup -j "$chroot_image") ]] && {
				print_error "Failed to unmount chroot"
				exit 1
			}
			print_success "Unmounted chroot"
			exit 0
		}
		# Handles unmounted chroot container and inactive block device
		print_error "Chroot not mounted"
		exit 1
	}
	remove_chroot() {
		print_warning "This action is irreversible\n"
		read -rep "Do you want to proceed (y/n) " option_args
		case "$option_args" in
			y | Y )
				echo ""
				# Handles mounted chroot container with no running processes
				[[ -f "$chroot_install_dir/bin/bash" ]] && {
					cd "/sdcard"
					umount "$chroot_install_dir/proc"
					umount "$chroot_install_dir/sys"
					umount -lf "$chroot_install_dir/dev/pts"
					umount -lf "$chroot_install_dir/dev"
					umount "$chroot_install_dir/mnt/sdcard" 2>/dev/null
					# Incase there are no dnscrypt-proxy files
					umount "$chroot_install_dir/mnt/module-dnscrypt" 2>/dev/null
					# Incase there's no external storage
					umount "$chroot_install_dir/media" 2>/dev/null
					umount -lf "$chroot_install_dir"
					losetup -d "$block_device" 2>/dev/null
					[[ $(losetup -j "$chroot_image") ]] && {
						print_error "Failed to unmount chroot"
						exit 1
					}
				}
				# Handles unmounted chroot container and active block device
				[[ $(losetup -j "$chroot_image") ]] && {
					losetup -d "$block_device" 2>/dev/null
					[[ $(losetup -j "$chroot_image") ]] && {
						print_error "Failed to unmount chroot"
						exit 1
					}
				}
				rm -r "${chroot_image%/*}" &&
				rm -r "$chroot_install_dir" &&
				print_success "Removed chroot" ||
				failed_delete "$@"
				exit 0
			;;
			n | N )
				run_on_exit
			;;
			 *)
				echo ""
				print_error "Invalid option '$option_args'"
				exit 1
			;;
		esac
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-r | --remove)
					check_dependencies "$@"
					remove_chroot "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					print_error "Invalid option '${primary_options}'"
					print_notification
				;;
			esac
		done
		check_dependencies "$@"
		unmount_chroot "$@"
	}
	trap 'run_on_exit' 1 2 3 15
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Android
# Dependencies: 7zip, ls, pm, date, mkdir
#--------------------------------------------------------------
whatsapp-backup() {
	print_help() {
		echo -e "$script_name (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [OPTION]\n"
		echo -e "Examples: $script_name --encrypt"
		echo -e "          $script_name --restore\n"
		echo -e "Options: -en, --encrypt    Create an encrypted backup"
		echo -e "         -h,  --help       Print out this message"
		echo -e "         -l,  --list       List all available backups"
		echo -e "         -un, --unencrypt  Create an unencrypted backup"
		echo -e "         -r,  --restore    Restore whatsapp from available backups"
		echo -e "         -V,  --version    Show version information\n"
		echo -e "Create and restore whatsapp backups"
		exit 0
	}
	check_dependencies() {
		# Only run on Android
		[[ ! -d /system/app/ || ! -f /system/build.prop ]] && {
			print_os_error
		}
		# Check for required dependencies
		for mis_dep in ls 7z pm date mkdir; do
			[[ ! $(type -p $mis_dep) ]] && {
				print_missing_dependencies "$mis_dep"
			}
		done
		# Only run as root user
		print_not_root_user
		# SAF was rolled out in Android 11
		[[ $android_version -lt 11 ]] && print_os_error
		# Declare whatsapp versions
		whatsapp_classic="/sdcard/Android/media/com.whatsapp"
		whatsapp_business="/sdcard/Android/media/com.whatsapp.w4b"
		# Reset whatsapp directory
		unset whatsapp_dir
		# Handles only whatsapp installed
		[[ -d $whatsapp_classic && ! -d $whatsapp_business ]] && {
			whatsapp_dir="$whatsapp_classic"
		}
		# Handles only whatsapp business installed
		[[ -d $whatsapp_business && ! -d $whatsapp_classic ]] && {
			whatsapp_dir="$whatsapp_business"
		}
		# Handles both whatsapp business && whatsapp installed
		[[ -d $whatsapp_business && -d $whatsapp_classic ]] && {
			whatsapp_dir="$whatsapp_business"
		}
		# Handles no whatsapp install
		[[ -z $(pm -l 2>/dev/null | grep -i whatsapp) ]] && {
			print_error "Whatsapp is not installed"
			print_notification
			exit 1
		}
		# Handles missing $whatsapp_dir
		[[ -n $(pm -l 2>/dev/null | grep -i whatsapp) && ! -d $whatsapp_dir ]] && {
			print_error "Cannot stat '${whatsapp_dir:=com.whatsapp}': No such file or directory"
			print_aligned "Try running 'Whatsapp' at least once"
			exit 1
		}
		# Set whatsapp backup directory
		whatsapp_backup_dir="$phone_storage/Misc/whatsapp-backup"
		# Use external storage if available
		[[ -n $(ls -A "$external_storage" 2>/dev/null) ]] && {
			whatsapp_backup_dir="$external_storage/Misc/whatsapp-backup"
		}
		# Set current current directory
		current_dir="$PWD"
		# Get date and time in YY.MM.DD.HH.MM format
		current_date="$(date +%y.%m.%d.%H%M)"
	}
	failed_to_create() {
		print_error "Something went wrong"
		print_aligned "Failed to create 'whatsapp-backup.${current_date}.7z'"
		rm -rf "$whatsapp_backup_dir/whatsapp-backup.${current_date}.7z" 2>/dev/null
		# CD back to original directory
		cd "$current_dir"
		exit 1
	}
	failed_to_extract() {
		echo ""
		print_error "Failed to extract '${backup_list[$backup_option]}'"
		exit 1
	}
	encrypted_backup_whatsapp() {
		print_warning "Creating encrypted backup 'whatsapp-backup.${current_date}.7z'\n"
		# Handles password creation
		create_password "$@"
		cd "$whatsapp_dir"
		mkdir -p "$whatsapp_backup_dir" || print_write_error "$whatsapp_backup_dir"
		# Compress and encrypt $whatsapp-dir contents
		7z a -snl -snh -p"$file_password" -t7z -mx1 -mmt"$cpu_core_count" -mhe=on "$whatsapp_backup_dir/whatsapp-backup.${current_date}.7z" "*" &>/dev/null ||
		failed_to_create "$@"
		unset file_password file_password2
		print_success "Finished encrypting 'whatsapp-backup.${current_date}.7z'"
		print_aligned "Check '$whatsapp_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		exit 0
	}
	unencrypted_backup_whatsapp() {
		print_warning "Creating unencrypted backup 'whatsapp-backup.${current_date}.7z'\n"
		cd "$whatsapp_dir"
		mkdir -p "$whatsapp_backup_dir" || print_write_error "$whatsapp_backup_dir"
		# Compress $whatsapp-dir contents
		7z a -snl -snh -t7z -mx1 -mmt"$cpu_core_count" -y "$whatsapp_backup_dir/whatsapp-backup.${current_date}.7z" "*" &>/dev/null ||
		failed_to_create "$@"
		print_success "Finished creating 'whatsapp-backup.${current_date}.7z'"
		print_aligned "Check '$whatsapp_backup_dir'"
		# CD back to original directory
		cd "$current_dir"
		exit 0
	}
	restore_whatsapp() {
		# Set variables for available backups
		array_counter=1
		for avail_backup in $(ls -A "$whatsapp_backup_dir" 2>/dev/null); do
			backup_list[$array_counter]="$avail_backup"
			array_counter=$((array_counter + 1))
		done
		# Handles no available backups
		[[ $array_counter -eq 1 ]] && {
			print_error "No available backups to restore from"
			exit 1
		}
		# List available backups
		print_banner
		print_warning "Restoring whatsapp\n"
		for ((array_checker=1; array_checker < array_counter; array_checker++)); do
			echo -e "${array_checker}.${backup_list[$array_checker]}"
		done
		echo ""
		read -rep "Select preferred backup: " backup_option
		case "$backup_option" in
			-*)
				echo ""
				[[ -z ${backup_option#*\-} ]] && {
					print_error "Invalid option '${backup_option}'" &&
					exit 1
				}
				print_error "Invalid option -- '${backup_option#*\-}'" &&
				exit 1
			;;
			*)
				echo ""
				[[ $(( backup_option / 1 )) -gt 0 && $backup_option -lt $array_counter ]] && {
					print_warning "Restoring whatsapp using '${backup_list[$backup_option]}'"
					mkdir -p "$whatsapp_dir" || print_write_error "$whatsapp_dir"
					# Extract selected backup file
					7z x "${whatsapp_backup_dir}/${backup_list[$backup_option]}" -mmt"$cpu_core_count" -y -o$whatsapp_dir 2>/dev/null || failed_to_extract "$@"
					echo ""
					print_success "Finished restoring '${backup_list[$backup_option]}'"
					exit 0
				}
				print_error "Invalid option '${backup_option}'" &&
				exit 1
			;;
		esac
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-en | --encrypt)
					check_dependencies "$@"
					# Handles if $whatsapp_dir exists and is empty
					[[ -z $(ls -A "$whatsapp_dir" 2>/dev/null) ]] && {
						print_error "Nothing to backup"
						print_aligned "Try using your whatsapp more"
						exit 1
					}
					encrypted_backup_whatsapp "$@"
				;;
				-h | --help)
					print_help
				;;
				-l | --list)
					check_dependencies "$@"
					# Handles no available whatsapp backup
					[[ -z $(ls -A "$whatsapp_backup_dir" 2>/dev/null) ]] && {
						print_error "No available backups"
						exit 1
					}
					echo -e "\033[1;97mAvailable backups:\033[00m"
					ls -A "$whatsapp_backup_dir"
					exit 0
				;;
				-un | --unencrypt)
					check_dependencies "$@"
					[[ -z $(ls -A "$whatsapp_dir" 2>/dev/null) ]] && {
						print_error "Nothing to backup"
						print_aligned "Try using your whatsapp more"
						exit 1
					}
					unencrypted_backup_whatsapp "$@"
				;;
				-r | --restore)
					check_dependencies "$@"
					restore_whatsapp "$@"
				;;
				-V | --version)
					print_version
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					for secondary_options in "${@:2}"; do
						case "$secondary_options" in
							-h | --help)
								print_help
							;;
						esac
					done
					print_syntax_error
				;;
			esac
		done
	}
	trap 'remove_file_on_exit "$whatsapp_backup_dir/whatsapp-backup.${current_date}.7z"' 1 2 3 15
	print_no_argument "$@"
	check_input_option "$@"
	exit
}

#--------------------------------------------------------------
# Platform: Device Agnostic
# Dependencies: bash, ls, ln, sed, grep, mkdir
#--------------------------------------------------------------
tether() {
	# Check for required dependencies
	for mis_dep in ls ln sed grep mkdir; do
		[[ ! $(type -p $mis_dep) ]] && {
			print_missing_dependencies "$mis_dep"
		}
	done
	# Get and parse names of all applets
	applet_name="$(declare -F)"
	applet_name="${applet_name//declare -f /}"
	# Declare installation directory
	folder_name="$2"
	# Output names of all declared functions
	print_function_names() {
		for function_spaced in ${applet_name//tether}; do
			[[ $function_spaced != *_* ]] && {
				function_space+="${function_spaced}, "
			}
		done
		echo "${function_space%,*}"
	}
	# Count declared applets/functions
	req_func() {
		func_count=0
		for applet_count in ${applet_name//tether}; do
			[[ $applet_count != *_* ]] && {
				func_count=$(( func_count + 1 ))
			}
		done
		echo "$func_count"
	}
	print_help() {
		echo -e "${script_name} ${script_version}-${HOSTTYPE} (C) 2023, Kolade Ayomide Olanrewaju (tether)"
		echo -e "$script_name is Licensed under GPL-3.0-or-later. See <https://www.gnu.org/licenses/> for detailed copyright notices.\n"
		echo -e "Usage:    $script_name [FUNCTION] [ARGUMENTS...]"
		echo -e "          $script_name [OPTION] [FOLDER]\n"
		echo -e "Examples: $script_name --install /usr/bin"
		echo -e "          $script_name touchzip --encrypt dotfiles.7z .bashrc"
		echo -e "          $script_name extract dotfiles.7z\n"
		echo -e "Options: -h, --help     Print out this message"
		echo -e "         -i, --install  Create symbolic links in the specified folder"
		echo -e "         -l, --list     List all available functions"
		echo -e "         -s, --silent   '-i/--install' with hidden output"
		echo -e "         -V, --version  Show version information\n"
		echo -e "\033[1;97m$script_name\033[00m is a multi-call shell script that combines many applets into a single executable."
		echo -e "Create symbolic links to \033[1;97m$script_name\033[00m for each function and \033[1;97m$script_name\033[00m will act like whatever it was invoked as\n"
		echo -e "\033[1;97mCurrently defined functions ($(req_func)):\033[00m"
		print_function_names
		exit 0
	}
	check_input_option() {
		for primary_options in "${@:1}"; do
			case "$primary_options" in
				-h | --help)
					print_help
				;;
				-i | --install)
					[[ $# -gt 2 ]] && {
						print_syntax_error
					}
					[[ $# -eq 1 ]] && {
						print_error "Missing destination file operand after '$primary_options'"
						print_notification
					}
					# Quoting $applet_name causes errors
					for function_flat in ${applet_name//tether}; do
						[[ $function_flat != *_* ]] && {
							mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
							ln -sf "$script_name" "$folder_name/$function_flat" 2>/dev/null || print_file_write_error "$function_flat"
							print_success "Created '$function_flat' symlink in '$folder_name'"
						}
					done
					# Handles ./${script_name}
					[[ -f ${0#\.\/} ]] && {
						cp -f "${0#\.\/}" "$folder_name" 2>/dev/null
					}
					# Handles ./<dirname>/${script_name}
					[[ -f ${0#\.} ]] && {
						cp -f "${0#\.}" "$folder_name" 2>/dev/null
					}
					exit 0
				;;
				-l | --list)
					echo -e "\033[1;97mCurrently defined functions ($(req_func)):\033[00m"
					print_function_names
					exit 0
				;;
				-s | --silent)
					[[ $# -gt 2 ]] && {
						print_syntax_error
					}
					[[ $# -eq 1 ]] && {
						print_error "Missing destination file operand after '$primary_options'"
						print_notification
					}
					# Quoting $applet_name causes errors
					for function_flat in ${applet_name//tether}; do
						[[ $function_flat != *_* ]] && {
							mkdir -p "$folder_name" 2>/dev/null || print_write_error "$folder_name"
							ln -sf "$script_name" "$folder_name/$function_flat" 2>/dev/null || print_file_write_error "$function_flat"
						}
					done
					# Handles ./${script_name}
					[[ -f ${0#\.\/} ]] && {
						cp -f "${0#\.\/}" "$folder_name" 2>/dev/null
					}
					# Handles ./<dirname>/${script_name}
					[[ -f ${0#\.} ]] && {
						cp -f "${0#\.}" "$folder_name" 2>/dev/null
					}
					exit 0
				;;
				-V | --version)
					echo -e "${script_name} ${script_version}-${HOSTTYPE}"
					exit 0
				;;
				-*)
					[[ -z ${primary_options#*\-} || -z ${primary_options/\-\-*} ]] && {
						print_error "Invalid option '${primary_options}'"
						print_notification
					}
					print_error "Invalid option -- '${primary_options#*\-}'"
					print_notification
				;;
				*)
					[[ $(echo "$applet_name" | grep -x "$1" 2>/dev/null) ]] && {
						# Makes $script_name the name of the executed function
						script_name="${1}"
						# Handles main script
						# Example: tether mkcp newfolder file
						"${@:1}"
						exit 0
					}
					# Handles renamed main program
					[[ ! $(echo "$applet_name" | grep -x "$script_name" 2>/dev/null) ]] && {
						script_name="tether"
						print_error "$script_name: '$0' applet not found"
						exit 1
					}
					# Handles specified function not existing
					# Makes $script_name the name of the main script
					script_name="${0##*/}"
					print_error "$script_name: '$1' applet not found"
					exit 1
				;;
			esac
		done
	}
	trap 'run_on_exit' 1 2 3 15
	# Set $applet_name to only desired functions i.e remove print_error...
	applet_name="$(echo "$applet_name" | sed 's/.*_.*//' 2>/dev/null)"
	# Handles symlinked applets
	# Example: mkcp newfolder file
	[[ $(echo "$applet_name" | grep -x "$script_name" 2>/dev/null) && $script_name != "tether" ]] && {
		"$script_name" "${@:1}" && exit 0
	}
	# Handles symlinked applets that don't exist
	[[ ! $(echo "$applet_name" | grep -x "$script_name" 2>/dev/null) ]] && {
		script_name="tether"
		print_error "$script_name: '${0##*/}' applet not found"
		exit 1
	}
	# If no input is specified
	print_no_argument "$@"
	# Handles input to the main script
	check_input_option "$@"
	exit
}

tether "$@"
